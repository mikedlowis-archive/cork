cscope 15 C:\Src\Personal\libraries\cork"               0000250749
	@source/cork.cpp

1 
	~"c‹k.h
"

4 #unde‡
mÆloc


5 #unde‡
‰ì


7 
	~<io°ªam
>

8 
	~<ex˚±i⁄
>

9 
	~<c°dlib
>

10 
	~<°rög.h
>

13 
usög
 
«me•a˚
 
	g°d
;

18 
	sBlockTabÀE¡ry


20 * 
	m±r
;

21 
	msize
;

22 c⁄° * 
	mfûe
;

23 
	mlöe
;

24 * 
	m√xt
;

25 } 
	tBlockTabÀE¡ry_T
;

27 
	sBlockTabÀ


29 
	msize
;

30 
BlockTabÀE¡ry_T
* 
	mblocks
[
TBL_SIZE
];

31 } 
	tBlockTabÀ_T
;

36 
ö£π_ªc‹d
(* 
±r
, 
BlockTabÀ_T
* 
íåy
);

37 
îa£_ªc‹d
(* 
±r
);

42 
	gÆloˇãd
;

43 
BlockTabÀ_T
 
	gBlock_TabÀ
 = { 0, {0} };

48 
	$ö£π_ªc‹d
(* 
±r
, 
BlockTabÀE¡ry_T
* 
íåy
)

50 
ödex
 = (()
±r
Ë% 
TBL_SIZE
;

51 
BlockTabÀE¡ry_T
* 
œ°
 = 
Block_TabÀ
.
blocks
[ 
ödex
 ];

52 
BlockTabÀE¡ry_T
* 
cuº
 = 
œ°
;

54 
cuº
 !
NULL
)

56 i‡–
cuº
->
±r
 ==Ötr )

58 
cuº
->
size
 = 
íåy
->size;

59 
	`‰ì
(
íåy
);

62 
œ°
 = 
cuº
;

63 
cuº
 = (
BlockTabÀE¡ry_T
*)cuº->
√xt
;

66 if(
cuº
 =
NULL
)

68 i‡(
œ°
 !
NULL
)

70 
œ°
->
√xt
 = 
íåy
;

74 
Block_TabÀ
.
blocks
[
ödex
] = 
íåy
;

76 
Block_TabÀ
.
size
++;

78 
	}
}

80 
	$îa£_ªc‹d
(* 
±r
)

82 
dïth
 = 0;

83 
ödex
 = (()
±r
Ë% 
TBL_SIZE
;

84 
BlockTabÀE¡ry_T
* 
œ°
 = 
Block_TabÀ
.
blocks
[ 
ödex
 ];

85 
BlockTabÀE¡ry_T
* 
cuº
 = 
œ°
;

87  
cuº
 !
NULL
 )

89 
dïth
 = 1;

90 if–
cuº
->
±r
 ==Ötr )

92 
dïth
 = 2;

93 if(
œ°
 =
cuº
)

95 
dïth
 = 3;

96 
Block_TabÀ
.
blocks
[ 
ödex
 ] = (
BlockTabÀE¡ry_T
*)
cuº
->
√xt
;

100 
dïth
 = 4;

101 
œ°
->
√xt
 = 
cuº
->next;

103 
	`‰ì
(
cuº
);

104 
Block_TabÀ
.
size
--;

107 
œ°
 = 
cuº
;

108 
cuº
 = (
BlockTabÀE¡ry_T
*)cuº->
√xt
;

110 
	}
}

112 
	$C‹k_Rï‹tMem‹yLóks
()

114 
ödex
 = 0;

115 
cout
 << "-----------------------------------------------------------------" << 
ídl
;

116 
cout
 << "C‹k: Mem‹y AŒoˇti⁄ A«lysis" << 
ídl
;

117 
cout
 << "-----------------------------------------------------------------" << 
ídl
;

118 
cout
 << "You havê" << 
Block_TabÀ
.
size
 << " Un˛aimed obje˘s." << 
ídl
;

120 ; 
ödex
 < 
TBL_SIZE
; index++)

122 
BlockTabÀE¡ry_T
* 
íåy
 = 
Block_TabÀ
.
blocks
[ 
ödex
 ];

123 
íåy
 !
NULL
)

125 
cout
 << "\t" << 
íåy
->
size
 << "\t" <<É¡ry->
±r
;

126 if–
íåy
->
fûe
 !
NULL
 )

128 
cout
 << "\t" << 
íåy
->
löe
 << "\t" <<É¡ry->
fûe
;

130 
cout
 << 
ídl
;

131 
íåy
 = (
BlockTabÀE¡ry_T
*Î¡ry->
√xt
;

134 
	}
}

136 * 
›î©‹
 
	$√w
 (
size_t
 
size
, 
°rög
 
fûe
, 
löe
)

138 * 
±r
 = 
	`mÆloc
(
size
);

139 * 
‚ame
 = (*)
	`mÆloc
(
fûe
.
	`Àngth
());

140 if(
±r
 =
NULL
)

142 
throw
 
	`bad_Æloc
();

146 
BlockTabÀE¡ry_T
* 
íåy
 = (BlockTabÀE¡ry_T*)
	`mÆloc
((BlockTableEntry_T));

147 
	`°r˝y
–
‚ame
, 
fûe
.
	`c_°r
() );

148 
íåy
->
±r
 =Ötr;

149 
íåy
->
size
 = size;

150 
íåy
->
fûe
 = 
‚ame
;

151 
íåy
->
löe
 =Üine;

152 
íåy
->
√xt
 = 
NULL
;

153 
	`ö£π_ªc‹d
(
±r
,
íåy
);

155  
±r
;

156 
	}
}

158 * 
›î©‹
 
	$√w
(
size_t
 
size
Ë
	$throw
(
bad_Æloc
) {

159 * 
±r
 = 
	`mÆloc
(
size
);

160 if(
±r
 =
NULL
)

162 
throw
 
	`bad_Æloc
();

166 
BlockTabÀE¡ry_T
* 
íåy
 = (BlockTabÀE¡ry_T*)
	`mÆloc
((BlockTableEntry_T));

167 
íåy
->
±r
 =Ötr;

168 
íåy
->
size
 = size;

169 
íåy
->
fûe
 = 
NULL
;

170 
íåy
->
löe
 = 0;

171 
íåy
->
√xt
 = 
NULL
;

172 
	`ö£π_ªc‹d
(
±r
,
íåy
);

174  
±r
;

175 
	}
}

177 
›î©‹
 
	$dñëe
(* 
p
) {

178 
	`‰ì
(
p
);

179 
	`îa£_ªc‹d
(
p
);

180 
	}
}

	@source/cork.h

1 #i‚de‡
CORK_H


2 
	#CORK_H


	)

4 
	~<°rög
>

5 
	tsize_t
;

7 
C‹k_Rï‹tMem‹yLóks
();

8 * 
›î©‹
 
√w
 (
size_t
 
size
, 
°d
::
°rög
 
fûe
, 
löe
);

10 
	#TBL_SIZE
 512

	)

11 
	#_√w
 
	`√w
 (
__FILE__
,
__LINE__
)

	)

	@tests/source/main.h

1 
	~<cxxã°/Te°Suôe.h
>

3 ˛as†
	cMyTe°Suôe2
 : 
public
 
CxxTe°
::
Te°Suôe


5 
public
:

6 
	$ã°Addôi⁄
()

8 
	`TS_ASSERT
(1 + 1 > 1);

9 
	`TS_ASSERT_EQUALS
(1 + 1, 2);

12 
	$ã°Mu…ùliˇti⁄
()

14 
	`TS_TRACE
("Starting multiplicationÅest");

15 
	`TS_ASSERT_EQUALS
(2 * 2, 5);

16 
	`TS_TRACE
("Finishing multiplicationÅest");

17 
	}
}

	@tools/cxxtest/build_tools/SCons/test/empty_source_list/requirement.hpp

10 
boﬁ
 
	$ˇŒ_a_ªquúemít
() {

11  
åue
;

12 
	}
}

	@tools/cxxtest/build_tools/SCons/test/empty_source_list/test_bar.t.h

1 #i‚de‡
TEST_BAR_T_H


2 
	#TEST_BAR_T_H


	)

12 
	~<cxxã°/Te°Suôe.h
>

13 
	~"ªquúemít.hµ
"

15 ˛as†
	cTe°B¨
 : 
public
 
CxxTe°
::
Te°Suôe


17 
public
:

18 
	$ã°_foo
() {

19 
	`TS_ASSERT
(
	`ˇŒ_a_ªquúemít
());

21 
	}
};

	@tools/cxxtest/build_tools/SCons/test/empty_source_list/test_foo.t.h

1 #i‚de‡
TEST_FOO_T_H


2 
	#TEST_FOO_T_H


	)

12 
	~"ªquúemít.hµ
"

13 
	~<cxxã°/Te°Suôe.h
>

15 ˛as†
	cTe°Foo
 : 
public
 
CxxTe°
::
Te°Suôe


17 
public
:

18 
	$ã°_foo
() {

19 
	`TS_ASSERT
(
	`ˇŒ_a_ªquúemít
());

21 
	}
};

	@tools/cxxtest/build_tools/SCons/test/globbing/src/requirement.cpp

10 
	~"ªquúemít.h
"

12 
boﬁ
 
	$ˇŒ_a_ªquúemít
() {

13  
åue
;

14 
	}
}

	@tools/cxxtest/build_tools/SCons/test/globbing/src/requirement.h

1 #i‚de‡
REQUIREMENT_H


2 
	#REQUIREMENT_H


	)

12 
boﬁ
 
ˇŒ_a_ªquúemít
();

	@tools/cxxtest/build_tools/SCons/test/globbing/src/test_bar.t.h

1 #i‚de‡
TEST_BAR_T_H


2 
	#TEST_BAR_T_H


	)

12 
	~<cxxã°/Te°Suôe.h
>

13 
	~"ªquúemít.h
"

15 ˛as†
	cTe°B¨
 : 
public
 
CxxTe°
::
Te°Suôe


17 
public
:

18 
	$ã°_foo
() {

19 
	`TS_ASSERT
(
	`ˇŒ_a_ªquúemít
());

21 
	}
};

	@tools/cxxtest/build_tools/SCons/test/globbing/src/test_foo.t.h

1 #i‚de‡
TEST_FOO_T_H


2 
	#TEST_FOO_T_H


	)

12 
	~"ªquúemít.h
"

13 
	~<cxxã°/Te°Suôe.h
>

15 ˛as†
	cTe°Foo
 : 
public
 
CxxTe°
::
Te°Suôe


17 
public
:

18 
	$ã°_foo
() {

19 
	`TS_ASSERT
(
	`ˇŒ_a_ªquúemít
());

21 
	}
};

	@tools/cxxtest/build_tools/SCons/test/globbing_edmundo/hello.cc

16 
	~<hñlo.hh
>

19 
	gHñlo
::
	$foo
(
x
, 
y
)

21  
x
 + 
y
;

22 
	}
}

	@tools/cxxtest/build_tools/SCons/test/globbing_edmundo/hello.hh

11 ˛as†
	cHñlo


13 
	mpublic
:

14 
foo
(
x
, 
y
);

	@tools/cxxtest/build_tools/SCons/test/globbing_edmundo/hellotest.t.h

11 
	~<cxxã°/Te°Suôe.h
>

12 
	~<hñlo.hh
>

15 ˛as†
	chñloTe°Suôe
 : 
public
 
CxxTe°
::
Te°Suôe


17 
public
:

18 
	$ã°Foo
()

20 
Hñlo
 
h
;

21 
	`TS_ASSERT_EQUALS
 (
h
.
	`foo
(2,2), 4);

23 
	}
};

	@tools/cxxtest/build_tools/SCons/test/globbing_edmundo/main.cpp

11 
	~<hñlo.hh
>

12 
	~<io°ªam
>

14 
	$maö
 (
¨gc
, *
¨gv
[])

16 
Hñlo
 
h
;

17 
°d
::
cout
 << 
h
.
	`foo
(2,3Ë<< std::
ídl
;

18 
	}
}

	@tools/cxxtest/build_tools/SCons/test/include_CCFLAGS/src/not-with-pedantic.h

11 
	~<cxxã°/Te°Suôe.h
>

13 ˛as†
	cTe°Ped™tic
 : 
public
 
CxxTe°
::
Te°Suôe


15 
public
:

16 
	$ã°Ped™ticPª£¡
() {

17 
	`TS_ASSERT
(
åue
);

18 
f
 = (
åue
)?:5;

20 
	}
};

	@tools/cxxtest/build_tools/SCons/test/include_CCFLAGS/src/only_with_ansi.t.h

10 
	~<cxxã°/Te°Suôe.h
>

12 ˛as†
	cTe°Ansi
 : 
public
 
CxxTe°
::
Te°Suôe


14 
public
:

15 
	$ã°AnsiPª£¡
() {

16 #ifde‡
__STRICT_ANSI__


17 
	`TS_ASSERT
(
åue
);

19 
	`TS_ASSERT
(
Ál£
);

22 
	}
};

	@tools/cxxtest/build_tools/SCons/test/include_CXXFLAGS/src/not-with-pedantic.h

11 
	~<cxxã°/Te°Suôe.h
>

13 ˛as†
	cTe°Ped™tic
 : 
public
 
CxxTe°
::
Te°Suôe


15 
public
:

16 
	$ã°Ped™ticPª£¡
() {

17 
f
 = (
åue
)?:5;

19 
	}
};

	@tools/cxxtest/build_tools/SCons/test/multifile_tests/src/requirement.cpp

10 
	~"ªquúemít.h
"

12 
boﬁ
 
	$ˇŒ_a_ªquúemít
() {

13  
åue
;

14 
	}
}

	@tools/cxxtest/build_tools/SCons/test/multifile_tests/src/requirement.h

1 #i‚de‡
REQUIREMENT_H


2 
	#REQUIREMENT_H


	)

12 
boﬁ
 
ˇŒ_a_ªquúemít
();

	@tools/cxxtest/build_tools/SCons/test/multifile_tests/src/test_bar.t.h

1 #i‚de‡
TEST_BAR_T_H


2 
	#TEST_BAR_T_H


	)

12 
	~<cxxã°/Te°Suôe.h
>

13 
	~"ªquúemít.h
"

15 ˛as†
	cTe°B¨
 : 
public
 
CxxTe°
::
Te°Suôe


17 
public
:

18 
	$ã°_foo
() {

19 
	`TS_ASSERT
(
	`ˇŒ_a_ªquúemít
());

21 
	}
};

	@tools/cxxtest/build_tools/SCons/test/multifile_tests/src/test_foo.t.h

1 #i‚de‡
TEST_FOO_T_H


2 
	#TEST_FOO_T_H


	)

12 
	~"ªquúemít.h
"

13 
	~<cxxã°/Te°Suôe.h
>

15 ˛as†
	cTe°Foo
 : 
public
 
CxxTe°
::
Te°Suôe


17 
public
:

18 
	$ã°_foo
() {

19 
	`TS_ASSERT
(
	`ˇŒ_a_ªquúemít
());

21 
	}
};

	@tools/cxxtest/build_tools/SCons/test/need_cpppath/src/cpppath.t.h

1 #i‚de‡
CPPPATH_T_H


2 
	#CPPPATH_T_H


	)

14 
	~"ö˛ude.h
"

15 
	~<cxxã°/Te°Suôe.h
>

17 ˛as†
	cCµP©hTe°
 : 
public
 
CxxTe°
::
Te°Suôe


19 
public
:

20 
	$ã°_i_√ed_me_exi°s
() {

21 
	`TS_ASSERT
(
	`i_√ed_me
() == 0);

23 
	}
};

	@tools/cxxtest/build_tools/SCons/test/need_cpppath/src/cpppathdir/include.h

1 #i‚de‡
INCLUDE_H


2 
	#INCLUDE_H


	)

12 
	$i_√ed_me
() {

14 
	}
}

	@tools/cxxtest/build_tools/SCons/test/printer_propagation/cxxtest/CrazyRunner.h

1 #i‚de‡
__cxxã°_CøzyRu¬î_h__


2 
	#__cxxã°_CøzyRu¬î_h__


	)

8 
«me•a˚
 
	gCxxTe°
 {

9 ˛as†
	cCøzyRu¬î
 {

10 
	gpublic
:

11 
run
() {  0; }

12 
¥o˚ss_comm™dlöe
(
¨gc
, ** 
¨gv
) { }

	@tools/cxxtest/build_tools/SCons/test/printer_propagation/src/failtest.t.h

1 #i‚de‡
FAILTEST_T_H


2 
	#FAILTEST_T_H


	)

13 
	~<cxxã°/Te°Suôe.h
>

15 ˛as†
	cCµP©hTe°
 : 
public
 
CxxTe°
::
Te°Suôe


17 
public
:

18 
	$ã°_i_wûl_Áû
() {

19 
	`TS_ASSERT
(
Ál£
);

21 
	}
};

	@tools/cxxtest/build_tools/SCons/test/recursive_sources/src/requirement.cpp

10 
	~"ªquúemít.h
"

12 
boﬁ
 
	$ˇŒ_a_ªquúemít
() {

13  
åue
;

14 
	}
}

	@tools/cxxtest/build_tools/SCons/test/recursive_sources/src/requirement.h

1 #i‚de‡
REQUIREMENT_H


2 
	#REQUIREMENT_H


	)

12 
boﬁ
 
ˇŒ_a_ªquúemít
();

	@tools/cxxtest/build_tools/SCons/test/recursive_sources/src/test_bar.t.h

1 #i‚de‡
TEST_BAR_T_H


2 
	#TEST_BAR_T_H


	)

12 
	~<cxxã°/Te°Suôe.h
>

13 
	~"ªquúemít.h
"

15 ˛as†
	cTe°B¨
 : 
public
 
CxxTe°
::
Te°Suôe


17 
public
:

18 
	$ã°_foo
() {

19 
	`TS_ASSERT
(
	`ˇŒ_a_ªquúemít
());

21 
	}
};

	@tools/cxxtest/build_tools/SCons/test/recursive_sources/src/test_foo.t.h

1 #i‚de‡
TEST_FOO_T_H


2 
	#TEST_FOO_T_H


	)

12 
	~"ªquúemít.h
"

13 
	~<cxxã°/Te°Suôe.h
>

15 ˛as†
	cTe°Foo
 : 
public
 
CxxTe°
::
Te°Suôe


17 
public
:

18 
	$ã°_foo
() {

19 
	`TS_ASSERT
(
	`ˇŒ_a_ªquúemít
());

21 
	}
};

	@tools/cxxtest/build_tools/SCons/test/string_cpppath/src/cpppath.t.h

1 #i‚de‡
CPPPATH_T_H


2 
	#CPPPATH_T_H


	)

14 
	~"ö˛ude.h
"

15 
	~<cxxã°/Te°Suôe.h
>

17 ˛as†
	cCµP©hTe°
 : 
public
 
CxxTe°
::
Te°Suôe


19 
public
:

20 
	$ã°_i_√ed_me_exi°s
() {

21 
	`TS_ASSERT
(
	`i_√ed_me
() == 0);

23 
	}
};

	@tools/cxxtest/build_tools/SCons/test/string_cpppath/src/cpppathdir/include.h

1 #i‚de‡
INCLUDE_H


2 
	#INCLUDE_H


	)

12 
	$i_√ed_me
() {

14 
	}
}

	@tools/cxxtest/build_tools/SCons/test/target_syntax/src/cpppath.t.h

1 #i‚de‡
CPPPATH_T_H


2 
	#CPPPATH_T_H


	)

14 
	~"ö˛ude.h
"

15 
	~<cxxã°/Te°Suôe.h
>

17 ˛as†
	cCµP©hTe°
 : 
public
 
CxxTe°
::
Te°Suôe


19 
public
:

20 
	$ã°_i_√ed_me_exi°s
() {

21 
	`TS_ASSERT
(
	`i_√ed_me
() == 0);

23 
	}
};

	@tools/cxxtest/build_tools/SCons/test/target_syntax/src/cpppathdir/include.h

1 #i‚de‡
INCLUDE_H


2 
	#INCLUDE_H


	)

12 
	$i_√ed_me
() {

14 
	}
}

	@tools/cxxtest/cxxtest/Descriptions.cpp

12 #i‚de‡
__cxxã°__Des¸ùti⁄s_˝p__


13 
	#__cxxã°__Des¸ùti⁄s_˝p__


	)

15 
	~<cxxã°/Des¸ùti⁄s.h
>

17 
«me•a˚
 
	gCxxTe°


19 
	gTe°Des¸ùti⁄
::~
Te°Des¸ùti⁄
() {}

20 
SuôeDes¸ùti⁄
::~SuiteDescription() {}

21 
W‹ldDes¸ùti⁄
::~WorldDescription() {}

26 #i‚de‡
_CXXTEST_FACTOR


27 *
W‹ldDes¸ùti⁄
::
°rTŸÆTe°s
–*
s
 ) const

29 
numbîToSåög
–
numTŸÆTe°s
(), 
s
 );

30  
	gs
;

33 *
	gW‹ldDes¸ùti⁄
::
°rTŸÆTe°s
–*
s
 ) const

35 *
p
 = 
numbîToSåög
–
numTŸÆTe°s
(), 
s
 );

37 i‡–
numTŸÆTe°s
() <= 1 )

38  
s
;

40 
	gn
 = 
numTŸÆTe°s
();

41 
	gnumFa˘‹s
 = 0;

43  
	gÁ˘‹
 = 2; (
Á˘‹
 * fa˘‹Ë<
n
; factor += (factor == 2) ? 1 : 2 ) {

44 
powî
;

46  
	gpowî
 = 0; (
	gn
 % 
	gÁ˘‹
Ë=0;Ç /
Á˘‹
 )

47 ++ 
powî
;

49 i‡–!
	gpowî
 )

52 
	gp
 = 
numbîToSåög
–
Á˘‹
, 
c›ySåög
–
p
, (
numFa˘‹s
 == 0) ? " = " : " * " ) );

53 i‡–
	gpowî
 > 1 )

54 
	gp
 = 
numbîToSåög
–
powî
, 
c›ySåög
–
p
, "^" ) );

55 ++ 
	gnumFa˘‹s
;

58 i‡–
	gn
 > 1 ) {

59 i‡–!
	gnumFa˘‹s
 )

60 
c›ySåög
–
p
, 
åackî
().
ÁûedTe°s
(Ë? " :(" :Åøckî().
w¨nögs
() ? " :|" : " :)" );

62 
numbîToSåög
–
n
, 
c›ySåög
–
p
, " * " ) );

64  
	gs
;

	@tools/cxxtest/cxxtest/Descriptions.h

12 #i‚de‡
__cxxã°__Des¸ùti⁄s_h__


13 
	#__cxxã°__Des¸ùti⁄s_h__


	)

20 
	~<cxxã°/LökedLi°.h
>

22 
«me•a˚
 
	gCxxTe°


24 
˛ass
 
	gTe°Suôe
;

26 ˛as†
	cTe°Des¸ùti⁄
 : 
public
 
Lök


28 
public
:

29 
vútuÆ
 ~
Te°Des¸ùti⁄
();

31 
vútuÆ
 c⁄° *
fûe
() const = 0;

32 
vútuÆ
 
löe
() const = 0;

33 
vútuÆ
 c⁄° *
ã°Name
() const = 0;

34 
vútuÆ
 c⁄° *
suôeName
() const = 0;

36 
vútuÆ
 
run
() = 0;

37 
vútuÆ
 
boﬁ
 
£tUp
() = 0;

38 
vútuÆ
 
boﬁ
 
ã¨Down
() = 0;

40 
vútuÆ
 c⁄° 
Te°Des¸ùti⁄
 *
√xt
() const = 0;

41 
vútuÆ
 
Te°Des¸ùti⁄
 *
√xt
() = 0;

44 ˛as†
	cSuôeDes¸ùti⁄
 : 
public
 
Lök


46 
public
:

47 
vútuÆ
 ~
SuôeDes¸ùti⁄
();

49 
vútuÆ
 c⁄° *
fûe
() const = 0;

50 
vútuÆ
 
löe
() const = 0;

51 
vútuÆ
 c⁄° *
suôeName
() const = 0;

52 
vútuÆ
 
Te°Suôe
 *
suôe
() const = 0;

54 
vútuÆ
 
numTe°s
() const = 0;

55 
vútuÆ
 c⁄° 
	gTe°Des¸ùti⁄
 &
ã°Des¸ùti⁄
( ) const = 0;

57 
vútuÆ
 
Te°Des¸ùti⁄
 *
fú°Te°
() = 0;

58 
vútuÆ
 c⁄° 
Te°Des¸ùti⁄
 *
fú°Te°
() const = 0;

59 
vútuÆ
 
SuôeDes¸ùti⁄
 *
√xt
() = 0;

60 
vútuÆ
 c⁄° 
SuôeDes¸ùti⁄
 *
√xt
() const = 0;

62 
vútuÆ
 
a˘iv©eAŒTe°s
() = 0;

63 
vútuÆ
 
boﬁ
 
ÀaveO∆y
( const * ) = 0;

65 
vútuÆ
 
boﬁ
 
£tUp
() = 0;

66 
vútuÆ
 
boﬁ
 
ã¨Down
() = 0;

69 ˛as†
	cW‹ldDes¸ùti⁄
 : 
public
 
Lök


71 
public
:

72 
vútuÆ
 ~
W‹ldDes¸ùti⁄
();

74 
vútuÆ
 c⁄° *
w‹ldName
() const {  "cxxtest"; }

75 
vútuÆ
 
numSuôes
( ) const = 0;

76 
vútuÆ
 
numTŸÆTe°s
( ) const = 0;

77 
vútuÆ
 c⁄° 
	gSuôeDes¸ùti⁄
 &
suôeDes¸ùti⁄
( ) const = 0;

79 íum { 
	gMAX_STRLEN_TOTAL_TESTS
 = 32 };

80 *
°rTŸÆTe°s
( * ) const;

82 
vútuÆ
 
SuôeDes¸ùti⁄
 *
fú°Suôe
() = 0;

83 
vútuÆ
 c⁄° 
SuôeDes¸ùti⁄
 *
fú°Suôe
() const = 0;

85 
vútuÆ
 
a˘iv©eAŒTe°s
() = 0;

86 
vútuÆ
 
boﬁ
 
ÀaveO∆y
( const * , const * = 0 ) = 0;

	@tools/cxxtest/cxxtest/DummyDescriptions.cpp

12 
	~<cxxã°/DummyDes¸ùti⁄s.h
>

14 
«me•a˚
 
	gCxxTe°


16 
	gDummyTe°Des¸ùti⁄
::
DummyTe°Des¸ùti⁄
() {}

18 c⁄° *
DummyTe°Des¸ùti⁄
::
fûe
() const {  "<no file>"; }

19 
	gDummyTe°Des¸ùti⁄
::
löe
() const {  0; }

20 c⁄° *
	gDummyTe°Des¸ùti⁄
::
ã°Name
() const {  "<noÅest>"; }

21 c⁄° *
	gDummyTe°Des¸ùti⁄
::
suôeName
() const {  "<no suite>"; }

22 
boﬁ
 
	gDummyTe°Des¸ùti⁄
::
£tUp
(Ë{  
åue
;}

23 
	gDummyTe°Des¸ùti⁄
::
run
() {}

24 
boﬁ
 
DummyTe°Des¸ùti⁄
::
ã¨Down
(Ë{  
åue
;}

26 
Te°Des¸ùti⁄
 *
	gDummyTe°Des¸ùti⁄
::
√xt
() {  0; }

27 c⁄° 
Te°Des¸ùti⁄
 *
	gDummyTe°Des¸ùti⁄
::
√xt
() const {  0; }

29 
	gDummySuôeDes¸ùti⁄
::
DummySuôeDes¸ùti⁄
(Ë: 
_ã°
() {}

31 c⁄° *
DummySuôeDes¸ùti⁄
::
fûe
() const {  "<no file>"; }

32 
	gDummySuôeDes¸ùti⁄
::
löe
() const {  0; }

33 c⁄° *
	gDummySuôeDes¸ùti⁄
::
suôeName
() const {  "<no suite>"; }

34 
Te°Suôe
 *
	gDummySuôeDes¸ùti⁄
::
suôe
() const {  0; }

35 
	gDummySuôeDes¸ùti⁄
::
numTe°s
() const {  0; }

36 c⁄° 
	gTe°Des¸ùti⁄
 &
	gDummySuôeDes¸ùti⁄
::
ã°Des¸ùti⁄
–Ëc⁄° {  
_ã°
; }

37 
SuôeDes¸ùti⁄
 *
	gDummySuôeDes¸ùti⁄
::
√xt
() {  0; }

38 
Te°Des¸ùti⁄
 *
	gDummySuôeDes¸ùti⁄
::
fú°Te°
() {  0; }

39 c⁄° 
SuôeDes¸ùti⁄
 *
	gDummySuôeDes¸ùti⁄
::
√xt
() const {  0; }

40 c⁄° 
Te°Des¸ùti⁄
 *
	gDummySuôeDes¸ùti⁄
::
fú°Te°
() const {  0; }

41 
	gDummySuôeDes¸ùti⁄
::
a˘iv©eAŒTe°s
() {}

42 
boﬁ
 
DummySuôeDes¸ùti⁄
::
ÀaveO∆y
–c⁄° * ) {  
Ál£
; }

44 
boﬁ
 
	gDummySuôeDes¸ùti⁄
::
£tUp
(Ë{  
åue
;}

45 
boﬁ
 
	gDummySuôeDes¸ùti⁄
::
ã¨Down
(Ë{  
åue
;}

47 
	gDummyW‹ldDes¸ùti⁄
::
DummyW‹ldDes¸ùti⁄
(Ë: 
_suôe
() {}

49 
DummyW‹ldDes¸ùti⁄
::
numSuôes
( ) const {  0; }

50 
	gDummyW‹ldDes¸ùti⁄
::
numTŸÆTe°s
( ) const {  0; }

51 c⁄° 
	gSuôeDes¸ùti⁄
 &
	gDummyW‹ldDes¸ùti⁄
::
suôeDes¸ùti⁄
–Ëc⁄° {  
_suôe
; }

52 
SuôeDes¸ùti⁄
 *
	gDummyW‹ldDes¸ùti⁄
::
fú°Suôe
() {  0; }

53 c⁄° 
SuôeDes¸ùti⁄
 *
	gDummyW‹ldDes¸ùti⁄
::
fú°Suôe
() const {  0; }

54 
	gDummyW‹ldDes¸ùti⁄
::
a˘iv©eAŒTe°s
() {}

55 
boﬁ
 
DummyW‹ldDes¸ùti⁄
::
ÀaveO∆y
–c⁄° * , c⁄° * ) {  
	gÁl£
; }

57 
boﬁ
 
	gDummyW‹ldDes¸ùti⁄
::
£tUp
(Ë{  
åue
;}

58 
boﬁ
 
	gDummyW‹ldDes¸ùti⁄
::
ã¨Down
(Ë{  
åue
;}

	@tools/cxxtest/cxxtest/DummyDescriptions.h

12 #i‚de‡
__cxxã°__DummyDes¸ùti⁄s_h__


13 
	#__cxxã°__DummyDes¸ùti⁄s_h__


	)

19 
	~<cxxã°/Des¸ùti⁄s.h
>

21 
«me•a˚
 
	gCxxTe°


23 ˛as†
	cDummyTe°Des¸ùti⁄
 : 
public
 
Te°Des¸ùti⁄


25 
public
:

26 
DummyTe°Des¸ùti⁄
();

28 c⁄° *
fûe
() const;

29 
löe
() const;

30 c⁄° *
ã°Name
() const;

31 c⁄° *
suôeName
() const;

32 
boﬁ
 
£tUp
();

33 
run
();

34 
boﬁ
 
ã¨Down
();

36 
Te°Des¸ùti⁄
 *
√xt
();

37 c⁄° 
Te°Des¸ùti⁄
 *
√xt
() const;

40 ˛as†
	cDummySuôeDes¸ùti⁄
 : 
public
 
SuôeDes¸ùti⁄


42 
public
:

43 
DummySuôeDes¸ùti⁄
();

45 c⁄° *
fûe
() const;

46 
löe
() const;

47 c⁄° *
suôeName
() const;

48 
Te°Suôe
 *
suôe
() const;

49 
numTe°s
() const;

50 c⁄° 
	gTe°Des¸ùti⁄
 &
ã°Des¸ùti⁄
( ) const;

51 
SuôeDes¸ùti⁄
 *
√xt
();

52 
Te°Des¸ùti⁄
 *
fú°Te°
();

53 c⁄° 
SuôeDes¸ùti⁄
 *
√xt
() const;

54 c⁄° 
Te°Des¸ùti⁄
 *
fú°Te°
() const;

55 
a˘iv©eAŒTe°s
();

56 
boﬁ
 
ÀaveO∆y
( const * );

58 
boﬁ
 
£tUp
();

59 
boﬁ
 
ã¨Down
();

61 
	g¥iv©e
:

62 
DummyTe°Des¸ùti⁄
 
_ã°
;

65 ˛as†
	cDummyW‹ldDes¸ùti⁄
 : 
public
 
W‹ldDes¸ùti⁄


67 
public
:

68 
DummyW‹ldDes¸ùti⁄
();

70 
numSuôes
( ) const;

71 
numTŸÆTe°s
( ) const;

72 c⁄° 
	gSuôeDes¸ùti⁄
 &
suôeDes¸ùti⁄
( ) const;

73 
SuôeDes¸ùti⁄
 *
fú°Suôe
();

74 c⁄° 
SuôeDes¸ùti⁄
 *
fú°Suôe
() const;

75 
a˘iv©eAŒTe°s
();

76 
boﬁ
 
ÀaveO∆y
( const * , const * = 0 );

78 
boﬁ
 
£tUp
();

79 
boﬁ
 
ã¨Down
();

81 
	g¥iv©e
:

82 
DummySuôeDes¸ùti⁄
 
_suôe
;

	@tools/cxxtest/cxxtest/ErrorFormatter.h

12 #i‚de‡
__cxxã°__Eº‹F‹m©ãr_h__


13 
	#__cxxã°__Eº‹F‹m©ãr_h__


	)

23 
	~<cxxã°/Te°Ru¬î.h
>

24 
	~<cxxã°/Te°Li°íî.h
>

25 
	~<cxxã°/Te°Tøckî.h
>

26 
	~<cxxã°/VÆueTøôs.h
>

27 
	~<c°dio
>

29 
«me•a˚
 
	gCxxTe°


31 ˛as†
	cOuçutSåóm


33 
	gpublic
:

34 
vútuÆ
 ~
OuçutSåóm
() {}

35 
vútuÆ
 
Êush
() {};

36 
vútuÆ
 
	gOuçutSåóm
 &
	g›î©‹
<<–Ë{  *
	gthis
; }

37 
vútuÆ
 
	gOuçutSåóm
 &
	g›î©‹
<<–c⁄° * ) {  *
	gthis
; }

39 (*
	gM™ùuœt‹
)–
	tOuçutSåóm
 & );

41 
vútuÆ
 
	gOuçutSåóm
 &
	g›î©‹
<<–
M™ùuœt‹
 
	gm
 ) { 
m
–*
this
 );  *
	gthis
; }

42 
ídl
–
OuçutSåóm
 &
o
 ) { (
	go
 << "\n").
Êush
(); }

45 ˛as†
	cEº‹F‹m©ãr
 : 
public
 
Te°Li°íî


47 
public
:

48 
Eº‹F‹m©ãr
–
OuçutSåóm
 *
o
, c⁄° *
¥eLöe
 = ":", c⁄° *
po°Löe
 = "" ) :

49 
_dŸtög
–
åue
 ),

50 
_ªp‹ãd
–
Ál£
 ),

51 
_o
(
o
),

52 
_¥eLöe
(
¥eLöe
),

53 
_po°Löe
(
po°Löe
)

57 
run
()

59 
	gTe°Ru¬î
::
runAŒTe°s
–*
this
 );

60  
åackî
().
ÁûedTe°s
();

63 
íãrW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 & )

65 (*
	g_o
Ë<< "Ru¬ög " << 
	gtŸÆTe°s
;

66 
	g_o
->
Êush
();

67 
	g_dŸtög
 = 
åue
;

68 
	g_ªp‹ãd
 = 
Ál£
;

71 
tŸÆTe°s
–
OuçutSåóm
 &
o
 )

73 
	gs
[
W‹ldDes¸ùti⁄
::
MAX_STRLEN_TOTAL_TESTS
];

74 c⁄° 
	gW‹ldDes¸ùti⁄
 &
	gwd
 = 
åackî
().
w‹ld
();

75 
	go
 << 
	gwd
.
°rTŸÆTe°s
–
s
 ) << (wd.
numTŸÆTe°s
() == 1 ? "Åest" : "Åests");

78 
íãrSuôe
–c⁄° 
SuôeDes¸ùti⁄
 & )

80 
	g_ªp‹ãd
 = 
Ál£
;

83 
íãrTe°
–c⁄° 
Te°Des¸ùti⁄
 & )

85 
	g_ªp‹ãd
 = 
Ál£
;

88 
ÀaveTe°
–c⁄° 
Te°Des¸ùti⁄
 & )

90 i‡–!
åackî
().
ã°Faûed
() ) {

91 (*
	g_o
) << ".";

92 
	g_o
->
Êush
();

93 
fÊush
(
°dout
);

94 
	g_dŸtög
 = 
åue
;

98 
ÀaveW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 &
desc
 )

100 i‡–!
åackî
().
ÁûedTe°s
() ) {

101 (*
	g_o
Ë<< "OK!" << 
	gídl
;

104 
√wLöe
();

105 (*
	g_o
Ë<< "Faûed " << 
åackî
().
ÁûedTe°s
(Ë<< " o‡" << 
	gtŸÆTe°s
 << 
	gídl
;

106 
	gnumPas£d
 = 
desc
.
numTŸÆTe°s
(Ë- 
åackî
().
ÁûedTe°s
();

107 (*
	g_o
Ë<< "Suc˚s†øã: " << (
	gnumPas£d
 * 100 / 
	gdesc
.
numTŸÆTe°s
()Ë<< "%" << 
	gídl
;

110 
åa˚
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

112 
°›
–
fûe
, 
löe
 ) << "Trace: " <<

113 
	gex¥essi⁄
 << 
	gídl
;

116 
w¨nög
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

118 
°›
–
fûe
, 
löe
 ) << "Warning: " <<

119 
	gex¥essi⁄
 << 
	gídl
;

122 
ÁûedTe°
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

124 
°›
–
fûe
, 
löe
 ) << "Error: Test failed: " <<

125 
	gex¥essi⁄
 << 
	gídl
;

128 
ÁûedAs£π
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

130 
°›
–
fûe
, 
löe
 ) << "Error: Assertion failed: " <<

131 
	gex¥essi⁄
 << 
	gídl
;

134 
ÁûedAs£πEquÆs
–c⁄° *
fûe
, 
löe
,

135 c⁄° *
xSå
, c⁄° *
ySå
,

136 c⁄° *
x
, c⁄° *
y
 )

138 
°›
–
fûe
, 
löe
 ) << "Error: Expected (" <<

139 
	gxSå
 << " =" << 
	gySå
 << "), found (" <<

140 
	gx
 << " !" << 
	gy
 << ")" << 
	gídl
;

143 
ÁûedAs£πSameD©a
–c⁄° *
fûe
, 
löe
,

144 c⁄° *
xSå
, c⁄° *
ySå
,

145 c⁄° *
sizeSå
, c⁄° *
x
,

146 c⁄° *
y
, 
size
 )

148 
°›
–
fûe
, 
löe
 ) << "Eº‹: Ex≥˘ed " << 
	gsizeSå
 << " (" << 
	gsize
 << ") bytesÅo beÉqualát (" <<

149 
	gxSå
 << "Ë™d (" << 
	gySå
 << "), found:" << 
	gídl
;

150 
dump
–
x
, 
size
 );

151 (*
	g_o
Ë<< " dif„r†‰om" << 
	gídl
;

152 
dump
–
y
, 
size
 );

155 
ÁûedAs£πSameFûes
–c⁄° * 
fûe
, 
löe
,

157 c⁄° * 
ex∂™©i⁄


160 
°›
–
fûe
, 
löe
 ) << "Eº‹: " << 
	gex∂™©i⁄
 << 
	gídl
;

163 
ÁûedAs£πDñè
–c⁄° *
fûe
, 
löe
,

164 c⁄° *
xSå
, c⁄° *
ySå
, c⁄° *
dSå
,

165 c⁄° *
x
, c⁄° *
y
, c⁄° *
d
 )

167 
°›
–
fûe
, 
löe
 ) << "Error: Expected (" <<

168 
	gxSå
 << " =" << 
	gySå
 << "Ëu∞tÿ" << 
	gdSå
 << " (" << 
	gd
 << "), found (" <<

169 
	gx
 << " !" << 
	gy
 << ")" << 
	gídl
;

172 
ÁûedAs£πDif„rs
–c⁄° *
fûe
, 
löe
,

173 c⁄° *
xSå
, c⁄° *
ySå
,

174 c⁄° *
vÆue
 )

176 
°›
–
fûe
, 
löe
 ) << "Error: Expected (" <<

177 
	gxSå
 << " !" << 
	gySå
 << "), found (" <<

178 
	gvÆue
 << ")" << 
	gídl
;

181 
ÁûedAs£πLessTh™
–c⁄° *
fûe
, 
löe
,

182 c⁄° *
xSå
, c⁄° *
ySå
,

183 c⁄° *
x
, c⁄° *
y
 )

185 
°›
–
fûe
, 
löe
 ) << "Error: Expected (" <<

186 
	gxSå
 << " < " << 
	gySå
 << "), found (" <<

187 
	gx
 << " >" << 
	gy
 << ")" << 
	gídl
;

190 
ÁûedAs£πLessTh™EquÆs
–c⁄° *
fûe
, 
löe
,

191 c⁄° *
xSå
, c⁄° *
ySå
,

192 c⁄° *
x
, c⁄° *
y
 )

194 
°›
–
fûe
, 
löe
 ) << "Error: Expected (" <<

195 
	gxSå
 << " <" << 
	gySå
 << "), found (" <<

196 
	gx
 << " > " << 
	gy
 << ")" << 
	gídl
;

199 
ÁûedAs£πRñ©i⁄
–c⁄° *
fûe
, 
löe
,

200 c⁄° *
ªœti⁄
, c⁄° *
xSå
, c⁄° *
ySå
,

201 c⁄° *
x
, c⁄° *
y
 )

203 
°›
–
fûe
, 
löe
 ) << "Eº‹: Ex≥˘ed " << 
	gªœti⁄
 << "( " <<

204 
	gxSå
 << ", " << 
	gySå
 << " ), found !" << 
	gªœti⁄
 << "–" << 
	gx
 << ", " << 
	gy
 << " )" << 
	gídl
;

207 
ÁûedAs£πPªdiˇã
–c⁄° *
fûe
, 
löe
,

208 c⁄° *
¥ediˇã
, c⁄° *
xSå
, c⁄° *
x
 )

210 
°›
–
fûe
, 
löe
 ) << "Eº‹: Ex≥˘ed " << 
	g¥ediˇã
 << "( " <<

211 
	gxSå
 << " ), found !" << 
	g¥ediˇã
 << "–" << 
	gx
 << " )" << 
	gídl
;

214 
ÁûedAs£πThrows
–c⁄° *
fûe
, 
löe
,

215 c⁄° *
ex¥essi⁄
, c⁄° *
ty≥
,

216 
boﬁ
 
ŸhîThrown
 )

218 
°›
–
fûe
, 
löe
 ) << "Eº‹: Ex≥˘ed (" << 
	gex¥essi⁄
 << ")ÅoÅhrow (" <<

219 
	gty≥
 << "Ëbuàô " << (
	gŸhîThrown
 ? "threw somethingÉlse" : "didn'tÅhrow") <<

220 
ídl
;

223 
ÁûedAs£πThrowsNŸ
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

225 
°›
–
fûe
, 
löe
 ) << "Eº‹: Ex≥˘ed (" << 
	gex¥essi⁄
 << ")ÇotÅoÅhrow, but it did" <<

226 
	gídl
;

229 
	g¥Ÿe˘ed
:

230 
OuçutSåóm
 *
ouçutSåóm
() const

232  
_o
;

235 
	g¥iv©e
:

236 
Eº‹F‹m©ãr
( const ErrorFormatter & );

237 
	gEº‹F‹m©ãr
 &
	g›î©‹
=–c⁄° 
Eº‹F‹m©ãr
 & );

239 
	gOuçutSåóm
 &
°›
–c⁄° *
fûe
, 
löe
 )

241 
√wLöe
();

242 
ªp‹tTe°
();

243  (*
	g_o
Ë<< 
	gfûe
 << 
	g_¥eLöe
 << 
	glöe
 << 
	g_po°Löe
 << ": ";

246 
√wLöe
( )

248 i‡–
	g_dŸtög
 ) {

249 (*
	g_o
Ë<< 
	gídl
;

250 
	g_dŸtög
 = 
Ál£
;

254 
ªp‹tTe°
( )

256 if–
	g_ªp‹ãd
 )

258 (*
	g_o
Ë<< "I¿" << 
åackî
().
suôe
().
suôeName
(Ë<< "::" <<Åøckî().
ã°
().
ã°Name
(Ë<< ":" << 
	gídl
;

259 
	g_ªp‹ãd
 = 
åue
;

262 
dump
–c⁄° *
buf„r
, 
size
 )

264 i‡–!
	gbuf„r
 )

265 
dumpNuŒ
();

267 
dumpBuf„r
–
buf„r
, 
size
 );

270 
dumpNuŒ
()

272 (*
	g_o
Ë<< " (nuŒ)" << 
	gídl
;

275 
dumpBuf„r
–c⁄° *
buf„r
, 
size
 )

277 
	gdumpSize
 = 
size
;

278 i‡–
maxDumpSize
(Ë&& 
	gdumpSize
 > maxDumpSize() )

279 
	gdumpSize
 = 
maxDumpSize
();

281 c⁄° *
	gp
 = (c⁄° *)
buf„r
;

282 (*
	g_o
) << " { ";

283  
	gi
 = 0; i < 
	gdumpSize
; ++ i )

284 (*
	g_o
Ë<< 
byãToHex
–*
p
++ ) << " ";

285 i‡–
	gdumpSize
 < 
	gsize
 )

286 (*
	g_o
) << "... ";

287 (*
	g_o
Ë<< "}" << 
	gídl
;

290 
ídl
–
OuçutSåóm
 &
o
 )

292 
	gOuçutSåóm
::
ídl
–
o
 );

295 
boﬁ
 
	g_dŸtög
;

296 
boﬁ
 
	g_ªp‹ãd
;

297 
OuçutSåóm
 *
	g_o
;

298 c⁄° *
	g_¥eLöe
;

299 c⁄° *
	g_po°Löe
;

	@tools/cxxtest/cxxtest/ErrorPrinter.h

12 #i‚de‡
__cxxã°__Eº‹Pröãr_h__


13 
	#__cxxã°__Eº‹Pröãr_h__


	)

22 
	~<cxxã°/Fœgs.h
>

24 #i‚de‡
_CXXTEST_HAVE_STD


25 
	#_CXXTEST_HAVE_STD


	)

28 
	~<cxxã°/Eº‹F‹m©ãr.h
>

29 
	~<cxxã°/StdVÆueTøôs.h
>

31 #ifde‡
_CXXTEST_OLD_STD


32 
	~<io°ªam.h
>

34 
	~<io°ªam
>

37 
«me•a˚
 
	gCxxTe°


39 ˛as†
	cEº‹Pröãr
 : 
public
 
Eº‹F‹m©ãr


41 
public
:

42 
Eº‹Pröãr
–
CXXTEST_STD
(
o°ªam
Ë&
o
 = CXXTEST_STD(
cout
), c⁄° *
¥eLöe
 = ":", c⁄° *
po°Löe
 = "" ) :

43 
Eº‹F‹m©ãr
–
√w
 
Ad≠ãr
(
o
), 
¥eLöe
, 
po°Löe
 ) {}

44 
	gvútuÆ
 ~
Eº‹Pröãr
(Ë{ 
dñëe
 
ouçutSåóm
(); }

46 
	g¥iv©e
:

47 ˛as†
	cAd≠ãr
 : 
public
 
OuçutSåóm


49 
CXXTEST_STD
(
o°ªam
Ë&
_o
;

50 
	gpublic
:

51 
Ad≠ãr
–
CXXTEST_STD
(
o°ªam
Ë&
o
 ) : 
_o
(o) {}

52 
Êush
(Ë{ 
_o
.flush(); }

53 
	gOuçutSåóm
 &
	g›î©‹
<<–c⁄° *
	gs
 ) { 
	g_o
 << s;  *
	gthis
; }

54 
	gOuçutSåóm
 &
	g›î©‹
<<–
M™ùuœt‹
 
	gm
 ) {  OuçutSåóm::
›î©‹
<<–
m
 ); }

55 
	gOuçutSåóm
 &
	g›î©‹
<<–
	gi
 )

57 
	gs
[1 + 3 * ()];

58 
numbîToSåög
–
i
, 
s
 );

59 
	g_o
 << 
	gs
;

60  *
	gthis
;

	@tools/cxxtest/cxxtest/Flags.h

12 #i‚de‡
__cxxã°__Fœgs_h__


13 
	#__cxxã°__Fœgs_h__


	)

19 #i‡!
deföed
(
CXXTEST_FLAGS
)

20 
	#CXXTEST_FLAGS


	)

23 #i‡
deföed
(
CXXTEST_HAVE_EH
Ë&& !deföed(
_CXXTEST_HAVE_EH
)

24 
	#_CXXTEST_HAVE_EH


	)

27 #i‡
deföed
(
CXXTEST_HAVE_STD
Ë&& !deföed(
_CXXTEST_HAVE_STD
)

28 
	#_CXXTEST_HAVE_STD


	)

31 #i‡
deföed
(
CXXTEST_OLD_TEMPLATE_SYNTAX
Ë&& !deföed(
_CXXTEST_OLD_TEMPLATE_SYNTAX
)

32 
	#_CXXTEST_OLD_TEMPLATE_SYNTAX


	)

35 #i‡
deföed
(
CXXTEST_OLD_STD
Ë&& !deföed(
_CXXTEST_OLD_STD
)

36 
	#_CXXTEST_OLD_STD


	)

39 #i‡
deföed
(
CXXTEST_ABORT_TEST_ON_FAIL
Ë&& !deföed(
_CXXTEST_ABORT_TEST_ON_FAIL
)

40 
	#_CXXTEST_ABORT_TEST_ON_FAIL


	)

43 #i‡
deföed
(
CXXTEST_NO_COPY_CONST
Ë&& !deföed(
_CXXTEST_NO_COPY_CONST
)

44 
	#_CXXTEST_NO_COPY_CONST


	)

47 #i‡
deföed
(
CXXTEST_FACTOR
Ë&& !deföed(
_CXXTEST_FACTOR
)

48 
	#_CXXTEST_FACTOR


	)

51 #i‡
deföed
(
CXXTEST_PARTIAL_TEMPLATE_SPECIALIZATION
Ë&& !deföed(
_CXXTEST_PARTIAL_TEMPLATE_SPECIALIZATION
)

52 
	#_CXXTEST_PARTIAL_TEMPLATE_SPECIALIZATION


	)

55 #i‡
deföed
(
CXXTEST_LONGLONG
)

56 #i‡
deföed
(
_CXXTEST_LONGLONG
)

57 #unde‡
_CXXTEST_LONGLONG


59 
	#_CXXTEST_LONGLONG
 
CXXTEST_LONGLONG


	)

62 #i‚de‡
CXXTEST_MAX_DUMP_SIZE


63 
	#CXXTEST_MAX_DUMP_SIZE
 0

	)

66 #i‡
deföed
(
_CXXTEST_ABORT_TEST_ON_FAIL
Ë&& !deföed(
CXXTEST_DEFAULT_ABORT
)

67 
	#CXXTEST_DEFAULT_ABORT
 
åue


	)

70 #i‡!
deföed
(
CXXTEST_DEFAULT_ABORT
)

71 
	#CXXTEST_DEFAULT_ABORT
 
Ál£


	)

74 #i‡
deföed
(
_CXXTEST_ABORT_TEST_ON_FAIL
Ë&& !deföed(
_CXXTEST_HAVE_EH
)

76 #unde‡
_CXXTEST_ABORT_TEST_ON_FAIL


83 #ifde‡
__BORLANDC__


84 #i‡
__BORLANDC__
 <= 0x520

85 #i‚de‡
_CXXTEST_OLD_STD


86 
	#_CXXTEST_OLD_STD


	)

88 #i‚de‡
_CXXTEST_OLD_TEMPLATE_SYNTAX


89 
	#_CXXTEST_OLD_TEMPLATE_SYNTAX


	)

92 #i‡
__BORLANDC__
 >= 0x540

93 #i‚de‡
_CXXTEST_NO_COPY_CONST


94 
	#_CXXTEST_NO_COPY_CONST


	)

96 #i‚de‡
_CXXTEST_LONGLONG


97 
	#_CXXTEST_LONGLONG
 
__öt64


	)

102 #ifde‡
_MSC_VER


103 #i‚de‡
_CXXTEST_LONGLONG


104 
	#_CXXTEST_LONGLONG
 
__öt64


	)

106 #i‡(
_MSC_VER
 >= 0x51E)

107 #i‚de‡
_CXXTEST_PARTIAL_TEMPLATE_SPECIALIZATION


108 
	#_CXXTEST_PARTIAL_TEMPLATE_SPECIALIZATION


	)

111 #¥agm®
w¨nög
–
dißbÀ
 : 4127 )

112 #¥agm®
w¨nög
–
dißbÀ
 : 4290 )

113 #¥agm®
w¨nög
–
dißbÀ
 : 4511 )

114 #¥agm®
w¨nög
–
dißbÀ
 : 4512 )

115 #¥agm®
w¨nög
–
dißbÀ
 : 4514 )

118 #ifde‡
__GNUC__


119 #i‡(
__GNUC__
 > 2Ë|| (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 9)

120 #i‚de‡
_CXXTEST_PARTIAL_TEMPLATE_SPECIALIZATION


121 
	#_CXXTEST_PARTIAL_TEMPLATE_SPECIALIZATION


	)

124 #i‡
deföed
(
__LONG_LONG_MAX__
Ë&& !deföed(
__˝lu•lus
)

125 
	#_CXXTEST_LONGLONG
 

	)

129 #ifde‡
__DMC__


130 #i‚de‡
_CXXTEST_OLD_STD


131 
	#_CXXTEST_OLD_STD


	)

135 #ifde‡
__SUNPRO_CC


136 #i‡
__SUNPRO_CC
 >= 0x510

137 #i‚de‡
_CXXTEST_PARTIAL_TEMPLATE_SPECIALIZATION


138 
	#_CXXTEST_PARTIAL_TEMPLATE_SPECIALIZATION


	)

143 #ifde‡
__xlC__


146 #i‡
__xlC__
 >= 0x0700

147 #i‚de‡
_CXXTEST_PARTIAL_TEMPLATE_SPECIALIZATION


148 
	#_CXXTEST_PARTIAL_TEMPLATE_SPECIALIZATION


	)

	@tools/cxxtest/cxxtest/GlobalFixture.cpp

12 #i‚de‡
__cxxã°__GlobÆFixtuª_˝p__


13 
	#__cxxã°__GlobÆFixtuª_˝p__


	)

15 
	~<cxxã°/GlobÆFixtuª.h
>

17 
«me•a˚
 
	gCxxTe°


19 
boﬁ
 
	gGlobÆFixtuª
::
£tUpW‹ld
(Ë{  
åue
; }

20 
boﬁ
 
	gGlobÆFixtuª
::
ã¨DownW‹ld
(Ë{  
åue
; }

21 
boﬁ
 
	gGlobÆFixtuª
::
£tUp
(Ë{  
åue
; }

22 
boﬁ
 
	gGlobÆFixtuª
::
ã¨Down
(Ë{  
åue
; }

24 
	gGlobÆFixtuª
::
GlobÆFixtuª
(Ë{ 
©èch
–
_li°
 ); }

25 
	gGlobÆFixtuª
::~
GlobÆFixtuª
(Ë{ 
dëach
–
_li°
 ); }

27 
GlobÆFixtuª
 *
	gGlobÆFixtuª
::
fú°GlobÆFixtuª
(Ë{  (GlobÆFixtuª *)
_li°
.
hód
(); }

28 
GlobÆFixtuª
 *
	gGlobÆFixtuª
::
œ°GlobÆFixtuª
(Ë{  (GlobÆFixtuª *)
_li°
.
èû
(); }

29 
GlobÆFixtuª
 *
	gGlobÆFixtuª
::
√xtGlobÆFixtuª
(Ë{  (GlobÆFixtuª *)
√xt
(); }

30 
GlobÆFixtuª
 *
	gGlobÆFixtuª
::
¥evGlobÆFixtuª
(Ë{  (GlobÆFixtuª *)
¥ev
(); }

	@tools/cxxtest/cxxtest/GlobalFixture.h

12 #i‚de‡
__cxxã°__GlobÆFixtuª_h__


13 
	#__cxxã°__GlobÆFixtuª_h__


	)

15 
	~<cxxã°/LökedLi°.h
>

17 
«me•a˚
 
	gCxxTe°


19 ˛as†
	cGlobÆFixtuª
 : 
public
 
Lök


21 
public
:

22 
vútuÆ
 
boﬁ
 
£tUpW‹ld
();

23 
vútuÆ
 
boﬁ
 
ã¨DownW‹ld
();

24 
vútuÆ
 
boﬁ
 
£tUp
();

25 
vútuÆ
 
boﬁ
 
ã¨Down
();

27 
GlobÆFixtuª
();

28 ~
GlobÆFixtuª
();

30 
GlobÆFixtuª
 *
fú°GlobÆFixtuª
();

31 
GlobÆFixtuª
 *
œ°GlobÆFixtuª
();

32 
GlobÆFixtuª
 *
√xtGlobÆFixtuª
();

33 
GlobÆFixtuª
 *
¥evGlobÆFixtuª
();

35 
	g¥iv©e
:

36 
Li°
 
_li°
;

	@tools/cxxtest/cxxtest/Gui.h

12 #i‚de‡
__CXXTEST__GUI_H


13 
	#__CXXTEST__GUI_H


	)

20 
	~<cxxã°/TìLi°íî.h
>

22 
«me•a˚
 
	gCxxTe°


24 ˛as†
	cGuiLi°íî
 : 
public
 
Te°Li°íî


26 
public
:

27 
GuiLi°íî
(Ë: 
_°©e
–
GREEN_BAR
 ) {}

28 
vútuÆ
 ~
GuiLi°íî
() {}

30 
vútuÆ
 
runGui
–&
¨gc
, **
¨gv
, 
Te°Li°íî
 &
li°íî
 )

32 
íãrGui
–
¨gc
, 
¨gv
 );

33 
	gTe°Ru¬î
::
runAŒTe°s
–
li°íî
 );

34 
ÀaveGui
();

37 
vútuÆ
 
íãrGui
( & , ** ) {}

38 
vútuÆ
 
ÀaveGui
() {}

43 
vútuÆ
 
guiE¡îW‹ld
( ) {}

44 
vútuÆ
 
guiE¡îSuôe
( const * ) {}

45 
vútuÆ
 
guiE¡îTe°
( const * , const * ) {}

46 
vútuÆ
 
yñlowB¨
() {}

47 
vútuÆ
 
ªdB¨
() {}

52 
íãrW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 &
d
 ) { 
guiE¡îW‹ld
–d.
numTŸÆTe°s
() ); }

53 
íãrSuôe
–c⁄° 
SuôeDes¸ùti⁄
 &
d
 ) { 
guiE¡îSuôe
–d.
suôeName
() ); }

54 
íãrTe°
–c⁄° 
Te°Des¸ùti⁄
 &
d
 ) { 
guiE¡îTe°
–d.
suôeName
(), d.
ã°Name
() ); }

55 
ÀaveTe°
–c⁄° 
Te°Des¸ùti⁄
 & ) {}

56 
ÀaveSuôe
–c⁄° 
SuôeDes¸ùti⁄
 & ) {}

57 
ÀaveW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 & ) {}

59 
w¨nög
( const * , , const * )

61 
yñlowB¨Sa„
();

64 
ÁûedTe°
( const * , , const * )

66 
ªdB¨Sa„
();

69 
ÁûedAs£π
( const * , , const * )

71 
ªdB¨Sa„
();

74 
ÁûedAs£πEquÆs
( const * , ,

78 
ªdB¨Sa„
();

81 
ÁûedAs£πSameD©a
( const * , ,

86 
ªdB¨Sa„
();

89 
ÁûedAs£πDñè
( const * , ,

93 
ªdB¨Sa„
();

96 
ÁûedAs£πDif„rs
( const * , ,

100 
ªdB¨Sa„
();

103 
ÁûedAs£πLessTh™
( const * , ,

107 
ªdB¨Sa„
();

110 
ÁûedAs£πLessTh™EquÆs
( const * , ,

114 
ªdB¨Sa„
();

117 
ÁûedAs£πPªdiˇã
( const * , ,

120 
ªdB¨Sa„
();

123 
ÁûedAs£πRñ©i⁄
( const * , ,

127 
ªdB¨Sa„
();

130 
ÁûedAs£πThrows
( const * , ,

132 
boﬁ
 )

134 
ªdB¨Sa„
();

137 
ÁûedAs£πThrowsNŸ
( const * , ,

140 
ªdB¨Sa„
();

143 
	g¥Ÿe˘ed
:

144 
yñlowB¨Sa„
()

146 i‡–
_°©e
 < 
YELLOW_BAR
 ) {

147 
yñlowB¨
();

148 
	g_°©e
 = 
YELLOW_BAR
;

152 
ªdB¨Sa„
()

154 i‡–
	g_°©e
 < 
	gRED_BAR
 ) {

155 
ªdB¨
();

156 
	g_°©e
 = 
RED_BAR
;

160 
	g¥iv©e
:

161 íum { 
GREEN_BAR
, 
	gYELLOW_BAR
, 
	gRED_BAR
 } 
	g_°©e
;

164 
	gãm∂©e
<
˛ass
 
	gGuiT
, cœs†
	gTuiT
>

165 ˛as†
	cGuiTuiRu¬î
 : 
public
 
TìLi°íî


167 * 
_¨gc
;

168 **
	g_¨gv
;

169 
GuiT
 
	g_gui
;

170 
TuiT
 
	g_tui
;

172 
	gpublic
:

173 
GuiTuiRu¬î
(Ë: 
_¨gc
(0), 
_¨gv
(0) {}

175 
¥o˚ss_comm™dlöe
–& 
¨gc
, ** 
¨gv
 )

177 
	g_¨gc
=&
¨gc
;

178 
	g_¨gv
=
¨gv
;

179 
£tFú°
–
_gui
 );

180 
£tSec⁄d
–
_tui
 );

183 
run
()

185 
	g_gui
.
runGui
–*
_¨gc
, 
_¨gv
, *
this
 );

186  
åackî
().
ÁûedTe°s
();

	@tools/cxxtest/cxxtest/LinkedList.cpp

12 #i‚de‡
__cxxã°__LökedLi°_˝p__


13 
	#__cxxã°__LökedLi°_˝p__


	)

15 
	~<cxxã°/LökedLi°.h
>

17 
«me•a˚
 
	gCxxTe°


19 
Li°
 
	gGlobÆFixtuª
::
_li°
 = { 0, 0 };

20 
Li°
 
	gRólSuôeDes¸ùti⁄
::
_suôes
 = { 0, 0 };

22 
	gLi°
::
öôülize
()

24 
_hód
 = 
_èû
 = 0;

27 
Lök
 *
	gLi°
::
hód
()

29 
Lök
 *
l
 = 
_hód
;

30  
	gl
 && !l->
a˘ive
() )

31 
	gl
 = 
l
->
√xt
();

32  
	gl
;

35 c⁄° 
Lök
 *
	gLi°
::
hód
() const

37 
Lök
 *
l
 = 
_hód
;

38  
	gl
 && !l->
a˘ive
() )

39 
	gl
 = 
l
->
√xt
();

40  
	gl
;

43 
Lök
 *
	gLi°
::
èû
()

45 
Lök
 *
l
 = 
_èû
;

46  
	gl
 && !l->
a˘ive
() )

47 
	gl
 = 
l
->
¥ev
();

48  
	gl
;

51 c⁄° 
Lök
 *
	gLi°
::
èû
() const

53 
Lök
 *
l
 = 
_èû
;

54  
	gl
 && !l->
a˘ive
() )

55 
	gl
 = 
l
->
¥ev
();

56  
	gl
;

59 
boﬁ
 
	gLi°
::
em±y
() const

61  (
_hód
 == 0);

64 
	gLi°
::
size
() const

66 
cou¡
 = 0;

67  c⁄° 
Lök
 *
	gl
 = 
hód
();Ü !0;Ü = 
l
->
√xt
() )

68 ++ 
cou¡
;

69  
	gcou¡
;

72 
Lök
 *
	gLi°
::
¡h
–
n
 )

74 
Lök
 *
l
 = 
hód
();

75  
	gn
 -- )

76 
	gl
 = 
l
->
√xt
();

77  
	gl
;

80 
	gLi°
::
a˘iv©eAŒ
()

82  
Lök
 *
l
 = 
_hód
; 
	gl
 !0;Ü =Ü->
ju°Next
() )

83 
l
->
£tA˘ive
–
åue
 );

86 
	gLi°
::
ÀaveO∆y
–c⁄° 
Lök
 &
lök
 )

88  
Lök
 *
l
 = 
hód
(); 
	gl
 !0;Ü =Ü->
√xt
() )

89 i‡–
l
 !&
lök
 )

90 
l
->
£tA˘ive
–
Ál£
 );

93 
	gLök
::
Lök
() :

94 
_√xt
( 0 ),

95 
_¥ev
( 0 ),

96 
_a˘ive
–
åue
 )

100 
	gLök
::~
Lök
()

104 
boﬁ
 
Lök
::
a˘ive
() const

106  
_a˘ive
;

109 
	gLök
::
£tA˘ive
–
boﬁ
 
vÆue
 )

111 
_a˘ive
 = 
vÆue
;

114 
Lök
 * 
	gLök
::
ju°Next
()

116  
_√xt
;

119 
Lök
 * 
	gLök
::
ju°Pªv
()

121  
_¥ev
;

124 
Lök
 * 
	gLök
::
√xt
()

126 
Lök
 *
l
 = 
_√xt
;

127  
	gl
 && !l->
	g_a˘ive
 )

128 
	gl
 = 
l
->
_√xt
;

129  
	gl
;

132 
Lök
 * 
	gLök
::
¥ev
()

134 
Lök
 *
l
 = 
_¥ev
;

135  
	gl
 && !l->
	g_a˘ive
 )

136 
	gl
 = 
l
->
_¥ev
;

137  
	gl
;

140 c⁄° 
Lök
 * 
	gLök
::
√xt
() const

142 
Lök
 *
l
 = 
_√xt
;

143  
	gl
 && !l->
	g_a˘ive
 )

144 
	gl
 = 
l
->
_√xt
;

145  
	gl
;

148 c⁄° 
Lök
 * 
	gLök
::
¥ev
() const

150 
Lök
 *
l
 = 
_¥ev
;

151  
	gl
 && !l->
	g_a˘ive
 )

152 
	gl
 = 
l
->
_¥ev
;

153  
	gl
;

156 
	gLök
::
©èch
–
Li°
 &
l
 )

158 i‡–
l
.
_èû
 )

159 
l
.
_èû
->
_√xt
 = 
this
;

161 
	g_¥ev
 = 
l
.
_èû
;

162 
	g_√xt
 = 0;

164 i‡–
	gl
.
	g_hód
 == 0 )

165 
l
.
_hód
 = 
this
;

166 
	gl
.
	g_èû
 = 
this
;

169 
	gLök
::
dëach
–
Li°
 &
l
 )

171 i‡–
_¥ev
 )

172 
_¥ev
->
_√xt
 = _next;

174 
	gl
.
	g_hód
 = 
_√xt
;

176 i‡–
	g_√xt
 )

177 
	g_√xt
->
	g_¥ev
 = 
_¥ev
;

179 
	gl
.
	g_èû
 = 
_¥ev
;

	@tools/cxxtest/cxxtest/LinkedList.h

12 #i‚de‡
__cxxã°__LökedLi°_h__


13 
	#__cxxã°__LökedLi°_h__


	)

15 
	~<cxxã°/Fœgs.h
>

17 
«me•a˚
 
	gCxxTe°


19 
	gLi°
;

20 
˛ass
 
	gLök
;

22 
	sLi°


24 
Lök
 *
	g_hód
;

25 
Lök
 *
	g_èû
;

27 
öôülize
();

29 
Lök
 *
hód
();

30 c⁄° 
Lök
 *
hód
() const;

31 
Lök
 *
èû
();

32 c⁄° 
Lök
 *
èû
() const;

34 
boﬁ
 
em±y
() const;

35 
size
() const;

36 
Lök
 *
¡h
–
n
 );

38 
a˘iv©eAŒ
();

39 
ÀaveO∆y
–c⁄° 
Lök
 &
lök
 );

42 ˛as†
	cLök


44 
	gpublic
:

45 
Lök
();

46 
	gvútuÆ
 ~
Lök
();

48 
boﬁ
 
a˘ive
() const;

49 
£tA˘ive
–
boﬁ
 
vÆue
 = 
åue
 );

51 
Lök
 *
ju°Next
();

52 
Lök
 *
ju°Pªv
();

54 
Lök
 *
√xt
();

55 
Lök
 *
¥ev
();

56 c⁄° 
Lök
 *
√xt
() const;

57 c⁄° 
Lök
 *
¥ev
() const;

59 
©èch
–
Li°
 &
l
 );

60 
dëach
–
Li°
 &
l
 );

62 
	g¥iv©e
:

63 
Lök
 *
_√xt
;

64 
Lök
 *
	g_¥ev
;

65 
boﬁ
 
	g_a˘ive
;

67 
Lök
( const Link & );

68 
	gLök
 &
	g›î©‹
=–c⁄° 
Lök
 & );

	@tools/cxxtest/cxxtest/Mock.h

12 #i‚de‡
__cxxã°__Mock_h__


13 
	#__cxxã°__Mock_h__


	)

15 
«me•a˚
 
	gdummy_mock_ns
 {}

20 #i‚de‡
CXXTEST_MOCK_NAMESPACE


21 
	#CXXTEST_MOCK_NAMESPACE
 
T


	)

27 
	#__CXXTEST_MOCK__TRAITS
 \

28 
«me•a˚
 
CXXTEST_MOCK_NAMESPACE
 \

30 
ãm∂©e
<
˛ass
 
T
> \

31 
˛ass
 
MockTøôs
 \

33 
public
: \

34 
T
 
	`deÁu…VÆue
() {  0; } \

36 }

	)

41 #ifde‡
__˝lu•lus


42 
	#CXXTEST_EXTERN_C
 "C"

	)

44 
	#CXXTEST_EXTERN_C


	)

50 
	#__CXXTEST_MOCK__PROTOTYPE
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

51 
«me•a˚
 
CXXTEST_MOCK_NAMESPACE
 { 
TYPE
 
NAME
 
ARGS
; }

	)

53 
	#__CXXTEST_MOCK_VOID__PROTOTYPE
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

54 
	`__CXXTEST_MOCK__PROTOTYPE
–
MOCK
, , 
NAME
, 
ARGS
, 
REAL
, 
CALL
 )

	)

56 
	#__CXXTEST_SUPPLY__PROTOTYPE
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

57 
TYPE
 
REAL
 
ARGS
;

	)

59 
	#__CXXTEST_SUPPLY_VOID__PROTOTYPE
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

60 
	`__CXXTEST_SUPPLY__PROTOTYPE
–
MOCK
, , 
NAME
, 
ARGS
, 
REAL
, 
CALL
 )

	)

65 
	#__CXXTEST_MOCK__CLASS_DECLARATION
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

66 
«me•a˚
 
CXXTEST_MOCK_NAMESPACE
 { \

67 
˛ass
 
Ba£_
##
MOCK
 : 
public
 
CxxTe°
::
Lök
 \

69 
public
: \

70 
Ba£_
##
	`MOCK
(); \

71 ~
Ba£_
##
	`MOCK
(); \

72 
boﬁ
 
	`£tUp
(); \

73 
boﬁ
 
	`ã¨Down
(); \

75 
Ba£_
##
MOCK
 &
	`cuºít
(); \

77 
vútuÆ
 
TYPE
 
NAME
 
ARGS
 = 0; \

79 
¥iv©e
: \

80 
CxxTe°
::
Li°
 
_li°
; \

83 
˛ass
 
Ról_
##
MOCK
 : 
public
 
Ba£_
##MOCK \

85 
public
: \

86 
TYPE
 
NAME
 
ARGS
; \

89 
˛ass
 
_Unim∂emíãd_
##
MOCK
 : 
public
 
Ba£_
##MOCK \

91 
public
: \

92 
TYPE
 
NAME
 
ARGS
; \

94 }

	)

96 
	#__CXXTEST_MOCK_VOID__CLASS_DECLARATION
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

97 
	`__CXXTEST_MOCK__CLASS_DECLARATION
–
MOCK
, , 
NAME
, 
ARGS
, 
REAL
, 
CALL
 )

	)

99 
	#__CXXTEST_SUPPLY__CLASS_DECLARATION
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

100 
«me•a˚
 
CXXTEST_MOCK_NAMESPACE
 { \

101 
˛ass
 
Ba£_
##
MOCK
 : 
public
 
CxxTe°
::
Lök
 \

103 
public
: \

104 
Ba£_
##
	`MOCK
(); \

105 ~
Ba£_
##
	`MOCK
(); \

106 
boﬁ
 
	`£tUp
(); \

107 
boﬁ
 
	`ã¨Down
(); \

109 
Ba£_
##
MOCK
 &
	`cuºít
(); \

111 
vútuÆ
 
TYPE
 
NAME
 
ARGS
 = 0; \

113 
¥iv©e
: \

114 
CxxTe°
::
Li°
 
_li°
; \

117 
˛ass
 
_Unim∂emíãd_
##
MOCK
 : 
public
 
Ba£_
##MOCK \

119 
public
: \

120 
TYPE
 
NAME
 
ARGS
; \

122 }

	)

124 
	#__CXXTEST_SUPPLY_VOID__CLASS_DECLARATION
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

125 
	`__CXXTEST_SUPPLY__CLASS_DECLARATION
–
MOCK
, , 
NAME
, 
ARGS
, 
REAL
, 
CALL
 )

	)

130 
	#__CXXTEST_MOCK__COMMON_CLASS_IMPLEMENTATION
–
MOCK
, 
NAME
 ) \

131 
«me•a˚
 
CXXTEST_MOCK_NAMESPACE
 { \

133 
CxxTe°
::
Li°
 
Ba£_
##
MOCK
::
_li°
 = { 0, 0 }; \

135 
Ba£_
##
MOCK
::Ba£_##
	`MOCK
(Ë{ 
	`©èch
–
_li°
 ); } \

136 
Ba£_
##
MOCK
::~Ba£_##
	`MOCK
(Ë{ 
	`dëach
–
_li°
 ); } \

137 
boﬁ
 
Ba£_
##
MOCK
::
	`£tUp
(Ë{  
åue
; } \

138 
boﬁ
 
Ba£_
##
MOCK
::
	`ã¨Down
(Ë{  
åue
; } \

140 
Ba£_
##
MOCK
 &Ba£_##MOCK::
	`cuºít
() \

142 i‡–
_li°
.
	`em±y
() ) \

143 
_Unim∂emíãd_
##
MOCK
 
unim∂emíãd
; \

144  *(
Ba£_
##
MOCK
 *)
_li°
.
	`èû
(); \

146 }

	)

148 
	#__CXXTEST_MOCK__CLASS_IMPLEMENTATION
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

149 
	`__CXXTEST_MOCK__COMMON_CLASS_IMPLEMENTATION
–
MOCK
, 
NAME
 ) \

150 
«me•a˚
 
CXXTEST_MOCK_NAMESPACE
 { \

151 
TYPE
 
Ról_
##
MOCK
::
NAME
 
ARGS
 \

153  
REAL
 
CALL
; \

156 
TYPE
 
_Unim∂emíãd_
##
MOCK
::
NAME
 
ARGS
 \

158  
Ál£
 ) \

159  
NAME
 
CALL
; \

160 
	`__CXXTEST_MOCK_UNIMPLEMENTED
–
NAME
, 
ARGS
 ); \

161  
MockTøôs
<
TYPE
>::
	`deÁu…VÆue
(); \

164 
TYPE
 
NAME
 
ARGS
 \

166  
Ba£_
##
MOCK
::
	`cuºít
().
NAME
 
CALL
; \

168 }

	)

170 
	#__CXXTEST_MOCK_VOID__CLASS_IMPLEMENTATION
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

171 
	`__CXXTEST_MOCK__COMMON_CLASS_IMPLEMENTATION
–
MOCK
, 
NAME
 ) \

172 
«me•a˚
 
CXXTEST_MOCK_NAMESPACE
 { \

173 
Ról_
##
MOCK
::
NAME
 
ARGS
 \

175 
REAL
 
CALL
; \

178 
_Unim∂emíãd_
##
MOCK
::
NAME
 
ARGS
 \

180  
Ál£
 ) \

181 
NAME
 
CALL
; \

182 
	`__CXXTEST_MOCK_UNIMPLEMENTED
–
NAME
, 
ARGS
 ); \

185 
NAME
 
ARGS
 \

187 
Ba£_
##
MOCK
::
	`cuºít
().
NAME
 
CALL
; \

189 }

	)

191 
	#__CXXTEST_SUPPLY__CLASS_IMPLEMENTATION
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

192 
	`__CXXTEST_MOCK__COMMON_CLASS_IMPLEMENTATION
–
MOCK
, 
NAME
 ) \

193 
«me•a˚
 
CXXTEST_MOCK_NAMESPACE
 { \

194 
TYPE
 
_Unim∂emíãd_
##
MOCK
::
NAME
 
ARGS
 \

196  
Ál£
 ) \

197  
NAME
 
CALL
; \

198 
	`__CXXTEST_MOCK_UNIMPLEMENTED
–
NAME
, 
ARGS
 ); \

199  
MockTøôs
<
TYPE
>::
	`deÁu…VÆue
(); \

203 
TYPE
 
REAL
 
ARGS
 \

205  
CXXTEST_MOCK_NAMESPACE
::
Ba£_
##
MOCK
::
	`cuºít
().
NAME
 
CALL
; \

206 }

	)

208 
	#__CXXTEST_SUPPLY_VOID__CLASS_IMPLEMENTATION
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

209 
	`__CXXTEST_MOCK__COMMON_CLASS_IMPLEMENTATION
–
MOCK
, 
NAME
 ) \

210 
«me•a˚
 
CXXTEST_MOCK_NAMESPACE
 { \

211 
_Unim∂emíãd_
##
MOCK
::
NAME
 
ARGS
 \

213  
Ál£
 ) \

214 
NAME
 
CALL
; \

215 
	`__CXXTEST_MOCK_UNIMPLEMENTED
–
NAME
, 
ARGS
 ); \

219 
REAL
 
ARGS
 \

221 
CXXTEST_MOCK_NAMESPACE
::
Ba£_
##
MOCK
::
	`cuºít
().
NAME
 
CALL
; \

223 

	)

227 
	#__CXXTEST_MOCK_UNIMPLEMENTED
–
NAME
, 
ARGS
 ) \

228 
	`TS_FAIL
–
CXXTEST_MOCK_NAMESPACE_STR
 #NAME #ARGS " called withÇo " \

229 
CXXTEST_MOCK_NAMESPACE_STR
 "Base_" #NAME " object" ); \

230 

	)

231 
	#CXXTEST_MOCK_NAMESPACE_STR
 
	`__CXXTEST_STR
(
CXXTEST_MOCK_NAMESPACE
Ë"::"

	)

232 
	#__CXXTEST_STR
(
X
Ë
	`__CXXTEST_XSTR
(X)

	)

233 
	#__CXXTEST_XSTR
(
X
Ë#X

	)

235 #i‡
deföed
(
CXXTEST_MOCK_TEST_SOURCE_FILE
)

239 
	~<cxxã°/Te°Suôe.h
>

241 
	g__CXXTEST_MOCK__TRAITS


243 
	#CXXTEST_MOCK
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

244 
	`__CXXTEST_MOCK__PROTOTYPE
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

245 
	`__CXXTEST_MOCK__CLASS_DECLARATION
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

246 
	`__CXXTEST_MOCK__CLASS_IMPLEMENTATION
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

247 
usög
 
«me•a˚
 
dummy_mock_ns


	)

249 
	#CXXTEST_MOCK_VOID
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

250 
	`__CXXTEST_MOCK_VOID__PROTOTYPE
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

251 
	`__CXXTEST_MOCK_VOID__CLASS_DECLARATION
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

252 
	`__CXXTEST_MOCK_VOID__CLASS_IMPLEMENTATION
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

253 
usög
 
«me•a˚
 
dummy_mock_ns


	)

255 
	#CXXTEST_SUPPLY
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

256 
	`__CXXTEST_SUPPLY__PROTOTYPE
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

257 
	`__CXXTEST_SUPPLY__CLASS_DECLARATION
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

258 
	`__CXXTEST_SUPPLY__CLASS_IMPLEMENTATION
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

259 
usög
 
«me•a˚
 
dummy_mock_ns


	)

261 
	#CXXTEST_SUPPLY_VOID
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

262 
	`__CXXTEST_SUPPLY_VOID__PROTOTYPE
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

263 
	`__CXXTEST_SUPPLY_VOID__CLASS_DECLARATION
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

264 
	`__CXXTEST_SUPPLY_VOID__CLASS_IMPLEMENTATION
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

265 
usög
 
«me•a˚
 
dummy_mock_ns


	)

267 #ñi‡
deföed
(
CXXTEST_FLAGS
Ë|| deföed(
CXXTEST_RUNNING
)

271 
	~<cxxã°/Te°Suôe.h
>

273 
	g__CXXTEST_MOCK__TRAITS
;

275 
	#CXXTEST_MOCK
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

276 
	`__CXXTEST_MOCK__PROTOTYPE
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

277 
	`__CXXTEST_MOCK__CLASS_DECLARATION
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

278 
usög
 
«me•a˚
 
dummy_mock_ns


	)

280 
	#CXXTEST_MOCK_VOID
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

281 
	`__CXXTEST_MOCK_VOID__PROTOTYPE
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

282 
	`__CXXTEST_MOCK_VOID__CLASS_DECLARATION
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

283 
usög
 
«me•a˚
 
dummy_mock_ns


	)

285 
	#CXXTEST_SUPPLY
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

286 
	`__CXXTEST_SUPPLY__PROTOTYPE
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

287 
	`__CXXTEST_SUPPLY__CLASS_DECLARATION
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

288 
usög
 
«me•a˚
 
dummy_mock_ns


	)

290 
	#CXXTEST_SUPPLY_VOID
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

291 
	`__CXXTEST_SUPPLY_VOID__PROTOTYPE
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

292 
	`__CXXTEST_SUPPLY_VOID__CLASS_DECLARATION
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

293 
usög
 
«me•a˚
 
dummy_mock_ns


	)

295 #ñi‡
deföed
(
CXXTEST_MOCK_REAL_SOURCE_FILE
)

299 
	#CXXTEST_MOCK
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

300 
«me•a˚
 
CXXTEST_MOCK_NAMESPACE
 { 
TYPE
 
NAME
 
ARGS
 {  
REAL
 
CALL
; } } 
usög
Çame•a˚ 
dummy_mock_ns


	)

302 
	#CXXTEST_MOCK_VOID
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

303 
«me•a˚
 
CXXTEST_MOCK_NAMESPACE
 { 
NAME
 
ARGS
 { 
REAL
 
CALL
; } } 
usög
Çame•a˚ 
dummy_mock_ns


	)

310 
	#CXXTEST_MOCK
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

311 
	`__CXXTEST_MOCK__PROTOTYPE
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

312 
usög
 
«me•a˚
 
dummy_mock_ns


	)

314 
	#CXXTEST_MOCK_VOID
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

315 
	`__CXXTEST_MOCK_VOID__PROTOTYPE
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

316 
usög
 
«me•a˚
 
dummy_mock_ns


	)

318 
	#CXXTEST_SUPPLY
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

319 
	`__CXXTEST_SUPPLY__PROTOTYPE
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

320 
usög
 
«me•a˚
 
dummy_mock_ns


	)

322 
	#CXXTEST_SUPPLY_VOID
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

323 
	`__CXXTEST_SUPPLY_VOID__PROTOTYPE
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

324 
usög
 
«me•a˚
 
dummy_mock_ns


	)

331 
	#CXXTEST_SUPPLY_C
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

332 
CXXTEST_EXTERN_C
 
	`__CXXTEST_SUPPLY__PROTOTYPE
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

333 
	`CXXTEST_SUPPLY
–
MOCK
, 
TYPE
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 )

	)

335 
	#CXXTEST_SUPPLY_VOID_C
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

336 
CXXTEST_EXTERN_C
 
	`__CXXTEST_SUPPLY_VOID__PROTOTYPE
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 ) \

337 
	`CXXTEST_SUPPLY_VOID
–
MOCK
, 
NAME
, 
ARGS
, 
REAL
, 
CALL
 )

	)

342 
	#CXXTEST_MOCK_GLOBAL
–
TYPE
, 
NAME
, 
ARGS
, 
CALL
 ) \

343 
	`CXXTEST_MOCK
–
NAME
, 
TYPE
, NAME, 
ARGS
, ::NAME, 
CALL
 )

	)

345 
	#CXXTEST_MOCK_VOID_GLOBAL
–
NAME
, 
ARGS
, 
CALL
 ) \

346 
	`CXXTEST_MOCK_VOID
–
NAME
, NAME, 
ARGS
, ::NAME, 
CALL
 )

	)

348 
	#CXXTEST_SUPPLY_GLOBAL
–
TYPE
, 
NAME
, 
ARGS
, 
CALL
 ) \

349 
	`CXXTEST_SUPPLY
–
NAME
, 
TYPE
, NAME, 
ARGS
, NAME, 
CALL
 )

	)

351 
	#CXXTEST_SUPPLY_VOID_GLOBAL
–
NAME
, 
ARGS
, 
CALL
 ) \

352 
	`CXXTEST_SUPPLY_VOID
–
NAME
, NAME, 
ARGS
, NAME, 
CALL
 )

	)

354 
	#CXXTEST_SUPPLY_GLOBAL_C
–
TYPE
, 
NAME
, 
ARGS
, 
CALL
 ) \

355 
	`CXXTEST_SUPPLY_C
–
NAME
, 
TYPE
, NAME, 
ARGS
, NAME, 
CALL
 )

	)

357 
	#CXXTEST_SUPPLY_VOID_GLOBAL_C
–
NAME
, 
ARGS
, 
CALL
 ) \

358 
	`CXXTEST_SUPPLY_VOID_C
–
NAME
, NAME, 
ARGS
, NAME, 
CALL
 )

	)

364 
	#CXXTEST_MOCK_DEFAULT_VALUE
–
TYPE
, 
VALUE
 ) \

365 
«me•a˚
 
CXXTEST_MOCK_NAMESPACE
 \

367 
ãm∂©e
<> \

368 
˛ass
 
MockTøôs
<
TYPE
> \

370 
public
: \

371 
TYPE
 
	`deÁu…VÆue
(Ë{  
VALUE
; } \

373 } 
usög
 
«me•a˚
 
dummy_mock_ns


	)

	@tools/cxxtest/cxxtest/ParenPrinter.h

12 #i‚de‡
__cxxã°__P¨íPröãr_h__


13 
	#__cxxã°__P¨íPröãr_h__


	)

21 
	~<cxxã°/Eº‹Pröãr.h
>

23 
«me•a˚
 
	gCxxTe°


25 ˛as†
	cP¨íPröãr
 : 
public
 
Eº‹Pröãr


27 
public
:

28 
P¨íPröãr
–
CXXTEST_STD
(
o°ªam
Ë&
o
 = CXXTEST_STD(
cout
ËË: 
Eº‹Pröãr
( o, "(", ")" ) {}

	@tools/cxxtest/cxxtest/QtGui.h

12 #i‚de‡
__cxxã°__QtGui_h__


13 
	#__cxxã°__QtGui_h__


	)

28 
	~<cxxã°/Gui.h
>

30 
	~<q≠∂iˇti⁄.h
>

31 
	~<qglobÆ.h
>

32 
	~<qœbñ.h
>

33 
	~<qœyout.h
>

34 
	~<qmesßgebox.h
>

35 
	~<qpixm≠.h
>

36 
	~<q¥ogªssb¨.h
>

37 
	~<q°©usb¨.h
>

39 
«me•a˚
 
	gCxxTe°


41 ˛as†
	cQtGui
 : 
public
 
GuiLi°íî


43 
public
:

44 
íãrGui
–&
¨gc
, **
¨gv
 )

46 
∑r£Comm™dLöe
–
¨gc
, 
¨gv
 );

47 
¸óãAµliˇti⁄
–
¨gc
, 
¨gv
 );

50 
íãrW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 &
wd
 )

52 
¸óãWödow
–
wd
 );

53 
¥o˚ssEvíts
();

56 
guiE¡îSuôe
–c⁄° *
suôeName
 )

58 
showSuôeName
–
suôeName
 );

61 
guiE¡îTe°
–c⁄° *
suôeName
, c⁄° *
ã°Name
 )

63 
£tC≠ti⁄
–
suôeName
, 
ã°Name
 );

64 
adv™˚ProgªssB¨
();

65 
showTe°Name
–
ã°Name
 );

66 
showTe°sD⁄e
–
_¥ogªssB¨
->
¥ogªss
() );

67 
¥o˚ssEvíts
();

70 
yñlowB¨
()

72 
£tCﬁ‹
( 255, 255, 0 );

73 
£tIc⁄
–
QMesßgeBox
::
W¨nög
 );

74 
gëTŸÆTe°s
();

75 
¥o˚ssEvíts
();

78 
ªdB¨
()

80 i‡–
	g_°¨tMöimized
 && 
	g_maöWödow
->
isMöimized
() )

81 
showN‹mÆ
();

82 
£tCﬁ‹
( 255, 0, 0 );

83 
£tIc⁄
–
QMesßgeBox
::
Crôiˇl
 );

84 
gëTŸÆTe°s
();

85 
¥o˚ssEvíts
();

88 
ÀaveGui
()

90 i‡–
kìp
() ) {

91 
showSumm¨y
();

92 
	g_≠∂iˇti⁄
->
exec
();

95 
	g_maöWödow
->
˛o£
–
åue
 );

98 
	g¥iv©e
:

99 
QSåög
 
_tôÀ
;

100 
boﬁ
 
	g_°¨tMöimized
, 
	g_kìp
;

101 
	g_numTŸÆTe°s
;

102 
QSåög
 
	g_°rTŸÆTe°s
;

103 
QAµliˇti⁄
 *
	g_≠∂iˇti⁄
;

104 
QWidgë
 *
	g_maöWödow
;

105 
QVBoxLayout
 *
	g_œyout
;

106 
QProgªssB¨
 *
	g_¥ogªssB¨
;

107 
QSètusB¨
 *
	g_°©usB¨
;

108 
QLabñ
 *
	g_suôeName
, *
	g_ã°Name
, *
	g_ã°sD⁄e
;

110 
∑r£Comm™dLöe
–
¨gc
, **
¨gv
 )

112 
	g_°¨tMöimized
 = 
_kìp
 = 
Ál£
;

113 
	g_tôÀ
 = 
¨gv
[0];

115  
	gi
 = 1; i < 
	g¨gc
; ++ i ) {

116 
QSåög
 
¨g
–
¨gv
[
i
] );

117 i‡–
	g¨g
 == "-minimized" )

118 
_°¨tMöimized
 = 
åue
;

119 i‡–
	g¨g
 == "-keep" )

120 
_kìp
 = 
åue
;

121 i‡–
	g¨g
 ="-tôÀ" && (
i
 + 1 < 
¨gc
) )

122 
_tôÀ
 = 
¨gv
[++
i
];

126 
¸óãAµliˇti⁄
–&
¨gc
, **
¨gv
 )

128 
	g_≠∂iˇti⁄
 = 
√w
 
QAµliˇti⁄
–
¨gc
, 
¨gv
 );

131 
¸óãWödow
–c⁄° 
W‹ldDes¸ùti⁄
 &
wd
 )

133 
gëTŸÆTe°s
–
wd
 );

134 
¸óãMaöWödow
();

135 
¸óãProgªssB¨
();

136 
¸óãSètusB¨
();

137 
£tMaöWidgë
();

138 i‡–
	g_°¨tMöimized
 )

139 
showMöimized
();

141 
showN‹mÆ
();

144 
gëTŸÆTe°s
()

146 
gëTŸÆTe°s
–
åackî
().
w‹ld
() );

149 
gëTŸÆTe°s
–c⁄° 
W‹ldDes¸ùti⁄
 &
wd
 )

151 
	g_numTŸÆTe°s
 = 
wd
.
numTŸÆTe°s
();

152 
	gs
[
W‹ldDes¸ùti⁄
::
MAX_STRLEN_TOTAL_TESTS
];

153 
	g_°rTŸÆTe°s
 = 
wd
.
°rTŸÆTe°s
–
s
 );

156 
¸óãMaöWödow
()

158 
	g_maöWödow
 = 
√w
 
QWidgë
();

159 
	g_œyout
 = 
√w
 
QVBoxLayout
–
_maöWödow
 );

162 
¸óãProgªssB¨
()

164 
	g_œyout
->
addWidgë
–
_¥ogªssB¨
 = 
√w
 
QProgªssB¨
–
_numTŸÆTe°s
, 
_maöWödow
 ) );

165 
	g_¥ogªssB¨
->
£tProgªss
( 0 );

166 
£tCﬁ‹
( 0, 255, 0 );

167 
£tIc⁄
–
QMesßgeBox
::
Inf‹m©i⁄
 );

170 
¸óãSètusB¨
()

172 
	g_œyout
->
addWidgë
–
_°©usB¨
 = 
√w
 
QSètusB¨
–
_maöWödow
 ) );

173 
	g_°©usB¨
->
addWidgë
–
_suôeName
 = 
√w
 
QLabñ
–
_°©usB¨
 ), 2 );

174 
	g_°©usB¨
->
addWidgë
–
_ã°Name
 = 
√w
 
QLabñ
–
_°©usB¨
 ), 4 );

175 
	g_°©usB¨
->
addWidgë
–
_ã°sD⁄e
 = 
√w
 
QLabñ
–
_°©usB¨
 ), 1 );

178 
£tMaöWidgë
()

180 
	g_≠∂iˇti⁄
->
£tMaöWidgë
–
_maöWödow
 );

183 
showMöimized
()

185 
	g_maöWödow
->
showMöimized
();

188 
showN‹mÆ
()

190 
	g_maöWödow
->
showN‹mÆ
();

191 
˚¡îWödow
();

194 
£tC≠ti⁄
–c⁄° 
QSåög
 &
suôeName
, c⁄° QSåög &
ã°Name
 )

196 
	g_maöWödow
->
£tC≠ti⁄
–
_tôÀ
 + " - " + 
suôeName
 + "::" + 
ã°Name
 + "()" );

199 
showSuôeName
–c⁄° 
QSåög
 &
suôeName
 )

201 
	g_suôeName
->
£tText
–"˛as†" + 
suôeName
 );

204 
adv™˚ProgªssB¨
()

206 
	g_¥ogªssB¨
->
£tProgªss
–
_¥ogªssB¨
->
¥ogªss
() + 1 );

209 
showTe°Name
–c⁄° 
QSåög
 &
ã°Name
 )

211 
	g_ã°Name
->
£tText
–
ã°Name
 + "()" );

214 
showTe°sD⁄e
–
ã°sD⁄e
 )

216 
	g_ã°sD⁄e
->
£tText
–
asSåög
–
ã°sD⁄e
 ) + " o‡" + 
_°rTŸÆTe°s
 );

219 
QSåög
 
asSåög
–
n
 )

221  
	gQSåög
::
numbî
–
n
 );

224 
£tCﬁ‹
–
r
, 
g
, 
b
 )

226 
QPÆëã
 
	g∑Àâe
 = 
_¥ogªssB¨
->
∑Àâe
();

227 
	g∑Àâe
.
£tCﬁ‹
–
QCﬁ‹Group
::
Highlight
, 
QCﬁ‹
–
r
, 
g
, 
b
 ) );

228 
	g_¥ogªssB¨
->
£tPÆëã
–
∑Àâe
 );

231 
£tIc⁄
–
QMesßgeBox
::
Ic⁄
 
ic⁄
 )

233 #i‡
QT_VERSION
 >= 0x030000

234 
_maöWödow
->
£tIc⁄
–
QMesßgeBox
::
°™d¨dIc⁄
–
ic⁄
 ) );

236 
	g_maöWödow
->
£tIc⁄
–
QMesßgeBox
::
°™d¨dIc⁄
–
ic⁄
, 
QAµliˇti⁄
::
°yÀ
().
guiStyÀ
() ) );

240 
¥o˚ssEvíts
()

242 
	g_≠∂iˇti⁄
->
¥o˚ssEvíts
();

245 
˚¡îWödow
()

247 
QWidgë
 *
	gdeskt›
 = 
QAµliˇti⁄
::
deskt›
();

248 
	gxCíãr
 = 
deskt›
->
x
(Ë+ (deskt›->
width
() / 2);

249 
	gyCíãr
 = 
deskt›
->
y
(Ë+ (deskt›->
height
() / 2);

251 
	gwödowWidth
 = (
deskt›
->
width
() * 4) / 5;

252 
	gwödowHeight
 = 
_maöWödow
->
height
();

253 
	g_maöWödow
->
£tGeomëry
–
xCíãr
 - (
wödowWidth
 / 2), 
yCíãr
 - (
wödowHeight
 / 2), windowWidth, windowHeight );

256 
boﬁ
 
kìp
()

258 i‡–!
	g_kìp
 )

259  
	gÁl£
;

260 i‡–!
	g_°¨tMöimized
 )

261  
	gåue
;

262  (
	g_maöWödow
 =
_≠∂iˇti⁄
->
a˘iveWödow
());

265 
showSumm¨y
()

267 
QSåög
 
	gsumm¨y
 = 
_°rTŸÆTe°s
 + (
_numTŸÆTe°s
 == 1 ? "Åest" : "Åests");

268 i‡–
åackî
().
ÁûedTe°s
() )

269 
	gsumm¨y
 = "Faûed " + 
asSåög
–
åackî
().
ÁûedTe°s
(ËË+ " o‡" + 
summ¨y
;

271 
	gsumm¨y
 = 
summ¨y
 + "Öassed";

273 
	g_maöWödow
->
£tC≠ti⁄
–
_tôÀ
 + " - " + 
summ¨y
 );

275 
	g_°©usB¨
->
ªmoveWidgë
–
_suôeName
 );

276 
	g_°©usB¨
->
ªmoveWidgë
–
_ã°Name
 );

277 
	g_ã°sD⁄e
->
£tText
–
summ¨y
 );

	@tools/cxxtest/cxxtest/RealDescriptions.cpp

12 #i‚de‡
__cxxã°__RólDes¸ùti⁄s_˝p__


13 
	#__cxxã°__RólDes¸ùti⁄s_˝p__


	)

20 
	~<cxxã°/RólDes¸ùti⁄s.h
>

22 
«me•a˚
 
	gCxxTe°


24 
	gRólTe°Des¸ùti⁄
::
RólTe°Des¸ùti⁄
()

28 
RólTe°Des¸ùti⁄
::RólTe°Des¸ùti⁄–
Li°
 &
¨gLi°
,

29 
SuôeDes¸ùti⁄
 &
¨gSuôe
,

30 
¨gLöe
,

31 c⁄° *
¨gTe°Name
 )

33 
öôülize
–
¨gLi°
, 
¨gSuôe
, 
¨gLöe
, 
¨gTe°Name
 );

36 
	gRólTe°Des¸ùti⁄
::
öôülize
–
Li°
 &
¨gLi°
,

37 
SuôeDes¸ùti⁄
 &
¨gSuôe
,

38 
¨gLöe
,

39 c⁄° *
¨gTe°Name
 )

41 
	g_suôe
 = &
¨gSuôe
;

42 
	g_löe
 = 
¨gLöe
;

43 
	g_ã°Name
 = 
¨gTe°Name
;

44 
©èch
–
¨gLi°
 );

47 
boﬁ
 
	gRólTe°Des¸ùti⁄
::
£tUp
()

49 i‡–!
suôe
() )

50  
Ál£
;

52  
GlobÆFixtuª
 *
	ggf
 = GlobÆFixtuª::
fú°GlobÆFixtuª
(); g‡!0; g‡
gf
->
√xtGlobÆFixtuª
() ) {

53 
boﬁ
 
ok
;

54 
	g_TS_TRY
 { 
	gok
 = 
gf
->
£tUp
(); }

55 
_TS_LAST_CATCH
–{ 
ok
 = 
Ál£
; } );

57 i‡–!
	gok
 ) {

58 
doFaûTe°
–
fûe
(), 
löe
(), "Error in GlobalFixture::setUp()" );

59  
	gÁl£
;

63 
	g_TS_TRY
 {

64 
boﬁ
 
	gok
 = 
Ál£
;

65 
_TSM_ASSERT_THROWS_NOTHING
–
fûe
(), 
löe
(), "Ex˚±i⁄Åhrow¿‰om sëUp()", 
suôe
()->
£tUp
(); 
ok
=
åue
 );

66 i‡(
	gok
 =
Ál£
Ë 
ok
;

68 
_TS_CATCH_ABORT
–{  
Ál£
; } );

70  
	gåue
;

73 
boﬁ
 
	gRólTe°Des¸ùti⁄
::
ã¨Down
()

75 i‡–!
suôe
() )

76  
Ál£
;

78 
	g_TS_TRY
 {

79 
_TSM_ASSERT_THROWS_NOTHING
–
fûe
(), 
löe
(), "Ex˚±i⁄Åhrow¿‰omÅórDown()", 
suôe
()->
ã¨Down
() );

81 
_TS_CATCH_ABORT
–{  
Ál£
; } );

83  
GlobÆFixtuª
 *
	ggf
 = GlobÆFixtuª::
œ°GlobÆFixtuª
(); g‡!0; g‡
gf
->
¥evGlobÆFixtuª
() ) {

84 
boﬁ
 
ok
;

85 
	g_TS_TRY
 { 
	gok
 = 
gf
->
ã¨Down
(); }

86 
_TS_LAST_CATCH
–{ 
ok
 = 
Ál£
; } );

88 i‡–!
	gok
 ) {

89 
doFaûTe°
–
fûe
(), 
löe
(), "Error in GlobalFixture::tearDown()" );

90  
	gÁl£
;

94  
	gåue
;

97 c⁄° *
	gRólTe°Des¸ùti⁄
::
fûe
(Ëc⁄° {  
_suôe
->file(); }

98 
	gRólTe°Des¸ùti⁄
::
löe
(Ëc⁄° {  
_löe
; }

99 c⁄° *
	gRólTe°Des¸ùti⁄
::
ã°Name
(Ëc⁄° {  
_ã°Name
; }

100 c⁄° *
	gRólTe°Des¸ùti⁄
::
suôeName
(Ëc⁄° {  
_suôe
->suiteName(); }

102 
Te°Des¸ùti⁄
 *
	gRólTe°Des¸ùti⁄
::
√xt
(Ë{  (
RólTe°Des¸ùti⁄
 *)
Lök
::next(); }

103 c⁄° 
Te°Des¸ùti⁄
 *
	gRólTe°Des¸ùti⁄
::
√xt
(Ëc⁄° {  (c⁄° 
RólTe°Des¸ùti⁄
 *)
Lök
::next(); }

105 
Te°Suôe
 *
	gRólTe°Des¸ùti⁄
::
suôe
(Ëc⁄° {  
_suôe
->suite(); }

107 
	gRólTe°Des¸ùti⁄
::
run
()

109 
_TS_TRY
 { 
runTe°
(); }

110 
_TS_CATCH_ABORT
( {} )

111 
___TSM_CATCH
–
fûe
(), 
löe
(), "ExceptionÅhrown fromÅest" );

114 
	gRólSuôeDes¸ùti⁄
::
RólSuôeDes¸ùti⁄
() {}

115 
RólSuôeDes¸ùti⁄
::RólSuôeDes¸ùti⁄–c⁄° *
¨gFûe
,

116 
¨gLöe
,

117 c⁄° *
¨gSuôeName
,

118 
Li°
 &
¨gTe°s
 )

120 
öôülize
–
¨gFûe
, 
¨gLöe
, 
¨gSuôeName
, 
¨gTe°s
 );

123 
	gRólSuôeDes¸ùti⁄
::
öôülize
–c⁄° *
¨gFûe
,

124 
¨gLöe
,

125 c⁄° *
¨gSuôeName
,

126 
Li°
 &
¨gTe°s
 )

128 
	g_fûe
 = 
¨gFûe
;

129 
	g_löe
 = 
¨gLöe
;

130 
	g_suôeName
 = 
¨gSuôeName
;

131 
	g_ã°s
 = &
¨gTe°s
;

133 
©èch
–
_suôes
 );

136 c⁄° *
	gRólSuôeDes¸ùti⁄
::
fûe
(Ëc⁄° {  
_fûe
; }

137 
	gRólSuôeDes¸ùti⁄
::
löe
(Ëc⁄° {  
_löe
; }

138 c⁄° *
	gRólSuôeDes¸ùti⁄
::
suôeName
(Ëc⁄° {  
_suôeName
; }

140 
Te°Des¸ùti⁄
 *
	gRólSuôeDes¸ùti⁄
::
fú°Te°
(Ë{  (
RólTe°Des¸ùti⁄
 *)
_ã°s
->
hód
(); }

141 c⁄° 
Te°Des¸ùti⁄
 *
	gRólSuôeDes¸ùti⁄
::
fú°Te°
(Ëc⁄° {  (c⁄° 
RólTe°Des¸ùti⁄
 *)
_ã°s
->
hód
(); }

142 
SuôeDes¸ùti⁄
 *
	gRólSuôeDes¸ùti⁄
::
√xt
(Ë{  (
RólSuôeDes¸ùti⁄
 *)
Lök
::next(); }

143 c⁄° 
SuôeDes¸ùti⁄
 *
	gRólSuôeDes¸ùti⁄
::
√xt
(Ëc⁄° {  (c⁄° 
RólSuôeDes¸ùti⁄
 *)
Lök
::next(); }

145 
	gRólSuôeDes¸ùti⁄
::
numTe°s
(Ëc⁄° {  
_ã°s
->
size
(); }

147 c⁄° 
	gTe°Des¸ùti⁄
 &
	gRólSuôeDes¸ùti⁄
::
ã°Des¸ùti⁄
–
i
 ) const

149  *(
RólTe°Des¸ùti⁄
 *)
_ã°s
->
¡h
–
i
 );

152 
	gRólSuôeDes¸ùti⁄
::
a˘iv©eAŒTe°s
()

154 
_ã°s
->
a˘iv©eAŒ
();

157 
boﬁ
 
	gRólSuôeDes¸ùti⁄
::
ÀaveO∆y
–c⁄° *
ã°Name
 )

159  
Te°Des¸ùti⁄
 *
td
 = 
fú°Te°
(); 
	gtd
 !0;Åd =Åd->
√xt
() ) {

160 i‡–
°rögsEquÆ
–
td
->
ã°Name
(),ÅestName ) ) {

161 
_ã°s
->
ÀaveO∆y
–*
td
 );

162  
	gåue
;

165  
	gÁl£
;

168 
	gSèticSuôeDes¸ùti⁄
::
SèticSuôeDes¸ùti⁄
() {}

169 
SèticSuôeDes¸ùti⁄
::SèticSuôeDes¸ùti⁄–c⁄° *
¨gFûe
, 
¨gLöe
,

170 c⁄° *
¨gSuôeName
, 
Te°Suôe
 &
¨gSuôe
,

171 
Li°
 &
¨gTe°s
 ) :

172 
RólSuôeDes¸ùti⁄
–
¨gFûe
, 
¨gLöe
, 
¨gSuôeName
, 
¨gTe°s
 )

174 
doInôülize
–
¨gSuôe
 );

177 
	gSèticSuôeDes¸ùti⁄
::
öôülize
–c⁄° *
¨gFûe
, 
¨gLöe
,

178 c⁄° *
¨gSuôeName
, 
Te°Suôe
 &
¨gSuôe
,

179 
Li°
 &
¨gTe°s
 )

181 
	gRólSuôeDes¸ùti⁄
::
öôülize
–
¨gFûe
, 
¨gLöe
, 
¨gSuôeName
, 
¨gTe°s
 );

182 
doInôülize
–
¨gSuôe
 );

185 
	gSèticSuôeDes¸ùti⁄
::
doInôülize
–
Te°Suôe
 &
¨gSuôe
 )

187 
_suôe
 = &
¨gSuôe
;

190 
Te°Suôe
 *
	gSèticSuôeDes¸ùti⁄
::
suôe
() const

192  
_suôe
;

195 
boﬁ
 
	gSèticSuôeDes¸ùti⁄
::
£tUp
(Ë{  
åue
; }

196 
boﬁ
 
	gSèticSuôeDes¸ùti⁄
::
ã¨Down
(Ë{  
åue
; }

198 
	gComm⁄Dy«micSuôeDes¸ùti⁄
::
Comm⁄Dy«micSuôeDes¸ùti⁄
() {}

199 
Comm⁄Dy«micSuôeDes¸ùti⁄
::Comm⁄Dy«micSuôeDes¸ùti⁄–c⁄° *
¨gFûe
, 
¨gLöe
,

200 c⁄° *
¨gSuôeName
, 
Li°
 &
¨gTe°s
,

201 
¨gCª©eLöe
, 
¨gDe°royLöe
 ) :

202 
RólSuôeDes¸ùti⁄
–
¨gFûe
, 
¨gLöe
, 
¨gSuôeName
, 
¨gTe°s
 )

204 
doInôülize
–
¨gCª©eLöe
, 
¨gDe°royLöe
 );

207 
	gComm⁄Dy«micSuôeDes¸ùti⁄
::
öôülize
–c⁄° *
¨gFûe
, 
¨gLöe
,

208 c⁄° *
¨gSuôeName
, 
Li°
 &
¨gTe°s
,

209 
¨gCª©eLöe
, 
¨gDe°royLöe
 )

211 
	gRólSuôeDes¸ùti⁄
::
öôülize
–
¨gFûe
, 
¨gLöe
, 
¨gSuôeName
, 
¨gTe°s
 );

212 
doInôülize
–
¨gCª©eLöe
, 
¨gDe°royLöe
 );

215 
	gComm⁄Dy«micSuôeDes¸ùti⁄
::
doInôülize
–
¨gCª©eLöe
, 
¨gDe°royLöe
 )

217 
	g_¸óãLöe
 = 
¨gCª©eLöe
;

218 
	g_de°royLöe
 = 
¨gDe°royLöe
;

221 
	gLi°
 &
	gRólW‹ldDes¸ùti⁄
::
suôes
()

223  
RólSuôeDes¸ùti⁄
::
_suôes
;

226 
	gRólW‹ldDes¸ùti⁄
::
numSuôes
( ) const

228  
suôes
().
size
();

231 
	gRólW‹ldDes¸ùti⁄
::
numTŸÆTe°s
( ) const

233 
cou¡
 = 0;

234  c⁄° 
SuôeDes¸ùti⁄
 *
	gsd
 = 
fú°Suôe
(); sd !0; sd = 
sd
->
√xt
() )

235 
cou¡
 +
sd
->
numTe°s
();

236  
	gcou¡
;

239 
SuôeDes¸ùti⁄
 *
	gRólW‹ldDes¸ùti⁄
::
fú°Suôe
()

241  (
RólSuôeDes¸ùti⁄
 *)
suôes
().
hód
();

244 c⁄° 
SuôeDes¸ùti⁄
 *
	gRólW‹ldDes¸ùti⁄
::
fú°Suôe
() const

246  (c⁄° 
RólSuôeDes¸ùti⁄
 *)
suôes
().
hód
();

249 c⁄° 
	gSuôeDes¸ùti⁄
 &
	gRólW‹ldDes¸ùti⁄
::
suôeDes¸ùti⁄
–
i
 ) const

251  *(c⁄° 
RólSuôeDes¸ùti⁄
 *)
suôes
().
¡h
–
i
 );

254 
	gRólW‹ldDes¸ùti⁄
::
a˘iv©eAŒTe°s
()

256 
suôes
().
a˘iv©eAŒ
();

257  
SuôeDes¸ùti⁄
 *
	gsd
 = 
fú°Suôe
(); sd !0; sd = 
sd
->
√xt
() )

258 
sd
->
a˘iv©eAŒTe°s
();

261 
boﬁ
 
	gRólW‹ldDes¸ùti⁄
::
ÀaveO∆y
–c⁄° *
suôeName
, c⁄° *
ã°Name
 )

263  
SuôeDes¸ùti⁄
 *
	gsd
 = 
fú°Suôe
(); sd !0; sd = 
sd
->
√xt
() ) {

264 i‡–
°rögsEquÆ
–
sd
->
suôeName
(), suiteName ) ) {

265 i‡–
ã°Name
 )

266 i‡–!
sd
->
ÀaveO∆y
–
ã°Name
 ) )

267  
Ál£
;

268 
suôes
().
ÀaveO∆y
–*
sd
 );

269  
	gåue
;

272  
	gÁl£
;

275 
boﬁ
 
	gRólW‹ldDes¸ùti⁄
::
£tUp
()

277  
GlobÆFixtuª
 *
gf
 = GlobÆFixtuª::
fú°GlobÆFixtuª
(); 
	ggf
 !0; g‡gf->
√xtGlobÆFixtuª
() ) {

278 
boﬁ
 
ok
;

279 
	g_TS_TRY
 {

280 
	gok
 = 
gf
->
£tUpW‹ld
();

281 i‡(
åackî
().
ã°Faûed
()) {

282 
åackî
().
öôülize
();

283 
	gok
 = 
Ál£
;

286 
_TS_LAST_CATCH
–{ 
ok
 = 
Ál£
; } );

288 i‡–!
	gok
 ) {

289 
ªp‹tEº‹
( "Error setting up world" );

290  
	gÁl£
;

294  
	gåue
;

297 
boﬁ
 
	gRólW‹ldDes¸ùti⁄
::
ã¨Down
()

299  
GlobÆFixtuª
 *
gf
 = GlobÆFixtuª::
œ°GlobÆFixtuª
(); 
	ggf
 !0; g‡gf->
¥evGlobÆFixtuª
() ) {

300 
boﬁ
 
ok
;

301 
	g_TS_TRY
 { 
	gok
 = 
gf
->
ã¨DownW‹ld
(); }

302 
_TS_LAST_CATCH
–{ 
ok
 = 
Ál£
; } );

304 i‡–!
	gok
 ) {

305 
ªp‹tEº‹
( "ErrorÅearing down world" );

306  
	gÁl£
;

310  
	gåue
;

313 
	gRólW‹ldDes¸ùti⁄
::
ªp‹tEº‹
–c⁄° *
mesßge
 )

315 
doW¨n
–
__FILE__
, 5, 
mesßge
 );

318 
a˘iv©eAŒTe°s
()

320 
RólW‹ldDes¸ùti⁄
().
a˘iv©eAŒTe°s
();

323 
boﬁ
 
ÀaveO∆y
–c⁄° *
suôeName
, c⁄° *
ã°Name
 )

325  
RólW‹ldDes¸ùti⁄
().
ÀaveO∆y
–
suôeName
, 
ã°Name
 );

	@tools/cxxtest/cxxtest/RealDescriptions.h

12 #i‚de‡
__cxxã°__RólDes¸ùti⁄s_h__


13 
	#__cxxã°__RólDes¸ùti⁄s_h__


	)

19 
	~<cxxã°/Des¸ùti⁄s.h
>

20 
	~<cxxã°/Te°Suôe.h
>

21 
	~<cxxã°/GlobÆFixtuª.h
>

23 
«me•a˚
 
	gCxxTe°


25 ˛as†
	cRólTe°Des¸ùti⁄
 : 
public
 
Te°Des¸ùti⁄


27 
public
:

28 
RólTe°Des¸ùti⁄
();

29 
RólTe°Des¸ùti⁄
–
Li°
 &
¨gLi°
, 
SuôeDes¸ùti⁄
 &
¨gSuôe
, 
¨gLöe
, c⁄° *
¨gTe°Name
 );

30 
öôülize
–
Li°
 &
¨gLi°
, 
SuôeDes¸ùti⁄
 &
¨gSuôe
, 
¨gLöe
, c⁄° *
¨gTe°Name
 );

32 c⁄° *
fûe
() const;

33 
löe
() const;

34 c⁄° *
ã°Name
() const;

35 c⁄° *
suôeName
() const;

37 
Te°Des¸ùti⁄
 *
√xt
();

38 c⁄° 
Te°Des¸ùti⁄
 *
√xt
() const;

40 
Te°Suôe
 *
suôe
() const;

42 
boﬁ
 
£tUp
();

43 
run
();

44 
boﬁ
 
ã¨Down
();

46 
	g¥iv©e
:

47 
RólTe°Des¸ùti⁄
( const RealTestDescription & );

48 
	gRólTe°Des¸ùti⁄
 &
	g›î©‹
=–c⁄° 
RólTe°Des¸ùti⁄
 & );

50 
vútuÆ
 
runTe°
() = 0;

52 
SuôeDes¸ùti⁄
 *
	g_suôe
;

53 
	g_löe
;

54 c⁄° *
	g_ã°Name
;

57 ˛as†
	cRólSuôeDes¸ùti⁄
 : 
public
 
SuôeDes¸ùti⁄


59 
public
:

60 
RólSuôeDes¸ùti⁄
();

61 
RólSuôeDes¸ùti⁄
–c⁄° *
¨gFûe
, 
¨gLöe
, c⁄° *
¨gSuôeName
, 
Li°
 &
¨gTe°s
 );

63 
öôülize
–c⁄° *
¨gFûe
, 
¨gLöe
, c⁄° *
¨gSuôeName
, 
Li°
 &
¨gTe°s
 );

65 c⁄° *
fûe
() const;

66 
löe
() const;

67 c⁄° *
suôeName
() const;

69 
Te°Des¸ùti⁄
 *
fú°Te°
();

70 c⁄° 
Te°Des¸ùti⁄
 *
fú°Te°
() const;

71 
SuôeDes¸ùti⁄
 *
√xt
();

72 c⁄° 
SuôeDes¸ùti⁄
 *
√xt
() const;

74 
numTe°s
() const;

75 c⁄° 
	gTe°Des¸ùti⁄
 &
ã°Des¸ùti⁄
–
i
 ) const;

77 
a˘iv©eAŒTe°s
();

78 
boﬁ
 
ÀaveO∆y
–c⁄° *
ã°Name
 );

80 
	g¥iv©e
:

81 
RólSuôeDes¸ùti⁄
( const RealSuiteDescription & );

82 
	gRólSuôeDes¸ùti⁄
 &
	g›î©‹
=–c⁄° 
RólSuôeDes¸ùti⁄
 & );

84 c⁄° *
	g_fûe
;

85 
	g_löe
;

86 c⁄° *
	g_suôeName
;

87 
Li°
 *
	g_ã°s
;

89 
Li°
 
	g_suôes
;

90 
‰õnd
 
˛ass
 
	gRólW‹ldDes¸ùti⁄
;

93 ˛as†
	cSèticSuôeDes¸ùti⁄
 : 
public
 
RólSuôeDes¸ùti⁄


95 
public
:

96 
SèticSuôeDes¸ùti⁄
();

97 
SèticSuôeDes¸ùti⁄
–c⁄° *
¨gFûe
, 
¨gLöe
,

98 c⁄° *
¨gSuôeName
, 
Te°Suôe
 &
¨gSuôe
,

99 
Li°
 &
¨gTe°s
 );

101 
öôülize
–c⁄° *
¨gFûe
, 
¨gLöe
,

102 c⁄° *
¨gSuôeName
, 
Te°Suôe
 &
¨gSuôe
,

103 
Li°
 &
¨gTe°s
 );

104 
Te°Suôe
 *
suôe
() const;

106 
boﬁ
 
£tUp
();

107 
boﬁ
 
ã¨Down
();

109 
	g¥iv©e
:

110 
SèticSuôeDes¸ùti⁄
( const StaticSuiteDescription & );

111 
	gSèticSuôeDes¸ùti⁄
 &
	g›î©‹
=–c⁄° 
SèticSuôeDes¸ùti⁄
 & );

113 
doInôülize
–
Te°Suôe
 &
¨gSuôe
 );

115 
Te°Suôe
 *
	g_suôe
;

118 ˛as†
	cComm⁄Dy«micSuôeDes¸ùti⁄
 : 
public
 
RólSuôeDes¸ùti⁄


120 
public
:

121 
Comm⁄Dy«micSuôeDes¸ùti⁄
();

122 
Comm⁄Dy«micSuôeDes¸ùti⁄
–c⁄° *
¨gFûe
, 
¨gLöe
,

123 c⁄° *
¨gSuôeName
, 
Li°
 &
¨gTe°s
,

124 
¨gCª©eLöe
, 
¨gDe°royLöe
 );

126 
öôülize
–c⁄° *
¨gFûe
, 
¨gLöe
,

127 c⁄° *
¨gSuôeName
, 
Li°
 &
¨gTe°s
,

128 
¨gCª©eLöe
, 
¨gDe°royLöe
 );

130 
	g¥Ÿe˘ed
:

131 
_¸óãLöe
, 
	g_de°royLöe
;

133 
	g¥iv©e
:

134 
doInôülize
–
¨gCª©eLöe
, 
¨gDe°royLöe
 );

137 
	gãm∂©e
<
˛ass
 
	gS
>

138 ˛as†
	cDy«micSuôeDes¸ùti⁄
 : 
public
 
Comm⁄Dy«micSuôeDes¸ùti⁄


140 
public
:

141 
Dy«micSuôeDes¸ùti⁄
() {}

142 
Dy«micSuôeDes¸ùti⁄
–c⁄° *
¨gFûe
, 
¨gLöe
,

143 c⁄° *
¨gSuôeName
, 
Li°
 &
¨gTe°s
,

144 
S
 *&
¨gSuôe
, 
¨gCª©eLöe
,

145 
¨gDe°royLöe
 ) :

146 
Comm⁄Dy«micSuôeDes¸ùti⁄
–
¨gFûe
, 
¨gLöe
, 
¨gSuôeName
, 
¨gTe°s
, 
¨gCª©eLöe
, 
¨gDe°royLöe
 )

148 
	g_suôe
 = &
¨gSuôe
;

151 
öôülize
–c⁄° *
¨gFûe
, 
¨gLöe
,

152 c⁄° *
¨gSuôeName
, 
Li°
 &
¨gTe°s
,

153 
S
 *&
¨gSuôe
, 
¨gCª©eLöe
,

154 
¨gDe°royLöe
 )

156 
	gComm⁄Dy«micSuôeDes¸ùti⁄
::
öôülize
–
¨gFûe
, 
¨gLöe
,

157 
¨gSuôeName
, 
¨gTe°s
,

158 
¨gCª©eLöe
, 
¨gDe°royLöe
 );

159 
	g_suôe
 = &
¨gSuôe
;

162 
Te°Suôe
 *
suôe
(Ëc⁄° {  
ªÆSuôe
(); }

164 
boﬁ
 
£tUp
();

165 
boﬁ
 
ã¨Down
();

167 
	g¥iv©e
:

168 
S
 *
ªÆSuôe
(Ëc⁄° {  *
_suôe
; }

169 
£tSuôe
–
S
 *
s
 ) { *
	g_suôe
 = s; }

171 
¸óãSuôe
()

173 
£tSuôe
–
S
::
¸óãSuôe
() );

176 
de°roySuôe
()

178 
S
 *
	gs
 = 
ªÆSuôe
();

179 
£tSuôe
( 0 );

180 
	gS
::
de°roySuôe
–
s
 );

183 
S
 **
	g_suôe
;

186 
	gãm∂©e
<
˛ass
 
	gS
>

187 
boﬁ
 
	gDy«micSuôeDes¸ùti⁄
<
	gS
>::
	$£tUp
()

189 
_TS_TRY
 {

190 
	`_TSM_ASSERT_THROWS_NOTHING
–
	`fûe
(), 
_¸óãLöe
, "Ex˚±i⁄Åhrow¿‰om cª©eSuôe()", 
	`¸óãSuôe
() );

191 
	`_TSM_ASSERT
–
	`fûe
(), 
_¸óãLöe
, "¸óãSuôe(ËÁûed", 
	`suôe
() != 0 );

193 
	`_TS_CATCH_ABORT
–{  
Ál£
; } );

195  (
	`suôe
() != 0);

196 
	}
}

198 
	gãm∂©e
<
˛ass
 
	gS
>

199 
boﬁ
 
	gDy«micSuôeDes¸ùti⁄
<
	gS
>::
	$ã¨Down
()

201 i‡–!
_suôe
 )

202  
åue
;

204 
_TS_TRY
 {

205 
	`_TSM_ASSERT_THROWS_NOTHING
–
	`fûe
(), 
_de°royLöe
, "de°roySuôe(ËÁûed", 
	`de°roySuôe
() );

207 
	`_TS_CATCH_ABORT
–{  
Ál£
; } );

209  
åue
;

210 
	}
}

212 ˛as†
	cRólW‹ldDes¸ùti⁄
 : 
public
 
W‹ldDes¸ùti⁄


214 
public
:

215 
Li°
 &
suôes
();

216 c⁄° *
w‹ldName
(Ëc⁄° {  
	g_w‹ldName
;}

217 
numSuôes
( ) const;

218 
numTŸÆTe°s
( ) const;

219 
SuôeDes¸ùti⁄
 *
fú°Suôe
();

220 c⁄° 
SuôeDes¸ùti⁄
 *
fú°Suôe
() const;

221 c⁄° 
	gSuôeDes¸ùti⁄
 &
suôeDes¸ùti⁄
–
i
 ) const;

222 
a˘iv©eAŒTe°s
();

223 
boﬁ
 
ÀaveO∆y
–c⁄° *
suôeName
, c⁄° *
ã°Name
 = 0 );

225 
boﬁ
 
£tUp
();

226 
boﬁ
 
ã¨Down
();

227 
ªp‹tEº‹
–c⁄° *
mesßge
 );

229 c⁄° *
	g_w‹ldName
;

232 
a˘iv©eAŒTe°s
();

233 
boﬁ
 
ÀaveO∆y
–c⁄° *
suôeName
, c⁄° *
ã°Name
 = 0 );

	@tools/cxxtest/cxxtest/Root.cpp

12 #i‚de‡
__cxxã°__RoŸ_˝p__


13 
	#__cxxã°__RoŸ_˝p__


	)

20 
	~<cxxã°/Des¸ùti⁄s.˝p
>

21 
	~<cxxã°/DummyDes¸ùti⁄s.˝p
>

22 
	~<cxxã°/GlobÆFixtuª.˝p
>

23 
	~<cxxã°/LökedLi°.˝p
>

24 
	~<cxxã°/RólDes¸ùti⁄s.˝p
>

25 
	~<cxxã°/Te°Suôe.˝p
>

26 
	~<cxxã°/Te°Tøckî.˝p
>

27 
	~<cxxã°/VÆueTøôs.˝p
>

	@tools/cxxtest/cxxtest/SelfTest.h

12 #i‚de‡
__cxxã°_SñfTe°_h__


13 
	#__cxxã°_SñfTe°_h__


	)

15 
	#CXXTEST_SUITE
(
«me
)

	)

16 
	#CXXTEST_CODE
(
membî
)

	)

	@tools/cxxtest/cxxtest/StdHeaders.h

12 #i‚de‡
__cxxã°_StdHódîs_h__


13 
	#__cxxã°_StdHódîs_h__


	)

20 #ifde‡
_MSC_VER


21 #¥agm®
w¨nög
–
push
, 1 )

24 
	~<com∂ex
>

25 
	~<deque
>

26 
	~<li°
>

27 
	~<m≠
>

28 
	~<£t
>

29 
	~<°rög
>

30 
	~<ve˘‹
>

32 #ifde‡
_MSC_VER


33 #¥agm®
w¨nög
–
p›
 )

	@tools/cxxtest/cxxtest/StdTestSuite.h

12 #i‚de‡
__cxxã°__StdTe°Suôe_h__


13 
	#__cxxã°__StdTe°Suôe_h__


	)

20 
«me•a˚
 
	gCxxTe°
 {

22 #ifde‡
_CXXTEST_PARTIAL_TEMPLATE_SPECIALIZATION


24 
	gãm∂©e
<
˛ass
 
	gX
, cœs†
	gY
, cœs†
	gD
>

25 
	gdñè
<
	g°d
::
ve˘‹
<
X
>, std::ve˘‹<
Y
>, 
	gD
>

27 
boﬁ
 
ã°
(
°d
::
ve˘‹
<
X
> 
x
, std::ve˘‹<
Y
> 
y
, 
D
 
d
)

29 i‡–
	gx
.
size
(Ë!
y
.size() )

30  
Ál£
;

31 
size_t
 
	gi
 = 0; i<
	gx
.
size
(); ++i)

32 i‡–! 
	gdñè
<
	gX
,
	gY
,
	gD
>::
ã°
(
x
[
i
], 
y
[i], 
d
) )

33  
	gÁl£
;

34  
	gåue
;

38 
	gãm∂©e
<
˛ass
 
	gX
, cœs†
	gY
, cœs†
	gD
>

39 
	gdñè
<
	g°d
::
li°
<
X
>, std::li°<
Y
>, 
	gD
>

41 
boﬁ
 
ã°
(
°d
::
li°
<
X
> 
x
, std::li°<
Y
> 
y
, 
D
 
d
)

43 
ty≥«me
 
	g°d
::
li°
<
X
>::
c⁄°_ôî©‹
 
x_ô
 = 
x
.
begö
();

44 
ty≥«me
 
	g°d
::
li°
<
Y
>::
c⁄°_ôî©‹
 
y_ô
 = 
y
.
begö
();

45 ; 
	gx_ô
 !
x
.
íd
(); ++x_ô, ++
	gy_ô
)

47 i‡–
	gy_ô
 =
y
.
íd
() )

48  
Ál£
;

49 i‡–! 
	gdñè
<
	gX
,
	gY
,
	gD
>::
ã°
(*
x_ô
, *
y_ô
, 
d
) )

50  
	gÁl£
;

52  
	gy_ô
 =
y
.
íd
();

	@tools/cxxtest/cxxtest/StdValueTraits.h

12 #i‚de‡
__cxxã°_StdVÆueTøôs_h__


13 
	#__cxxã°_StdVÆueTøôs_h__


	)

21 
	~<cxxã°/VÆueTøôs.h
>

22 
	~<cxxã°/StdHódîs.h
>

24 #ifde‡
_CXXTEST_OLD_STD


25 
	#CXXTEST_STD
(
x
Ë
	)
x

27 
	#CXXTEST_STD
(
x
Ë
°d
::
	)
x

30 #i‚de‡
CXXTEST_USER_VALUE_TRAITS


32 
«me•a˚
 
	gCxxTe°


44 ˛as†
	cStdTøôsBa£


46 
	gpublic
:

47 
StdTøôsBa£
 &
›î©‹
<<–c⁄° 
CXXTEST_STD
(
°rög
Ë&
s
 ) { 
_s
 +s;  *
	gthis
; }

48 c⁄° *
asSåög
(Ëc⁄° {  
	g_s
.
c_°r
(); }

50 
	g¥iv©e
:

51 
CXXTEST_STD
(
°rög
Ë
_s
;

57 
CXXTEST_TEMPLATE_INSTANTIATION


58 
˛ass
 
	gVÆueTøôs
<c⁄° 
CXXTEST_STD
(
°rög
)> : 
public
 
StdTøôsBa£


60 
public
:

61 
VÆueTøôs
–c⁄° 
CXXTEST_STD
(
°rög
Ë&
s
 )

63 *
this
 << "\"";

64  
	gi
 = 0; i < 
	gs
.
Àngth
(); ++ i ) {

65 
	gc
[("\\xXX")];

66 
ch¨ToSåög
–
s
[
i
], 
c
 );

67 *
	gthis
 << 
	gc
;

69 *
	gthis
 << "\"";

73 
CXXTEST_COPY_CONST_TRAITS
–
CXXTEST_STD
(
°rög
) );

75 #i‚de‡
_CXXTEST_OLD_STD


79 
CXXTEST_TEMPLATE_INSTANTIATION


80 
˛ass
 
	gVÆueTøôs
<c⁄° 
CXXTEST_STD
(
basic_°rög
<
wch¨_t
>)> : 
public
 
StdTøôsBa£


82 
public
:

83 
VÆueTøôs
–c⁄° 
CXXTEST_STD
(
basic_°rög
<
wch¨_t
>Ë&
s
 )

85 *
this
 << "L\"";

86  
	gi
 = 0; i < 
	gs
.
Àngth
(); ++ i ) {

87 
	gc
[("\\x12345678")];

88 
ch¨ToSåög
–()
s
[
i
], 
c
 );

89 *
	gthis
 << 
	gc
;

91 *
	gthis
 << "\"";

95 
CXXTEST_COPY_CONST_TRAITS
–
CXXTEST_STD
(
basic_°rög
<
wch¨_t
>) );

102 
	gãm∂©e
<
˛ass
 
	gSåóm
, cœs†
	gIãøt‹
>

103 
	$dumpR™ge
–
Såóm
 &
s
, 
Iãøt‹
 
fú°
, Iãøt‹ 
œ°
 )

105 i‡–
fú°
 =
œ°
 ) {

106 
s
 << "{}";

110 
s
 << "{ ";

111  
fú°
 !
œ°
 ) {

112 
s
 << 
	`TS_AS_STRING
(*
fú°
);

113 i‡–++ 
fú°
 !
œ°
 )

114 
s
 << ", ";

116 
s
 << " }";

117 
	}
}

119 #ifde‡
_CXXTEST_PARTIAL_TEMPLATE_SPECIALIZATION


123 
	gãm∂©e
<
˛ass
 
	gFú°
, cœs†
	gSec⁄d
>

124 
˛ass
 
	gVÆueTøôs
< 
CXXTEST_STD
(
∑ú
)<
	gFú°
, 
	gSec⁄d
> > : 
public
 
StdTøôsBa£


126 
public
:

127 
VÆueTøôs
–c⁄° 
CXXTEST_STD
(
∑ú
)<
Fú°
, 
Sec⁄d
> &
p
 )

129 *
	gthis
 << "<" << 
TS_AS_STRING
–
p
.
fú°
 ) << ", " << TS_AS_STRING–p.
£c⁄d
 ) << ">";

136 
	gãm∂©e
<
˛ass
 
	gEÀmít
>

137 
˛ass
 
	gVÆueTøôs
< 
CXXTEST_STD
(
ve˘‹
)<
	gEÀmít
> > : 
public
 
StdTøôsBa£


139 
public
:

140 
VÆueTøôs
–c⁄° 
CXXTEST_STD
(
ve˘‹
)<
EÀmít
> &
v
 )

142 
dumpR™ge
–*
this
, 
v
.
begö
(), v.
íd
() );

149 
	gãm∂©e
<
˛ass
 
	gEÀmít
>

150 
˛ass
 
	gVÆueTøôs
< 
CXXTEST_STD
(
li°
)<
	gEÀmít
> > : 
public
 
StdTøôsBa£


152 
public
:

153 
VÆueTøôs
–c⁄° 
CXXTEST_STD
(
li°
)<
EÀmít
> &
l
 )

155 
dumpR™ge
–*
this
, 
l
.
begö
(),Ü.
íd
() );

162 
	gãm∂©e
<
˛ass
 
	gEÀmít
>

163 
˛ass
 
	gVÆueTøôs
< 
CXXTEST_STD
(
£t
)<
	gEÀmít
> > : 
public
 
StdTøôsBa£


165 
public
:

166 
VÆueTøôs
–c⁄° 
CXXTEST_STD
(
£t
)<
EÀmít
> &
s
 )

168 
dumpR™ge
–*
this
, 
s
.
begö
(), s.
íd
() );

175 
	gãm∂©e
<
˛ass
 
	gKey
, cœs†
	gVÆue
>

176 
˛ass
 
	gVÆueTøôs
< 
CXXTEST_STD
(
m≠
)<
	gKey
, 
	gVÆue
> > : 
public
 
StdTøôsBa£


178 
public
:

179 
VÆueTøôs
–c⁄° 
CXXTEST_STD
(
m≠
)<
Key
, 
VÆue
> &
m
 )

181 
dumpR™ge
–*
this
, 
m
.
begö
(), m.
íd
() );

188 
	gãm∂©e
<
˛ass
 
	gEÀmít
>

189 
˛ass
 
	gVÆueTøôs
< 
CXXTEST_STD
(
deque
)<
	gEÀmít
> > : 
public
 
StdTøôsBa£


191 
public
:

192 
VÆueTøôs
–c⁄° 
CXXTEST_STD
(
deque
)<
EÀmít
> &
d
 )

194 
dumpR™ge
–*
this
, 
d
.
begö
(), d.
íd
() );

201 
	gãm∂©e
<
˛ass
 
	gEÀmít
>

202 
˛ass
 
	gVÆueTøôs
< 
CXXTEST_STD
(
mu…i£t
)<
	gEÀmít
> > : 
public
 
StdTøôsBa£


204 
public
:

205 
VÆueTøôs
–c⁄° 
CXXTEST_STD
(
mu…i£t
)<
EÀmít
> &
ms
 )

207 
dumpR™ge
–*
this
, 
ms
.
begö
(), ms.
íd
() );

214 
	gãm∂©e
<
˛ass
 
	gKey
, cœs†
	gVÆue
>

215 
˛ass
 
	gVÆueTøôs
< 
CXXTEST_STD
(
mu…im≠
)<
	gKey
, 
	gVÆue
> > : 
public
 
StdTøôsBa£


217 
public
:

218 
VÆueTøôs
–c⁄° 
CXXTEST_STD
(
mu…im≠
)<
Key
, 
VÆue
> &
mm
 )

220 
dumpR™ge
–*
this
, 
mm
.
begö
(), mm.
íd
() );

227 
	gãm∂©e
<
˛ass
 
	gNumbî
>

228 
˛ass
 
	gVÆueTøôs
< 
CXXTEST_STD
(
com∂ex
)<
	gNumbî
> > : 
public
 
StdTøôsBa£


230 
public
:

231 
VÆueTøôs
–c⁄° 
CXXTEST_STD
(
com∂ex
)<
Numbî
> &
c
 )

233 i‡–!
c
.
imag
() )

234 *
this
 << 
TS_AS_STRING
(
c
.
ªÆ
());

235 i‡–!
	gc
.
ªÆ
() )

236 *
	gthis
 << "(" << 
TS_AS_STRING
(
c
.
imag
()) << " * i)";

238 *
	gthis
 << "(" << 
TS_AS_STRING
(
c
.
ªÆ
()Ë<< " + " << TS_AS_STRING(c.
imag
()) << " * i)";

	@tools/cxxtest/cxxtest/StdioFilePrinter.h

12 #i‚de‡
__cxxã°__StdioFûePröãr_h__


13 
	#__cxxã°__StdioFûePröãr_h__


	)

22 
	~<cxxã°/Eº‹F‹m©ãr.h
>

23 
	~<°dio.h
>

25 
«me•a˚
 
	gCxxTe°


27 ˛as†
	cStdioFûePröãr
 : 
public
 
Eº‹F‹m©ãr


29 
public
:

30 
StdioFûePröãr
–
FILE
 *
o
, c⁄° *
¥eLöe
 = ":", c⁄° *
po°Löe
 = "" ) :

31 
Eº‹F‹m©ãr
–
√w
 
Ad≠ãr
(
o
), 
¥eLöe
, 
po°Löe
 ) {}

32 
	gvútuÆ
 ~
StdioFûePröãr
(Ë{ 
dñëe
 
ouçutSåóm
(); }

34 
	g¥iv©e
:

35 ˛as†
	cAd≠ãr
 : 
public
 
OuçutSåóm


37 
Ad≠ãr
( const Adapter & );

38 
	gAd≠ãr
 &
	g›î©‹
=–c⁄° 
Ad≠ãr
 & );

40 
FILE
 *
	g_o
;

42 
	gpublic
:

43 
Ad≠ãr
–
FILE
 *
o
 ) : 
_o
(o) {}

44 
Êush
(Ë{ 
fÊush
–
_o
 ); }

45 
	gOuçutSåóm
 &
	g›î©‹
<<–
	gi
 ) { 
Ârötf
–
_o
, "%u", 
i
 );  *
	gthis
; }

46 
	gOuçutSåóm
 &
	g›î©‹
<<–c⁄° *
	gs
 ) { 
Âuts
–
s
, 
_o
 );  *
	gthis
; }

47 
	gOuçutSåóm
 &
	g›î©‹
<<–
M™ùuœt‹
 
	gm
 ) {  OuçutSåóm::
›î©‹
<<–
m
 ); }

	@tools/cxxtest/cxxtest/StdioPrinter.h

12 #i‚de‡
__cxxã°__StdioPröãr_h__


13 
	#__cxxã°__StdioPröãr_h__


	)

21 
	~<cxxã°/StdioFûePröãr.h
>

23 
«me•a˚
 
	gCxxTe°


25 ˛as†
	cStdioPröãr
 : 
public
 
StdioFûePröãr


27 
public
:

28 
StdioPröãr
–
FILE
 *
o
 = 
°dout
, c⁄° *
¥eLöe
 = ":", c⁄° *
po°Löe
 = "" ) :

29 
StdioFûePröãr
–
o
, 
¥eLöe
, 
po°Löe
 ) {}

	@tools/cxxtest/cxxtest/TeeListener.h

12 #i‚de‡
__cxxã°__TìLi°íî_h__


13 
	#__cxxã°__TìLi°íî_h__


	)

19 
	~<cxxã°/Te°Li°íî.h
>

20 
	~<cxxã°/Te°Li°íî.h
>

22 
«me•a˚
 
	gCxxTe°


24 ˛as†
	cTìLi°íî
 : 
public
 
Te°Li°íî


26 
public
:

27 
TìLi°íî
()

29 
£tFú°
–
_dummy
 );

30 
£tSec⁄d
–
_dummy
 );

33 
	gvútuÆ
 ~
TìLi°íî
()

37 
£tFú°
–
Te°Li°íî
 &
fú°
 )

39 
	g_fú°
 = &
fú°
;

42 
£tSec⁄d
–
Te°Li°íî
 &
£c⁄d
 )

44 
	g_£c⁄d
 = &
£c⁄d
;

47 
íãrW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 &
d
 )

49 
	g_fú°
->
íãrW‹ld
–
d
 );

50 
	g_£c⁄d
->
íãrW‹ld
–
d
 );

53 
íãrSuôe
–c⁄° 
SuôeDes¸ùti⁄
 &
d
 )

55 
	g_fú°
->
íãrSuôe
–
d
 );

56 
	g_£c⁄d
->
íãrSuôe
–
d
 );

59 
íãrTe°
–c⁄° 
Te°Des¸ùti⁄
 &
d
 )

61 
	g_fú°
->
íãrTe°
–
d
 );

62 
	g_£c⁄d
->
íãrTe°
–
d
 );

65 
åa˚
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

67 
	g_fú°
->
åa˚
–
fûe
, 
löe
, 
ex¥essi⁄
 );

68 
	g_£c⁄d
->
åa˚
–
fûe
, 
löe
, 
ex¥essi⁄
 );

71 
w¨nög
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

73 
	g_fú°
->
w¨nög
–
fûe
, 
löe
, 
ex¥essi⁄
 );

74 
	g_£c⁄d
->
w¨nög
–
fûe
, 
löe
, 
ex¥essi⁄
 );

77 
ÁûedTe°
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

79 
	g_fú°
->
ÁûedTe°
–
fûe
, 
löe
, 
ex¥essi⁄
 );

80 
	g_£c⁄d
->
ÁûedTe°
–
fûe
, 
löe
, 
ex¥essi⁄
 );

83 
ÁûedAs£π
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

85 
	g_fú°
->
ÁûedAs£π
–
fûe
, 
löe
, 
ex¥essi⁄
 );

86 
	g_£c⁄d
->
ÁûedAs£π
–
fûe
, 
löe
, 
ex¥essi⁄
 );

89 
ÁûedAs£πEquÆs
–c⁄° *
fûe
, 
löe
,

90 c⁄° *
xSå
, c⁄° *
ySå
,

91 c⁄° *
x
, c⁄° *
y
 )

93 
	g_fú°
->
ÁûedAs£πEquÆs
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
x
, 
y
 );

94 
	g_£c⁄d
->
ÁûedAs£πEquÆs
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
x
, 
y
 );

97 
ÁûedAs£πSameD©a
–c⁄° *
fûe
, 
löe
,

98 c⁄° *
xSå
, c⁄° *
ySå
,

99 c⁄° *
sizeSå
, c⁄° *
x
,

100 c⁄° *
y
, 
size
 )

102 
	g_fú°
->
ÁûedAs£πSameD©a
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
sizeSå
, 
x
, 
y
, 
size
 );

103 
	g_£c⁄d
->
ÁûedAs£πSameD©a
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
sizeSå
, 
x
, 
y
, 
size
 );

106 
ÁûedAs£πSameFûes
–c⁄° * 
fûe
, 
löe
, c⁄° * 
fûe1
, c⁄° * 
fûe2
, c⁄° * 
ex∂™©i⁄
)

108 
	g_fú°
->
ÁûedAs£πSameFûes
–
fûe
, 
löe
, 
fûe1
, 
fûe2
, 
ex∂™©i⁄
 );

109 
	g_£c⁄d
->
ÁûedAs£πSameFûes
–
fûe
, 
löe
, 
fûe1
, 
fûe2
, 
ex∂™©i⁄
 );

112 
ÁûedAs£πDñè
–c⁄° *
fûe
, 
löe
,

113 c⁄° *
xSå
, c⁄° *
ySå
, c⁄° *
dSå
,

114 c⁄° *
x
, c⁄° *
y
, c⁄° *
d
 )

116 
	g_fú°
->
ÁûedAs£πDñè
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
dSå
, 
x
, 
y
, 
d
 );

117 
	g_£c⁄d
->
ÁûedAs£πDñè
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
dSå
, 
x
, 
y
, 
d
 );

120 
ÁûedAs£πDif„rs
–c⁄° *
fûe
, 
löe
,

121 c⁄° *
xSå
, c⁄° *
ySå
,

122 c⁄° *
vÆue
 )

124 
	g_fú°
->
ÁûedAs£πDif„rs
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
vÆue
 );

125 
	g_£c⁄d
->
ÁûedAs£πDif„rs
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
vÆue
 );

128 
ÁûedAs£πLessTh™
–c⁄° *
fûe
, 
löe
,

129 c⁄° *
xSå
, c⁄° *
ySå
,

130 c⁄° *
x
, c⁄° *
y
 )

132 
	g_fú°
->
ÁûedAs£πLessTh™
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
x
, 
y
 );

133 
	g_£c⁄d
->
ÁûedAs£πLessTh™
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
x
, 
y
 );

136 
ÁûedAs£πLessTh™EquÆs
–c⁄° *
fûe
, 
löe
,

137 c⁄° *
xSå
, c⁄° *
ySå
,

138 c⁄° *
x
, c⁄° *
y
 )

140 
	g_fú°
->
ÁûedAs£πLessTh™EquÆs
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
x
, 
y
 );

141 
	g_£c⁄d
->
ÁûedAs£πLessTh™EquÆs
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
x
, 
y
 );

144 
ÁûedAs£πPªdiˇã
–c⁄° *
fûe
, 
löe
,

145 c⁄° *
¥ediˇã
, c⁄° *
xSå
, c⁄° *
x
 )

147 
	g_fú°
->
ÁûedAs£πPªdiˇã
–
fûe
, 
löe
, 
¥ediˇã
, 
xSå
, 
x
 );

148 
	g_£c⁄d
->
ÁûedAs£πPªdiˇã
–
fûe
, 
löe
, 
¥ediˇã
, 
xSå
, 
x
 );

151 
ÁûedAs£πRñ©i⁄
–c⁄° *
fûe
, 
löe
,

152 c⁄° *
ªœti⁄
, c⁄° *
xSå
, c⁄° *
ySå
,

153 c⁄° *
x
, c⁄° *
y
 )

155 
	g_fú°
->
ÁûedAs£πRñ©i⁄
–
fûe
, 
löe
, 
ªœti⁄
, 
xSå
, 
ySå
, 
x
, 
y
 );

156 
	g_£c⁄d
->
ÁûedAs£πRñ©i⁄
–
fûe
, 
löe
, 
ªœti⁄
, 
xSå
, 
ySå
, 
x
, 
y
 );

159 
ÁûedAs£πThrows
–c⁄° *
fûe
, 
löe
,

160 c⁄° *
ex¥essi⁄
, c⁄° *
ty≥
,

161 
boﬁ
 
ŸhîThrown
 )

163 
	g_fú°
->
ÁûedAs£πThrows
–
fûe
, 
löe
, 
ex¥essi⁄
, 
ty≥
, 
ŸhîThrown
 );

164 
	g_£c⁄d
->
ÁûedAs£πThrows
–
fûe
, 
löe
, 
ex¥essi⁄
, 
ty≥
, 
ŸhîThrown
 );

167 
ÁûedAs£πThrowsNŸ
–c⁄° *
fûe
, 
löe
,

168 c⁄° *
ex¥essi⁄
 )

170 
	g_fú°
->
ÁûedAs£πThrowsNŸ
–
fûe
, 
löe
, 
ex¥essi⁄
 );

171 
	g_£c⁄d
->
ÁûedAs£πThrowsNŸ
–
fûe
, 
löe
, 
ex¥essi⁄
 );

174 
ÀaveTe°
–c⁄° 
Te°Des¸ùti⁄
 &
d
 )

176 
	g_fú°
->
ÀaveTe°
(
d
);

177 
	g_£c⁄d
->
ÀaveTe°
(
d
);

180 
ÀaveSuôe
–c⁄° 
SuôeDes¸ùti⁄
 &
d
 )

182 
	g_fú°
->
ÀaveSuôe
(
d
);

183 
	g_£c⁄d
->
ÀaveSuôe
(
d
);

186 
ÀaveW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 &
d
 )

188 
	g_fú°
->
ÀaveW‹ld
(
d
);

189 
	g_£c⁄d
->
ÀaveW‹ld
(
d
);

192 
	g¥iv©e
:

193 
Te°Li°íî
 *
_fú°
, *
	g_£c⁄d
;

194 
Te°Li°íî
 
	g_dummy
;

	@tools/cxxtest/cxxtest/TestListener.h

12 #i‚de‡
__cxxã°__Te°Li°íî_h__


13 
	#__cxxã°__Te°Li°íî_h__


	)

24 
	~<cxxã°/Des¸ùti⁄s.h
>

26 
«me•a˚
 
	gCxxTe°


28 ˛as†
	cTe°Li°íî


30 
	gpublic
:

31 
Te°Li°íî
() {}

32 
vútuÆ
 ~
Te°Li°íî
() {}

33 
vútuÆ
 
¥o˚ss_comm™dlöe
(& , ** ) {}

35 
vútuÆ
 
íãrW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 & ) {}

36 
vútuÆ
 
íãrSuôe
–c⁄° 
SuôeDes¸ùti⁄
 & ) {}

37 
vútuÆ
 
íãrTe°
–c⁄° 
Te°Des¸ùti⁄
 & ) {}

38 
vútuÆ
 
åa˚
( const * , ,

40 
vútuÆ
 
w¨nög
( const * , ,

42 
vútuÆ
 
ÁûedTe°
( const * , ,

44 
vútuÆ
 
ÁûedAs£π
( const * , ,

46 
vútuÆ
 
ÁûedAs£πEquÆs
( const * , ,

49 
vútuÆ
 
ÁûedAs£πSameD©a
( const * , ,

53 
vútuÆ
 
ÁûedAs£πDñè
( const * , ,

57 
vútuÆ
 
ÁûedAs£πDif„rs
( const * , ,

60 
vútuÆ
 
ÁûedAs£πLessTh™
( const * , ,

63 
vútuÆ
 
ÁûedAs£πLessTh™EquÆs
( const * , ,

66 
vútuÆ
 
ÁûedAs£πPªdiˇã
( const * , ,

68 
vútuÆ
 
ÁûedAs£πRñ©i⁄
( const * , ,

71 
vútuÆ
 
ÁûedAs£πThrows
( const * , ,

73 
boﬁ
 ) {}

74 
vútuÆ
 
ÁûedAs£πThrowsNŸ
( const * , ,

76 
vútuÆ
 
ÁûedAs£πSameFûes
( const * , ,

78 
vútuÆ
 
ÀaveTe°
–c⁄° 
Te°Des¸ùti⁄
 & ) {}

79 
vútuÆ
 
ÀaveSuôe
–c⁄° 
SuôeDes¸ùti⁄
 & ) {}

80 
vútuÆ
 
ÀaveW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 & ) {}

	@tools/cxxtest/cxxtest/TestMain.h

12 #i‚de‡
__CxxTe°Maö_h


13 
	#__CxxTe°Maö_h


	)

15 
	~<cxxã°/Te°Tøckî.h
>

16 
	~<cxxã°/Fœgs.h
>

18 #i‚de‡
_CXXTEST_HAVE_STD


19 
	#_CXXTEST_HAVE_STD


	)

22 
	~<cxxã°/StdVÆueTøôs.h
>

24 #ifde‡
_CXXTEST_OLD_STD


25 
	~<io°ªam.h
>

26 
	~<°rög.h
>

28 
	~<io°ªam
>

29 
	~<c°rög
>

32 
«me•a˚
 
	gCxxTe°


35 
ölöe
 
¥öt_hñp
(c⁄° * 
«me
)

37 
CXXTEST_STD
(
˚º
Ë<< 
	g«me
 << " <suôíame>" << CXXTEST_STD(
ídl
);

38 
CXXTEST_STD
(
˚º
Ë<< 
	g«me
 << " <suôíame> <ã°«me>" << CXXTEST_STD(
ídl
);

39 
CXXTEST_STD
(
˚º
Ë<< 
	g«me
 << " -h" << CXXTEST_STD(
ídl
);

40 
CXXTEST_STD
(
˚º
Ë<< 
	g«me
 << " --hñp" << CXXTEST_STD(
ídl
);

41 
CXXTEST_STD
(
˚º
Ë<< 
	g«me
 << " --hñp-ã°s" << CXXTEST_STD(
ídl
);

42 
CXXTEST_STD
(
˚º
Ë<< 
	g«me
 << " -v E«bÀÅøcög ouçut." << CXXTEST_STD(
ídl
);

46 
	gãm∂©e
 <
˛ass
 
	gTe°îT
>

47 
Maö
(
Te°îT
& 
tmp
, 
¨gc
, * 
¨gv
[])

59 
	gi
=1; i<
	g¨gc
; i++) {

60 i‡((
CXXTEST_STD
(
°rcmp
)(
	g¨gv
[
i
],"-h")==0Ë|| (CXXTEST_STD(°rcmp)(
¨gv
[i],"--help")==0)) {

61 
¥öt_hñp
(
¨gv
[0]);

63 } i‡((
CXXTEST_STD
(
°rcmp
)(
	g¨gv
[1],"--help-tests")==0)) {

64 
CXXTEST_STD
(
cout
Ë<< "Suôe/Te° Names" << CXXTEST_STD(
ídl
);

65 
CXXTEST_STD
(
cout
Ë<< "---------------------------------------------------------------------------" << CXXTEST_STD(
ídl
);

66  
SuôeDes¸ùti⁄
 *
	gsd
 = 
RólW‹ldDes¸ùti⁄
().
fú°Suôe
(); sd; sd = 
sd
->
√xt
() )

67  
Te°Des¸ùti⁄
 *
td
 = 
sd
->
fú°Te°
(); 
	gtd
;Åd =Åd->
√xt
() )

68 
CXXTEST_STD
(
cout
Ë<< 
td
->
suôeName
(Ë<< " " <<Åd->
ã°Name
(Ë<< CXXTEST_STD(
ídl
);

76 (
	g¨gc
 > 1Ë&& (
	g¨gv
[1][0] == '-')) {

77 i‡(
CXXTEST_STD
(
°rcmp
)(
¨gv
[1],"-v") == 0) {

78 
åackî
().
¥öt_åacög
 = 
åue
;

81 
CXXTEST_STD
(
˚º
Ë<< "ERROR: unknow¿›ti⁄ '" << 
	g¨gv
[1] << "'" << CXXTEST_STD(
ídl
);

84 
	gi
=1; i<(
	g¨gc
-1); i++)

85 
	g¨gv
[
i
] = 
¨gv
[i+1];

86 
	g¨gc
--;

92 
boﬁ
 
	g°©us
=
Ál£
;

93 i‡((
	g¨gc
==2Ë&& (
¨gv
[1][0] != '-')) {

94 
°©us
=
ÀaveO∆y
(
¨gv
[1]);

95 i‡(!
	g°©us
) {

96 
CXXTEST_STD
(
˚º
Ë<< "ERROR: unknow¿suôê'" << 
	g¨gv
[1] << "'" << CXXTEST_STD(
ídl
);

100 i‡((
	g¨gc
==3Ë&& (
¨gv
[1][0] != '-')) {

101 
°©us
=
ÀaveO∆y
(
¨gv
[1],argv[2]);

102 i‡(!
	g°©us
) {

103 
CXXTEST_STD
(
˚º
Ë<< "ERROR: unknow¿ã° '" << 
	g¨gv
[1] << "::" <<árgv[2] << "'" << CXXTEST_STD(
ídl
);

108 
	gtmp
.
¥o˚ss_comm™dlöe
(
¨gc
,
¨gv
);

109  
	gtmp
.
run
();

	@tools/cxxtest/cxxtest/TestRunner.h

12 #i‚de‡
__cxxã°_Te°Ru¬î_h__


13 
	#__cxxã°_Te°Ru¬î_h__


	)

21 
	~<cxxã°/Te°Li°íî.h
>

22 
	~<cxxã°/RólDes¸ùti⁄s.h
>

23 
	~<cxxã°/Te°Suôe.h
>

24 
	~<cxxã°/Te°Tøckî.h
>

26 
«me•a˚
 
	gCxxTe°


28 ˛as†
	cTe°Ru¬î


30 
	gpublic
:

31 
runAŒTe°s
–
Te°Li°íî
 &
li°íî
 )

33 
åackî
().
£tLi°íî
–&
li°íî
 );

34 
	g_TS_TRY
 { 
Te°Ru¬î
().
runW‹ld
(); }

35 
_TS_LAST_CATCH
–{ 
åackî
().
ÁûedTe°
–
__FILE__
, 
__LINE__
, "ExceptionÅhrown from world" ); } );

36 
åackî
().
£tLi°íî
( 0 );

39 
runAŒTe°s
–
Te°Li°íî
 *
li°íî
 )

41 i‡–
	gli°íî
 ) {

42 
	gli°íî
->
w¨nög
–
__FILE__
, 
__LINE__
, "Deprecated; UseÑunAllTests( TestListener & )" );

43 
runAŒTe°s
–*
li°íî
 );

47 
	g¥iv©e
:

48 
runW‹ld
()

50 
RólW‹ldDes¸ùti⁄
 
wd
;

51 
W‹ldGu¨d
 
	gsg
;

53 
åackî
().
íãrW‹ld
–
wd
 );

54 i‡–
	gwd
.
£tUp
() ) {

55  
SuôeDes¸ùti⁄
 *
	gsd
 = 
wd
.
fú°Suôe
(); sd; sd = 
sd
->
√xt
() )

56 i‡–
sd
->
a˘ive
() )

57 
runSuôe
–*
sd
 );

59 
	gwd
.
ã¨Down
();

61 
åackî
().
ÀaveW‹ld
–
wd
 );

64 
runSuôe
–
SuôeDes¸ùti⁄
 &
sd
 )

66 
SèãGu¨d
 
	gsg
;

68 
åackî
().
íãrSuôe
–
sd
 );

69 i‡–
	gsd
.
£tUp
() ) {

70  
Te°Des¸ùti⁄
 *
	gtd
 = 
sd
.
fú°Te°
();Åd;Åd = 
td
->
√xt
() )

71 i‡–
td
->
a˘ive
() )

72 
runTe°
–*
td
 );

74 
	gsd
.
ã¨Down
();

76 
åackî
().
ÀaveSuôe
–
sd
 );

79 
runTe°
–
Te°Des¸ùti⁄
 &
td
 )

81 
SèãGu¨d
 
	gsg
;

83 
åackî
().
íãrTe°
–
td
 );

84 i‡–
	gtd
.
£tUp
() ) {

85 
	gtd
.
run
();

86 
	gtd
.
ã¨Down
();

88 
åackî
().
ÀaveTe°
–
td
 );

91 ˛as†
	cSèãGu¨d


93 #ifde‡
_CXXTEST_HAVE_EH


94 
boﬁ
 
	g_ab‹tTe°OnFaû
;

96 
	g_maxDumpSize
;

98 
	gpublic
:

99 
SèãGu¨d
()

101 #ifde‡
_CXXTEST_HAVE_EH


102 
_ab‹tTe°OnFaû
 = 
ab‹tTe°OnFaû
();

104 
	g_maxDumpSize
 = 
maxDumpSize
();

107 ~
SèãGu¨d
()

109 #ifde‡
_CXXTEST_HAVE_EH


110 
£tAb‹tTe°OnFaû
–
_ab‹tTe°OnFaû
 );

112 
£tMaxDumpSize
–
_maxDumpSize
 );

116 ˛as†
	cW‹ldGu¨d
 : 
public
 
SèãGu¨d


118 
public
:

119 
W‹ldGu¨d
(Ë: 
SèãGu¨d
()

121 #ifde‡
_CXXTEST_HAVE_EH


122 
£tAb‹tTe°OnFaû
–
CXXTEST_DEFAULT_ABORT
 );

124 
£tMaxDumpSize
–
CXXTEST_MAX_DUMP_SIZE
 );

132 
öôülize
();

	@tools/cxxtest/cxxtest/TestSuite.cpp

12 #i‚de‡
__cxxã°__Te°Suôe_˝p__


13 
	#__cxxã°__Te°Suôe_˝p__


	)

15 
	~<cxxã°/Te°Suôe.h
>

16 #i‡
deföed
(
_CXXTEST_HAVE_STD
)

17 
	~<f°ªam
>

20 
«me•a˚
 
	gCxxTe°


25 
	gTe°Suôe
::~
Te°Suôe
() {}

26 
Te°Suôe
::
£tUp
() {}

27 
Te°Suôe
::
ã¨Down
() {}

32 
boﬁ
 
cuºítAb‹tTe°OnFaû
 = 
Ál£
;

34 
boﬁ
 
ab‹tTe°OnFaû
()

36  
	gcuºítAb‹tTe°OnFaû
;

39 
£tAb‹tTe°OnFaû
–
boﬁ
 
vÆue
 )

41 
	gcuºítAb‹tTe°OnFaû
 = 
vÆue
;

44 
doAb‹tTe°
()

46 #i‡
deföed
(
_CXXTEST_HAVE_EH
)

47 i‡–
	gcuºítAb‹tTe°OnFaû
 )

48 
throw
 
Ab‹tTe°
();

55 
	gcuºítMaxDumpSize
 = 
CXXTEST_MAX_DUMP_SIZE
;

57 
maxDumpSize
()

59  
	gcuºítMaxDumpSize
;

62 
£tMaxDumpSize
–
vÆue
 )

64 
	gcuºítMaxDumpSize
 = 
vÆue
;

70 
doTø˚
–c⁄° *
fûe
, 
löe
, c⁄° *
mesßge
 )

72 i‡(
åackî
().
	g¥öt_åacög
) {

73 
åackî
().
åa˚
–
fûe
, 
löe
, 
mesßge
 );

77 
doW¨n
–c⁄° *
fûe
, 
löe
, c⁄° *
mesßge
 )

79 
åackî
().
w¨nög
–
fûe
, 
löe
, 
mesßge
 );

82 
doFaûTe°
–c⁄° *
fûe
, 
löe
, c⁄° *
mesßge
 )

84 
åackî
().
ÁûedTe°
–
fûe
, 
löe
, 
mesßge
 );

85 
TS_ABORT
();

88 
doFaûAs£π
–c⁄° *
fûe
, 
löe
,

89 c⁄° *
ex¥essi⁄
, c⁄° *
mesßge
 )

91 i‡–
	gmesßge
 )

92 
åackî
().
ÁûedTe°
–
fûe
, 
löe
, 
mesßge
 );

93 
åackî
().
ÁûedAs£π
–
fûe
, 
löe
, 
ex¥essi⁄
 );

94 
TS_ABORT
();

97 
boﬁ
 
ßmeD©a
–c⁄° *
x
, c⁄° *
y
, 
size
 )

99 i‡–
	gsize
 == 0 )

100  
åue
;

102 i‡–
	gx
 =
y
 )

103  
åue
;

105 i‡–!
	gx
 || !
	gy
 )

106  
	gÁl£
;

108 c⁄° *
	gcx
 = (c⁄° *)
x
;

109 c⁄° *
	gcy
 = (c⁄° *)
y
;

110  
	gsize
 -- )

111 i‡–*
	gcx
++ !*
cy
++ )

112  
Ál£
;

114  
	gåue
;

117 
doAs£πSameD©a
–c⁄° *
fûe
, 
löe
,

118 c⁄° *
xEx¥
, c⁄° *
x
,

119 c⁄° *
yEx¥
, c⁄° *
y
,

120 c⁄° *
sizeEx¥
, 
size
,

121 c⁄° *
mesßge
 )

123 i‡–!
ßmeD©a
–
x
, 
y
, 
size
 ) ) {

124 i‡–
	gmesßge
 )

125 
åackî
().
ÁûedTe°
–
fûe
, 
löe
, 
mesßge
 );

126 
åackî
().
ÁûedAs£πSameD©a
–
fûe
, 
löe
, 
xEx¥
, 
yEx¥
, 
sizeEx¥
, 
x
, 
y
, 
size
 );

127 
TS_ABORT
();

132 
boﬁ
 
ßmeFûes
–c⁄° * 
fûe1
, c⁄° * 
fûe2
, 
°d
::
o°rög°ªam
& 
ex∂™©i⁄
)

134 
°d
::
°rög
 
µ¥ev_löe
;

135 
	g°d
::
°rög
 
µªv_löe
;

136 
	g°d
::
°rög
 
¥ev_löe
;

137 
	g°d
::
°rög
 
cuº_löe
;

139 
	g°d
::
if°ªam
 
is1
;

140 
	gis1
.
›í
(
fûe1
);

141 
	g°d
::
if°ªam
 
is2
;

142 
	gis2
.
›í
(
fûe2
);

143 i‡(!
	gis1
) {

144 
	gex∂™©i⁄
 << "Fûê'" << 
	gfûe1
 << "' doesÇotÉxist!";

145  
	gÁl£
;

147 i‡(!
	gis2
) {

148 
	gex∂™©i⁄
 << "Fûê'" << 
	gfûe2
 << "' doesÇotÉxist!";

149  
	gÁl£
;

152 
	g∆öe
=1;

153 
	gc1
, 
	gc2
;

155 
	gis1
.
gë
(
c1
);

156 
	gis2
.
gë
(
c2
);

157 i‡(!
	gis1
 && !
	gis2
Ë 
	gåue
;

158 i‡(!
	gis1
) {

159 
	gex∂™©i⁄
 << "Fûê'" << 
	gfûe1
 << "'Énded bef‹êfûê'" << 
	gfûe2
 << "' (löê" << 
	g∆öe
 << ")";

160 
	gex∂™©i⁄
 << 
	g°d
::
ídl
 << "" << 
µ¥ev_löe
 << 
°d
::íd»<< " " << 
µªv_löe
 << std::íd»<< "" << 
¥ev_löe
 << std::íd»<< "< " << 
cuº_löe
;

161 
	gis1
.
gë
(
c1
);

162 
	gis1
 && (
	gc1
 != '\n')) {

163 
ex∂™©i⁄
 << 
c1
;

164 
	gis1
.
gë
(
c1
);

166 
	gex∂™©i⁄
 << 
	g°d
::
ídl
;

167  
	gÁl£
;

169 i‡(!
	gis2
) {

170 
	gex∂™©i⁄
 << "Fûê'" << 
	gfûe2
 << "'Énded bef‹êfûê'" << 
	gfûe1
 << "' (löê" << 
	g∆öe
 << ")";

171 
	gex∂™©i⁄
 << 
	g°d
::
ídl
 << "" << 
µ¥ev_löe
 << 
°d
::íd»<< " " << 
µªv_löe
 << std::íd»<< "" << 
¥ev_löe
 << std::íd»<< "> " << 
cuº_löe
;

172 
	gis2
.
gë
(
c2
);

173 
	gis2
 && (
	gc2
 != '\n')) {

174 
ex∂™©i⁄
 << 
c2
;

175 
	gis2
.
gë
(
c2
);

177 
	gex∂™©i⁄
 << 
	g°d
::
ídl
;

178  
	gÁl£
;

180 i‡(
	gc1
 !
c2
) {

181 
ex∂™©i⁄
 << "Fûe†'" << 
fûe1
 << "'ánd '" << 
fûe2
 << "' dif„∏©Üöê" << 
∆öe
;

182 
	gex∂™©i⁄
 << 
	g°d
::
ídl
 << "" << 
µ¥ev_löe
 << 
°d
::íd»<< " " << 
µªv_löe
 << std::íd»<< "" << 
¥ev_löe
;

184 
	gex∂™©i⁄
 << 
	g°d
::
ídl
 << "< " << 
cuº_löe
;

185 
	gis2
.
gë
(
c1
);

186 
	gis1
 && (
	gc1
 != '\n')) {

187 
ex∂™©i⁄
 << 
c1
;

188 
	gis2
.
gë
(
c1
);

190 
	gex∂™©i⁄
 << 
	g°d
::
ídl
;

192 
	gex∂™©i⁄
 << 
	g°d
::
ídl
 << "> " << 
cuº_löe
;

193 
	gis2
.
gë
(
c2
);

194 
	gis2
 && (
	gc2
 != '\n')) {

195 
ex∂™©i⁄
 << 
c2
;

196 
	gis2
.
gë
(
c2
);

198 
	gex∂™©i⁄
 << 
	g°d
::
ídl
;

200  
	gÁl£
;

202 i‡(
	gc1
 == '\n') {

203 
µ¥ev_löe
 = 
µªv_löe
;

204 
	gµªv_löe
 = 
¥ev_löe
;

205 
	g¥ev_löe
 = 
cuº_löe
;

206 
	gcuº_löe
 = "";

207 
	g∆öe
++;

210 
	gcuº_löe
 +
c1
;

216 
doAs£πSameFûes
–c⁄° * 
fûe
, 
löe
,

217 c⁄° * 
fûe1
, c⁄° * 
fûe2
,

218 c⁄° * 
mesßge
)

220 #i‡
deföed
(
_CXXTEST_HAVE_STD
)

221 
	g°d
::
o°rög°ªam
 
ex∂™©i⁄
;

222 i‡–!
ßmeFûes
–
fûe1
, 
fûe2
, 
ex∂™©i⁄
 ) ) {

223 i‡–
	gmesßge
 )

224 
åackî
().
ÁûedTe°
–
fûe
, 
löe
, 
mesßge
 );

225 
åackî
().
ÁûedAs£πSameFûes
–
fûe
, 
löe
, 
fûe1
, 
fûe2
, 
ex∂™©i⁄
.
°r
().
c_°r
());

226 
TS_ABORT
();

229 
åackî
().
ÁûedAs£πSameFûes
–
fûe
, 
löe
, 
fûe1
, 
fûe2
, "ThisÅest is only supported when --have-std isÉnabled");

230 
TS_ABORT
();

234 
doFaûAs£πThrows
–c⁄° *
fûe
, 
löe
,

235 c⁄° *
ex¥
, c⁄° *
ty≥
,

236 
boﬁ
 
ŸhîThrown
,

237 c⁄° *
mesßge
,

238 c⁄° *
ex˚±i⁄
 )

240 i‡–
	gex˚±i⁄
 )

241 
åackî
().
ÁûedTe°
–
fûe
, 
löe
, 
ex˚±i⁄
 );

242 i‡–
	gmesßge
 )

243 
åackî
().
ÁûedTe°
–
fûe
, 
löe
, 
mesßge
 );

245 
åackî
().
ÁûedAs£πThrows
–
fûe
, 
löe
, 
ex¥
, 
ty≥
, 
ŸhîThrown
 );

246 
TS_ABORT
();

249 
doFaûAs£πThrowsNŸ
–c⁄° *
fûe
, 
löe
,

250 c⁄° *
ex¥essi⁄
, c⁄° *
mesßge
,

251 c⁄° *
ex˚±i⁄
 )

253 i‡–
	gex˚±i⁄
 )

254 
åackî
().
ÁûedTe°
–
fûe
, 
löe
, 
ex˚±i⁄
 );

255 i‡–
	gmesßge
 )

256 
åackî
().
ÁûedTe°
–
fûe
, 
löe
, 
mesßge
 );

258 
åackî
().
ÁûedAs£πThrowsNŸ
–
fûe
, 
löe
, 
ex¥essi⁄
 );

259 
TS_ABORT
();

	@tools/cxxtest/cxxtest/TestSuite.h

12 #i‚de‡
__cxxã°__Te°Suôe_h__


13 
	#__cxxã°__Te°Suôe_h__


	)

21 
	~<cxxã°/Fœgs.h
>

22 
	~<cxxã°/Te°Tøckî.h
>

23 
	~<cxxã°/Des¸ùti⁄s.h
>

24 
	~<cxxã°/VÆueTøôs.h
>

25 
	~<s°ªam
>

27 #i‡
deföed
(
_CXXTEST_HAVE_STD
)

28 
	~<°dex˚±
>

31 
«me•a˚
 
	gCxxTe°


33 ˛as†
	cTe°Suôe


35 
	gpublic
:

36 
vútuÆ
 ~
Te°Suôe
();

37 
vútuÆ
 
£tUp
();

38 
vútuÆ
 
ã¨Down
();

41 ˛as†
	cAb‹tTe°
 {};

42 
doAb‹tTe°
();

43 
	#TS_ABORT
(Ë
CxxTe°
::
	$doAb‹tTe°
()

	)

45 
boﬁ
 
	`ab‹tTe°OnFaû
();

46 
	`£tAb‹tTe°OnFaû
–
boﬁ
 
vÆue
 = 
CXXTEST_DEFAULT_ABORT
 );

48 
	`maxDumpSize
();

49 
	`£tMaxDumpSize
–
vÆue
 = 
CXXTEST_MAX_DUMP_SIZE
 );

51 
	`doTø˚
–c⁄° *
fûe
, 
löe
, c⁄° *
mesßge
 );

52 
	`doW¨n
–c⁄° *
fûe
, 
löe
, c⁄° *
mesßge
 );

53 
	`doFaûTe°
–c⁄° *
fûe
, 
löe
, c⁄° *
mesßge
 );

54 
	`doFaûAs£π
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
, c⁄° *
mesßge
 );

56 
ãm∂©e
<
˛ass
 
X
, cœs†
Y
>

57 
	sequÆs
 {

58 
boﬁ
 
	`ã°
–
X
 
x
, 
Y
 
y
 )

60  (
x
 =
y
);

62 
	}
};

64 
	gãm∂©e
<
˛ass
 
	gX
, cœs†
	gY
>

65 
	$doAs£πEquÆs
–c⁄° *
fûe
, 
löe
,

66 c⁄° *
xEx¥
, 
X
 
x
,

67 c⁄° *
yEx¥
, 
Y
 
y
,

68 c⁄° *
mesßge
 )

70 i‡–!
equÆs
<
X
,
Y
>::
	`ã°
–
x
, 
y
 ) ) {

71 i‡–
mesßge
 )

72 
	`åackî
().
	`ÁûedTe°
–
fûe
, 
löe
, 
mesßge
 );

73 
	`åackî
().
	`ÁûedAs£πEquÆs
–
fûe
, 
löe
, 
xEx¥
, 
yEx¥
, 
	`TS_AS_STRING
(
x
), TS_AS_STRING(
y
) );

74 
	`TS_ABORT
();

76 
	}
}

78 
boﬁ
 
ßmeD©a
–c⁄° *
x
, c⁄° *
y
, 
size
 );

80 
doAs£πSameD©a
–c⁄° *
fûe
, 
löe
,

81 c⁄° *
xEx¥
, c⁄° *
x
,

82 c⁄° *
yEx¥
, c⁄° *
y
,

83 c⁄° *
sizeEx¥
, 
size
,

84 c⁄° *
mesßge
 );

87 
boﬁ
 
ßmeFûes
–c⁄° * 
fûe1
, c⁄° * 
fûe2
, 
°d
::
o°rög°ªam
& 
ex∂™©i⁄
);

90 
	gãm∂©e
<
˛ass
 
	gX
, cœs†
	gY
>

91 
	sdif„rs
 {

92 
boﬁ
 
ã°
–
X
 
x
, 
Y
 
y
 )

94  !(
	gx
 =
y
);

98 
	gãm∂©e
<
˛ass
 
	gX
, cœs†
	gY
>

99 
	$doAs£πDif„rs
–c⁄° *
fûe
, 
löe
,

100 c⁄° *
xEx¥
, 
X
 
x
,

101 c⁄° *
yEx¥
, 
Y
 
y
,

102 c⁄° *
mesßge
 )

104 i‡–!
dif„rs
<
X
,
Y
>::
	`ã°
–
x
, 
y
 ) ) {

105 i‡–
mesßge
 )

106 
	`åackî
().
	`ÁûedTe°
–
fûe
, 
löe
, 
mesßge
 );

107 
	`åackî
().
	`ÁûedAs£πDif„rs
–
fûe
, 
löe
, 
xEx¥
, 
yEx¥
, 
	`TS_AS_STRING
(
x
) );

108 
	`TS_ABORT
();

110 
	}
}

112 
	gãm∂©e
<
˛ass
 
	gX
, cœs†
	gY
>

113 
	sÀssTh™
 {

114 
boﬁ
 
ã°
–
X
 
x
, 
Y
 
y
 )

116  (
	gx
 < 
	gy
);

120 
	gãm∂©e
<
˛ass
 
	gX
, cœs†
	gY
>

121 
	$doAs£πLessTh™
–c⁄° *
fûe
, 
löe
,

122 c⁄° *
xEx¥
, 
X
 
x
,

123 c⁄° *
yEx¥
, 
Y
 
y
,

124 c⁄° *
mesßge
 )

126 i‡–!
ÀssTh™
<
X
,
Y
>::
	`ã°
(
x
, 
y
) ) {

127 i‡–
mesßge
 )

128 
	`åackî
().
	`ÁûedTe°
–
fûe
, 
löe
, 
mesßge
 );

129 
	`åackî
().
	`ÁûedAs£πLessTh™
–
fûe
, 
löe
, 
xEx¥
, 
yEx¥
, 
	`TS_AS_STRING
(
x
), TS_AS_STRING(
y
) );

130 
	`TS_ABORT
();

132 
	}
}

134 
	gãm∂©e
<
˛ass
 
	gX
, cœs†
	gY
>

135 
	sÀssTh™EquÆs
 {

136 
boﬁ
 
ã°
–
X
 
x
, 
Y
 
y
 )

138  (
	gx
 <
y
);

142 
	gãm∂©e
<
˛ass
 
	gX
, cœs†
	gY
>

143 
	$doAs£πLessTh™EquÆs
–c⁄° *
fûe
, 
löe
,

144 c⁄° *
xEx¥
, 
X
 
x
,

145 c⁄° *
yEx¥
, 
Y
 
y
,

146 c⁄° *
mesßge
 )

148 i‡–!
ÀssTh™EquÆs
<
X
,
Y
>::
	`ã°
–
x
, 
y
 ) ) {

149 i‡–
mesßge
 )

150 
	`åackî
().
	`ÁûedTe°
–
fûe
, 
löe
, 
mesßge
 );

151 
	`åackî
().
	`ÁûedAs£πLessTh™EquÆs
–
fûe
, 
löe
, 
xEx¥
, 
yEx¥
, 
	`TS_AS_STRING
(
x
), TS_AS_STRING(
y
) );

152 
	`TS_ABORT
();

154 
	}
}

156 
	gãm∂©e
<
˛ass
 
	gX
, cœs†
	gP
>

157 
	$doAs£πPªdiˇã
–c⁄° *
fûe
, 
löe
,

158 c⁄° *
pEx¥
, c⁄° 
P
 &
p
,

159 c⁄° *
xEx¥
, 
X
 
x
,

160 c⁄° *
mesßge
 )

162 i‡–!
	`p
–
x
 ) ) {

163 i‡–
mesßge
 )

164 
	`åackî
().
	`ÁûedTe°
–
fûe
, 
löe
, 
mesßge
 );

165 
	`åackî
().
	`ÁûedAs£πPªdiˇã
–
fûe
, 
löe
, 
pEx¥
, 
xEx¥
, 
	`TS_AS_STRING
(
x
) );

166 
	`TS_ABORT
();

168 
	}
}

170 
	gãm∂©e
<
˛ass
 
	gX
, cœs†
	gY
, cœs†
	gR
>

171 
	$doAs£πRñ©i⁄
–c⁄° *
fûe
, 
löe
,

172 c⁄° *
rEx¥
, c⁄° 
R
 &
r
,

173 c⁄° *
xEx¥
, 
X
 
x
,

174 c⁄° *
yEx¥
, 
Y
 
y
,

175 c⁄° *
mesßge
 )

177 i‡–!
	`r
–
x
, 
y
 ) ) {

178 i‡–
mesßge
 )

179 
	`åackî
().
	`ÁûedTe°
–
fûe
, 
löe
, 
mesßge
 );

180 
	`åackî
().
	`ÁûedAs£πRñ©i⁄
–
fûe
, 
löe
, 
rEx¥
, 
xEx¥
, 
yEx¥
, 
	`TS_AS_STRING
(
x
), TS_AS_STRING(
y
) );

181 
	`TS_ABORT
();

183 
	}
}

187 
	gãm∂©e
<
˛ass
 
	gX
, cœs†
	gY
>

188 
boﬁ
 
	$dñè_À_hñ≥r
–
X
 
x
, 
Y
 
y
 )

190  
ÀssTh™EquÆs
<
X
,
Y
>::
	`ã°
(
x
,
y
);

191 
	}
}

193 
	gãm∂©e
<
˛ass
 
	gX
, cœs†
	gY
, cœs†
	gD
>

194 
	sdñè
 {

195 
boﬁ
 
ã°
–
X
 
x
, 
Y
 
y
, 
D
 
d
 )

197  
dñè_À_hñ≥r
(
x
-
d
, 
y
) && delta_le_helper(y, x+d);

202 
	gãm∂©e
<
˛ass
 
	gX
, cœs†
	gY
, cœs†
	gD
>

203 
	$doAs£πDñè
–c⁄° *
fûe
, 
löe
,

204 c⁄° *
xEx¥
, 
X
 
x
,

205 c⁄° *
yEx¥
, 
Y
 
y
,

206 c⁄° *
dEx¥
, 
D
 
d
,

207 c⁄° *
mesßge
 )

209 i‡–!
dñè
<
X
,
Y
,
D
>::
	`ã°
–
x
, 
y
, 
d
 ) ) {

210 i‡–
mesßge
 )

211 
	`åackî
().
	`ÁûedTe°
–
fûe
, 
löe
, 
mesßge
 );

213 
	`åackî
().
	`ÁûedAs£πDñè
–
fûe
, 
löe
, 
xEx¥
, 
yEx¥
, 
dEx¥
,

214 
	`TS_AS_STRING
(
x
), TS_AS_STRING(
y
), TS_AS_STRING(
d
) );

215 
	`TS_ABORT
();

217 
	}
}

219 
doFaûAs£πThrows
–c⁄° *
fûe
, 
löe
,

220 c⁄° *
ex¥
, c⁄° *
ty≥
,

221 
boﬁ
 
ŸhîThrown
,

222 c⁄° *
mesßge
,

223 c⁄° *
ex˚±i⁄
 = 0 );

225 
doFaûAs£πThrowsNŸ
–c⁄° *
fûe
, 
löe
,

226 c⁄° *
ex¥essi⁄
, c⁄° *
mesßge
,

227 c⁄° *
ex˚±i⁄
 = 0 );

229 
doAs£πSameFûes
–c⁄° * 
fûe
, 
löe
,

230 c⁄° * 
fûe1
, c⁄° * 
fûe2
,

231 c⁄° * 
mesßge
);

233 #ifde‡
_CXXTEST_HAVE_EH


234 
	#_TS_TRY
 
åy


	)

235 
	#_TS_CATCH_TYPE
(
t
, 
b
Ë
ˇtch
Å 
	)
b

236 
	#_TS_CATCH_ABORT
(
b
Ë
	`_TS_CATCH_TYPE
–(c⁄° 
CxxTe°
::
Ab‹tTe°
 &), b )

	)

237 
	#_TS_LAST_CATCH
(
b
Ë
	`_TS_CATCH_TYPE
–(...), b )

	)

238 
	#_TSM_LAST_CATCH
(
f
,
l
,
m
Ë
	`_TS_LAST_CATCH
–{ (
CxxTe°
::
	`åackî
()).
	`ÁûedTe°
(f,l,m); 
	`TS_ABORT
(); } )

	)

239 #ifde‡
_CXXTEST_HAVE_STD


240 
	#_TS_CATCH_STD
(
e
,
b
Ë
	`_TS_CATCH_TYPE
–(c⁄° 
°d
::
ex˚±i⁄
&É), b )

	)

242 
	#_TS_CATCH_STD
(
e
,
b
)

	)

244 
	#___TSM_CATCH
(
f
,
l
,
m
) \

245 
	`_TS_CATCH_STD
(
e
, { (
CxxTe°
::
	`åackî
()).
	`ÁûedTe°
(
f
,
l
,e.
	`wh©
()); 
	`TS_ABORT
(); }) \

246 
	$_TSM_LAST_CATCH
(
f
,
l
,
m
)

	)

247 
	#__TSM_CATCH
(
f
,
l
,
m
) \

248 
	`_TS_CATCH_ABORT
–{ 
throw
; 
	}
} ) \

249 
	$___TSM_CATCH
(
f
,
l
,
m
)

	)

250 
	#__TS_CATCH
(
f
,
l
Ë
	`__TSM_CATCH
(f,l,"Unh™dÀdÉx˚±i⁄")

	)

251 
	#_TS_CATCH
 
	$__TS_CATCH
(
__FILE__
,
__LINE__
)

	)

253 
	#_TS_TRY


	)

254 
	#___TSM_CATCH
(
f
,
l
,
m
)

	)

255 
	#__TSM_CATCH
(
f
,
l
,
m
)

	)

256 
	#__TS_CATCH
(
f
,
l
)

	)

257 
	#_TS_CATCH


	)

258 
	#_TS_CATCH_TYPE
(
t
, 
b
)

	)

259 
	#_TS_LAST_CATCH
(
b
)

	)

260 
	#_TS_CATCH_STD
(
e
,
b
)

	)

261 
	#_TS_CATCH_ABORT
(
b
)

	)

265 
	#_TS_TRACE
(
f
,
l
,
e
Ë
CxxTe°
::
	`doTø˚
–(f), (l), 
	$TS_AS_STRING
(
e
Ë)

	)

266 
	#TS_TRACE
(
e
Ë
	$_TS_TRACE
–
__FILE__
, 
__LINE__
, 
e
 )

	)

269 
	#_TS_WARN
(
f
,
l
,
e
Ë
CxxTe°
::
	`doW¨n
–(f), (l), 
	$TS_AS_STRING
(
e
Ë)

	)

270 
	#TS_WARN
(
e
Ë
	$_TS_WARN
–
__FILE__
, 
__LINE__
, 
e
 )

	)

273 
	#_TS_FAIL
(
f
,
l
,
e
Ë
CxxTe°
::
	`doFaûTe°
–(f), (l), 
	$TS_AS_STRING
(
e
Ë)

	)

274 
	#TS_FAIL
(
e
Ë
	$_TS_FAIL
–
__FILE__
, 
__LINE__
, 
e
 )

	)

277 
	#___ETS_ASSERT
(
f
,
l
,
e
,
m
Ë{ i‡–!”ËË
CxxTe°
::
	`doFaûAs£π
–(f), (l), #e, (mË); 
	}

	)
}

278 
	#___TS_ASSERT
(
f
,
l
,
e
,
m
Ë{ 
_TS_TRY
 { 
	`___ETS_ASSERT
(f,l,e,m); } 
	`__TS_CATCH
(f,lË}

	)

280 
	#_ETS_ASSERT
(
f
,
l
,
e
Ë
	$___ETS_ASSERT
(
f
,
l
,
e
,0)

	)

281 
	#_TS_ASSERT
(
f
,
l
,
e
Ë
	$___TS_ASSERT
(
f
,
l
,
e
,0)

	)

283 
	#ETS_ASSERT
(
e
Ë
	$_ETS_ASSERT
(
__FILE__
,
__LINE__
,
e
)

	)

284 
	#TS_ASSERT
(
e
Ë
	$_TS_ASSERT
(
__FILE__
,
__LINE__
,
e
)

	)

286 
	#_ETSM_ASSERT
(
f
,
l
,
m
,
e
Ë
	`___ETS_ASSERT
(f,l,e,
	$TS_AS_STRING
(
m
Ë)

	)

287 
	#_TSM_ASSERT
(
f
,
l
,
m
,
e
Ë
	`___TS_ASSERT
(f,l,e,
	$TS_AS_STRING
(
m
Ë)

	)

289 
	#ETSM_ASSERT
(
m
,
e
Ë
	$_ETSM_ASSERT
(
__FILE__
,
__LINE__
,
m
,
e
)

	)

290 
	#TSM_ASSERT
(
m
,
e
Ë
	$_TSM_ASSERT
(
__FILE__
,
__LINE__
,
m
,
e
)

	)

293 
	#___ETS_ASSERT_EQUALS
(
f
,
l
,
x
,
y
,
m
Ë
CxxTe°
::
	`doAs£πEquÆs
–(f), (l), #x, (x), #y, (y), (mË)

	)

294 
	#___TS_ASSERT_EQUALS
(
f
,
l
,
x
,
y
,
m
Ë{ 
_TS_TRY
 { 
	`___ETS_ASSERT_EQUALS
(f,l,x,y,m); } 
	`__TS_CATCH
(f,lË
	}

	)
}

296 
	#_ETS_ASSERT_EQUALS
(
f
,
l
,
x
,
y
Ë
	$___ETS_ASSERT_EQUALS
(
f
,
l
,
x
,
y
,0)

	)

297 
	#_TS_ASSERT_EQUALS
(
f
,
l
,
x
,
y
Ë
	$___TS_ASSERT_EQUALS
(
f
,
l
,
x
,
y
,0)

	)

299 
	#ETS_ASSERT_EQUALS
(
x
,
y
Ë
	$_ETS_ASSERT_EQUALS
(
__FILE__
,
__LINE__
,
x
,
y
)

	)

300 
	#TS_ASSERT_EQUALS
(
x
,
y
Ë
	$_TS_ASSERT_EQUALS
(
__FILE__
,
__LINE__
,
x
,
y
)

	)

302 
	#_ETSM_ASSERT_EQUALS
(
f
,
l
,
m
,
x
,
y
Ë
	`___ETS_ASSERT_EQUALS
(f,l,x,y,
	$TS_AS_STRING
(
m
))

	)

303 
	#_TSM_ASSERT_EQUALS
(
f
,
l
,
m
,
x
,
y
Ë
	`___TS_ASSERT_EQUALS
(f,l,x,y,
	$TS_AS_STRING
(
m
))

	)

305 
	#ETSM_ASSERT_EQUALS
(
m
,
x
,
y
Ë
	$_ETSM_ASSERT_EQUALS
(
__FILE__
,
__LINE__
,
m
,
x
,
y
)

	)

306 
	#TSM_ASSERT_EQUALS
(
m
,
x
,
y
Ë
	$_TSM_ASSERT_EQUALS
(
__FILE__
,
__LINE__
,
m
,
x
,
y
)

	)

309 
	#___ETS_ASSERT_SAME_DATA
(
f
,
l
,
x
,
y
,
s
,
m
Ë
CxxTe°
::
	`doAs£πSameD©a
–(f), (l), #x, (x), #y, (y), #s, (s), (mË)

	)

310 
	#___TS_ASSERT_SAME_DATA
(
f
,
l
,
x
,
y
,
s
,
m
Ë{ 
_TS_TRY
 { 
	`___ETS_ASSERT_SAME_DATA
(f,l,x,y,s,m); } 
	`__TS_CATCH
(f,lË
	}

	)
}

312 
	#_ETS_ASSERT_SAME_DATA
(
f
,
l
,
x
,
y
,
s
Ë
	$___ETS_ASSERT_SAME_DATA
(
f
,
l
,
x
,
y
,
s
,0)

	)

313 
	#_TS_ASSERT_SAME_DATA
(
f
,
l
,
x
,
y
,
s
Ë
	$___TS_ASSERT_SAME_DATA
(
f
,
l
,
x
,
y
,
s
,0)

	)

315 
	#ETS_ASSERT_SAME_DATA
(
x
,
y
,
s
Ë
	$_ETS_ASSERT_SAME_DATA
(
__FILE__
,
__LINE__
,
x
,
y
,
s
)

	)

316 
	#TS_ASSERT_SAME_DATA
(
x
,
y
,
s
Ë
	$_TS_ASSERT_SAME_DATA
(
__FILE__
,
__LINE__
,
x
,
y
,
s
)

	)

318 
	#_ETSM_ASSERT_SAME_DATA
(
f
,
l
,
m
,
x
,
y
,
s
Ë
	`___ETS_ASSERT_SAME_DATA
(f,l,x,y,s,
	$TS_AS_STRING
(
m
))

	)

319 
	#_TSM_ASSERT_SAME_DATA
(
f
,
l
,
m
,
x
,
y
,
s
Ë
	`___TS_ASSERT_SAME_DATA
(f,l,x,y,s,
	$TS_AS_STRING
(
m
))

	)

321 
	#ETSM_ASSERT_SAME_DATA
(
m
,
x
,
y
,
s
Ë
	$_ETSM_ASSERT_SAME_DATA
(
__FILE__
,
__LINE__
,
m
,
x
,
y
,
s
)

	)

322 
	#TSM_ASSERT_SAME_DATA
(
m
,
x
,
y
,
s
Ë
	$_TSM_ASSERT_SAME_DATA
(
__FILE__
,
__LINE__
,
m
,
x
,
y
,
s
)

	)

325 
	#___ETS_ASSERT_DIFFERS
(
f
,
l
,
x
,
y
,
m
Ë
CxxTe°
::
	`doAs£πDif„rs
–(f), (l), #x, (x), #y, (y), (mË)

	)

326 
	#___TS_ASSERT_DIFFERS
(
f
,
l
,
x
,
y
,
m
Ë{ 
_TS_TRY
 { 
	`___ETS_ASSERT_DIFFERS
(f,l,x,y,m); } 
	`__TS_CATCH
(f,lË
	}

	)
}

328 
	#_ETS_ASSERT_DIFFERS
(
f
,
l
,
x
,
y
Ë
	$___ETS_ASSERT_DIFFERS
(
f
,
l
,
x
,
y
,0)

	)

329 
	#_TS_ASSERT_DIFFERS
(
f
,
l
,
x
,
y
Ë
	$___TS_ASSERT_DIFFERS
(
f
,
l
,
x
,
y
,0)

	)

331 
	#ETS_ASSERT_DIFFERS
(
x
,
y
Ë
	$_ETS_ASSERT_DIFFERS
(
__FILE__
,
__LINE__
,
x
,
y
)

	)

332 
	#TS_ASSERT_DIFFERS
(
x
,
y
Ë
	$_TS_ASSERT_DIFFERS
(
__FILE__
,
__LINE__
,
x
,
y
)

	)

334 
	#_ETSM_ASSERT_DIFFERS
(
f
,
l
,
m
,
x
,
y
Ë
	`___ETS_ASSERT_DIFFERS
(f,l,x,y,
	$TS_AS_STRING
(
m
))

	)

335 
	#_TSM_ASSERT_DIFFERS
(
f
,
l
,
m
,
x
,
y
Ë
	`___TS_ASSERT_DIFFERS
(f,l,x,y,
	$TS_AS_STRING
(
m
))

	)

337 
	#ETSM_ASSERT_DIFFERS
(
m
,
x
,
y
Ë
	$_ETSM_ASSERT_DIFFERS
(
__FILE__
,
__LINE__
,
m
,
x
,
y
)

	)

338 
	#TSM_ASSERT_DIFFERS
(
m
,
x
,
y
Ë
	$_TSM_ASSERT_DIFFERS
(
__FILE__
,
__LINE__
,
m
,
x
,
y
)

	)

341 
	#___ETS_ASSERT_LESS_THAN
(
f
,
l
,
x
,
y
,
m
Ë
CxxTe°
::
	`doAs£πLessTh™
–(f), (l), #x, (x), #y, (y), (mË)

	)

342 
	#___TS_ASSERT_LESS_THAN
(
f
,
l
,
x
,
y
,
m
Ë{ 
_TS_TRY
 { 
	`___ETS_ASSERT_LESS_THAN
(f,l,x,y,m); } 
	`__TS_CATCH
(f,lË
	}

	)
}

344 
	#_ETS_ASSERT_LESS_THAN
(
f
,
l
,
x
,
y
Ë
	$___ETS_ASSERT_LESS_THAN
(
f
,
l
,
x
,
y
,0)

	)

345 
	#_TS_ASSERT_LESS_THAN
(
f
,
l
,
x
,
y
Ë
	$___TS_ASSERT_LESS_THAN
(
f
,
l
,
x
,
y
,0)

	)

347 
	#ETS_ASSERT_LESS_THAN
(
x
,
y
Ë
	$_ETS_ASSERT_LESS_THAN
(
__FILE__
,
__LINE__
,
x
,
y
)

	)

348 
	#TS_ASSERT_LESS_THAN
(
x
,
y
Ë
	$_TS_ASSERT_LESS_THAN
(
__FILE__
,
__LINE__
,
x
,
y
)

	)

350 
	#_ETSM_ASSERT_LESS_THAN
(
f
,
l
,
m
,
x
,
y
Ë
	`___ETS_ASSERT_LESS_THAN
(f,l,x,y,
	$TS_AS_STRING
(
m
))

	)

351 
	#_TSM_ASSERT_LESS_THAN
(
f
,
l
,
m
,
x
,
y
Ë
	`___TS_ASSERT_LESS_THAN
(f,l,x,y,
	$TS_AS_STRING
(
m
))

	)

353 
	#ETSM_ASSERT_LESS_THAN
(
m
,
x
,
y
Ë
	$_ETSM_ASSERT_LESS_THAN
(
__FILE__
,
__LINE__
,
m
,
x
,
y
)

	)

354 
	#TSM_ASSERT_LESS_THAN
(
m
,
x
,
y
Ë
	$_TSM_ASSERT_LESS_THAN
(
__FILE__
,
__LINE__
,
m
,
x
,
y
)

	)

357 
	#___ETS_ASSERT_LESS_THAN_EQUALS
(
f
,
l
,
x
,
y
,
m
) \

358 
CxxTe°
::
	`doAs£πLessTh™EquÆs
–(
f
), (
l
), #x, (
x
), #y, (
y
), (
m
Ë)

	)

359 
	#___TS_ASSERT_LESS_THAN_EQUALS
(
f
,
l
,
x
,
y
,
m
) \

360 { 
_TS_TRY
 { 
	`___ETS_ASSERT_LESS_THAN_EQUALS
(
f
,
l
,
x
,
y
,
m
); } 
	`__TS_CATCH
(f,lË
	}

	)
}

362 
	#_ETS_ASSERT_LESS_THAN_EQUALS
(
f
,
l
,
x
,
y
Ë
	$___ETS_ASSERT_LESS_THAN_EQUALS
(
f
,
l
,
x
,
y
,0)

	)

363 
	#_TS_ASSERT_LESS_THAN_EQUALS
(
f
,
l
,
x
,
y
Ë
	$___TS_ASSERT_LESS_THAN_EQUALS
(
f
,
l
,
x
,
y
,0)

	)

365 
	#ETS_ASSERT_LESS_THAN_EQUALS
(
x
,
y
Ë
	$_ETS_ASSERT_LESS_THAN_EQUALS
(
__FILE__
,
__LINE__
,
x
,
y
)

	)

366 
	#TS_ASSERT_LESS_THAN_EQUALS
(
x
,
y
Ë
	$_TS_ASSERT_LESS_THAN_EQUALS
(
__FILE__
,
__LINE__
,
x
,
y
)

	)

368 
	#_ETSM_ASSERT_LESS_THAN_EQUALS
(
f
,
l
,
m
,
x
,
y
Ë
	`___ETS_ASSERT_LESS_THAN_EQUALS
(f,l,x,y,
	$TS_AS_STRING
(
m
))

	)

369 
	#_TSM_ASSERT_LESS_THAN_EQUALS
(
f
,
l
,
m
,
x
,
y
Ë
	`___TS_ASSERT_LESS_THAN_EQUALS
(f,l,x,y,
	$TS_AS_STRING
(
m
))

	)

371 
	#ETSM_ASSERT_LESS_THAN_EQUALS
(
m
,
x
,
y
Ë
	$_ETSM_ASSERT_LESS_THAN_EQUALS
(
__FILE__
,
__LINE__
,
m
,
x
,
y
)

	)

372 
	#TSM_ASSERT_LESS_THAN_EQUALS
(
m
,
x
,
y
Ë
	$_TSM_ASSERT_LESS_THAN_EQUALS
(
__FILE__
,
__LINE__
,
m
,
x
,
y
)

	)

375 
	#___ETS_ASSERT_PREDICATE
(
f
,
l
,
p
,
x
,
m
) \

376 
CxxTe°
::
	`doAs£πPªdiˇã
–(
f
), (
l
), #p, 
	`p
(), #x, (
x
), (
m
Ë)

	)

377 
	#___TS_ASSERT_PREDICATE
(
f
,
l
,
p
,
x
,
m
) \

378 { 
_TS_TRY
 { 
	`___ETS_ASSERT_PREDICATE
(
f
,
l
,
p
,
x
,
m
); } 
	`__TS_CATCH
(f,lË
	}

	)
}

380 
	#_ETS_ASSERT_PREDICATE
(
f
,
l
,
p
,
x
Ë
	$___ETS_ASSERT_PREDICATE
(
f
,
l
,
p
,
x
,0)

	)

381 
	#_TS_ASSERT_PREDICATE
(
f
,
l
,
p
,
x
Ë
	$___TS_ASSERT_PREDICATE
(
f
,
l
,
p
,
x
,0)

	)

383 
	#ETS_ASSERT_PREDICATE
(
p
,
x
Ë
	$_ETS_ASSERT_PREDICATE
(
__FILE__
,
__LINE__
,
p
,
x
)

	)

384 
	#TS_ASSERT_PREDICATE
(
p
,
x
Ë
	$_TS_ASSERT_PREDICATE
(
__FILE__
,
__LINE__
,
p
,
x
)

	)

386 
	#_ETSM_ASSERT_PREDICATE
(
f
,
l
,
m
,
p
,
x
Ë
	`___ETS_ASSERT_PREDICATE
(f,l,p,x,
	$TS_AS_STRING
(
m
))

	)

387 
	#_TSM_ASSERT_PREDICATE
(
f
,
l
,
m
,
p
,
x
Ë
	`___TS_ASSERT_PREDICATE
(f,l,p,x,
	$TS_AS_STRING
(
m
))

	)

389 
	#ETSM_ASSERT_PREDICATE
(
m
,
p
,
x
Ë
	$_ETSM_ASSERT_PREDICATE
(
__FILE__
,
__LINE__
,
m
,
p
,
x
)

	)

390 
	#TSM_ASSERT_PREDICATE
(
m
,
p
,
x
Ë
	$_TSM_ASSERT_PREDICATE
(
__FILE__
,
__LINE__
,
m
,
p
,
x
)

	)

393 
	#___ETS_ASSERT_RELATION
(
f
,
l
,
r
,
x
,
y
,
m
) \

394 
CxxTe°
::
	`doAs£πRñ©i⁄
–(
f
), (
l
), #r, 
	`r
(), #x, (
x
), #y, (
y
), (
m
Ë)

	)

395 
	#___TS_ASSERT_RELATION
(
f
,
l
,
r
,
x
,
y
,
m
) \

396 { 
_TS_TRY
 { 
	`___ETS_ASSERT_RELATION
(
f
,
l
,
r
,
x
,
y
,
m
); } 
	`__TS_CATCH
(f,lË
	}

	)
}

398 
	#_ETS_ASSERT_RELATION
(
f
,
l
,
r
,
x
,
y
Ë
	$___ETS_ASSERT_RELATION
(
f
,
l
,
r
,
x
,
y
,0)

	)

399 
	#_TS_ASSERT_RELATION
(
f
,
l
,
r
,
x
,
y
Ë
	$___TS_ASSERT_RELATION
(
f
,
l
,
r
,
x
,
y
,0)

	)

401 
	#ETS_ASSERT_RELATION
(
r
,
x
,
y
Ë
	$_ETS_ASSERT_RELATION
(
__FILE__
,
__LINE__
,
r
,
x
,
y
)

	)

402 
	#TS_ASSERT_RELATION
(
r
,
x
,
y
Ë
	$_TS_ASSERT_RELATION
(
__FILE__
,
__LINE__
,
r
,
x
,
y
)

	)

404 
	#_ETSM_ASSERT_RELATION
(
f
,
l
,
m
,
r
,
x
,
y
Ë
	`___ETS_ASSERT_RELATION
(f,l,r,x,y,
	$TS_AS_STRING
(
m
))

	)

405 
	#_TSM_ASSERT_RELATION
(
f
,
l
,
m
,
r
,
x
,
y
Ë
	`___TS_ASSERT_RELATION
(f,l,r,x,y,
	$TS_AS_STRING
(
m
))

	)

407 
	#ETSM_ASSERT_RELATION
(
m
,
r
,
x
,
y
Ë
	$_ETSM_ASSERT_RELATION
(
__FILE__
,
__LINE__
,
m
,
r
,
x
,
y
)

	)

408 
	#TSM_ASSERT_RELATION
(
m
,
r
,
x
,
y
Ë
	$_TSM_ASSERT_RELATION
(
__FILE__
,
__LINE__
,
m
,
r
,
x
,
y
)

	)

411 
	#___ETS_ASSERT_DELTA
(
f
,
l
,
x
,
y
,
d
,
m
Ë
CxxTe°
::
	`doAs£πDñè
–(f), (l), #x, (x), #y, (y), #d, (d), (mË)

	)

412 
	#___TS_ASSERT_DELTA
(
f
,
l
,
x
,
y
,
d
,
m
Ë{ 
_TS_TRY
 { 
	`___ETS_ASSERT_DELTA
(f,l,x,y,d,m); } 
	`__TS_CATCH
(f,lË
	}

	)
}

414 
	#_ETS_ASSERT_DELTA
(
f
,
l
,
x
,
y
,
d
Ë
	$___ETS_ASSERT_DELTA
(
f
,
l
,
x
,
y
,
d
,0)

	)

415 
	#_TS_ASSERT_DELTA
(
f
,
l
,
x
,
y
,
d
Ë
	$___TS_ASSERT_DELTA
(
f
,
l
,
x
,
y
,
d
,0)

	)

417 
	#ETS_ASSERT_DELTA
(
x
,
y
,
d
Ë
	$_ETS_ASSERT_DELTA
(
__FILE__
,
__LINE__
,
x
,
y
,
d
)

	)

418 
	#TS_ASSERT_DELTA
(
x
,
y
,
d
Ë
	$_TS_ASSERT_DELTA
(
__FILE__
,
__LINE__
,
x
,
y
,
d
)

	)

420 
	#_ETSM_ASSERT_DELTA
(
f
,
l
,
m
,
x
,
y
,
d
Ë
	`___ETS_ASSERT_DELTA
(f,l,x,y,d,
	$TS_AS_STRING
(
m
))

	)

421 
	#_TSM_ASSERT_DELTA
(
f
,
l
,
m
,
x
,
y
,
d
Ë
	`___TS_ASSERT_DELTA
(f,l,x,y,d,
	$TS_AS_STRING
(
m
))

	)

423 
	#ETSM_ASSERT_DELTA
(
m
,
x
,
y
,
d
Ë
	$_ETSM_ASSERT_DELTA
(
__FILE__
,
__LINE__
,
m
,
x
,
y
,
d
)

	)

424 
	#TSM_ASSERT_DELTA
(
m
,
x
,
y
,
d
Ë
	$_TSM_ASSERT_DELTA
(
__FILE__
,
__LINE__
,
m
,
x
,
y
,
d
)

	)

427 
	#___ETS_ASSERT_SAME_FILES
(
f
,
l
,
x
,
y
,
m
Ë
CxxTe°
::
	`doAs£πSameFûes
–(f), (l), (x), (y), (mË)

	)

428 
	#___TS_ASSERT_SAME_FILES
(
f
,
l
,
x
,
y
,
m
Ë{ 
_TS_TRY
 { 
	`___ETS_ASSERT_SAME_FILES
(f,l,x,y,m); } 
	`__TS_CATCH
(f,lË
	}

	)
}

430 
	#_ETS_ASSERT_SAME_FILES
(
f
,
l
,
x
,
y
Ë
	$___ETS_ASSERT_SAME_FILES
(
f
,
l
,
x
,
y
,0)

	)

431 
	#_TS_ASSERT_SAME_FILES
(
f
,
l
,
x
,
y
Ë
	$___TS_ASSERT_SAME_FILES
(
f
,
l
,
x
,
y
,0)

	)

433 
	#ETS_ASSERT_SAME_FILES
(
x
,
y
Ë
	$_ETS_ASSERT_SAME_FILES
(
__FILE__
,
__LINE__
,
x
,
y
)

	)

434 
	#TS_ASSERT_SAME_FILES
(
x
,
y
Ë
	$_TS_ASSERT_SAME_FILES
(
__FILE__
,
__LINE__
,
x
,
y
)

	)

436 
	#_ETSM_ASSERT_SAME_FILES
(
f
,
l
,
m
,
x
,
y
Ë
	`___ETS_ASSERT_SAME_FILES
(f,l,x,y,
	$TS_AS_STRING
(
m
))

	)

437 
	#_TSM_ASSERT_SAME_FILES
(
f
,
l
,
m
,
x
,
y
Ë
	`___TS_ASSERT_SAME_FILES
(f,l,x,y,
	$TS_AS_STRING
(
m
))

	)

439 
	#ETSM_ASSERT_SAME_FILES
(
m
,
x
,
y
Ë
	$_ETSM_ASSERT_SAME_FILES
(
__FILE__
,
__LINE__
,
m
,
x
,
y
)

	)

440 
	#TSM_ASSERT_SAME_FILES
(
m
,
x
,
y
Ë
	$_TSM_ASSERT_SAME_FILES
(
__FILE__
,
__LINE__
,
m
,
x
,
y
)

	)

444 
	#___TS_ASSERT_THROWS
(
f
,
l
,
e
,
t
,
m
Ë
	`___TS_ASSERT_THROWS_ASSERT
(f,l,e,t,()0,m)

	)

446 
	#_TS_ASSERT_THROWS
(
f
,
l
,
e
,
t
Ë
	$___TS_ASSERT_THROWS
(
f
,
l
,
e
,
t
,0)

	)

447 
	#TS_ASSERT_THROWS
(
e
,
t
Ë
	$_TS_ASSERT_THROWS
(
__FILE__
,
__LINE__
,
e
,
t
)

	)

449 
	#_TSM_ASSERT_THROWS
(
f
,
l
,
m
,
e
,
t
Ë
	`___TS_ASSERT_THROWS
(f,l,e,t,
	$TS_AS_STRING
(
m
))

	)

450 
	#TSM_ASSERT_THROWS
(
m
,
e
,
t
Ë
	$_TSM_ASSERT_THROWS
(
__FILE__
,
__LINE__
,
m
,
e
,
t
)

	)

453 
	#___TS_ASSERT_THROWS_ASSERT
(
f
,
l
,
e
,
t
,
a
,
m
) { \

454 
boﬁ
 
_ts_thªw_ex≥˘ed
 = 
Ál£
, 
_ts_thªw_ñ£
 = false; \

455 
_TS_TRY
 { 
e
; } \

456 
	`_TS_CATCH_TYPE
–(
t
), { 
a
; 
_ts_thªw_ex≥˘ed
 = 
åue
; } ) \

457 
	`_TS_CATCH_ABORT
–{ 
throw
; } ) \

458 
	`_TS_CATCH_STD
–
ex
, { 
_ts_thªw_ex≥˘ed
 = 
åue
; 
CxxTe°
::
	`doFaûAs£πThrows
((
f
), (
l
), #e, #t,Årue, (
m
),Éx.
	`wh©
() ); } ) \

459 
	`_TS_LAST_CATCH
–{ 
_ts_thªw_ñ£
 = 
åue
; } ) \

460 i‡–!
_ts_thªw_ex≥˘ed
 ) { 
CxxTe°
::
	`doFaûAs£πThrows
–(
f
), (
l
), #e, #t, 
_ts_thªw_ñ£
, (
m
), 0 ); } 
	}

	)
}

462 
	#_TS_ASSERT_THROWS_ASSERT
(
f
,
l
,
e
,
t
,
a
Ë
	$___TS_ASSERT_THROWS_ASSERT
(
f
,
l
,
e
,
t
,
a
,0)

	)

463 
	#TS_ASSERT_THROWS_ASSERT
(
e
,
t
,
a
Ë
	$_TS_ASSERT_THROWS_ASSERT
(
__FILE__
,
__LINE__
,
e
,
t
,
a
)

	)

465 
	#_TSM_ASSERT_THROWS_ASSERT
(
f
,
l
,
m
,
e
,
t
,
a
Ë
	`___TS_ASSERT_THROWS_ASSERT
(f,l,e,t,a,
	$TS_AS_STRING
(
m
))

	)

466 
	#TSM_ASSERT_THROWS_ASSERT
(
m
,
e
,
t
,
a
Ë
	$_TSM_ASSERT_THROWS_ASSERT
(
__FILE__
,
__LINE__
,
m
,
e
,
t
,
a
)

	)

469 
	#TS_ASSERT_THROWS_EQUALS
(
e
,
t
,
x
,
y
Ë
	`TS_ASSERT_THROWS_ASSERT
”,t,
	$TS_ASSERT_EQUALS
(
x
,
y
))

	)

470 
	#TSM_ASSERT_THROWS_EQUALS
(
m
,
e
,
t
,
x
,
y
Ë
	`TSM_ASSERT_THROWS_ASSERT
(m,e,t,
	$TSM_ASSERT_EQUALS
(
m
,
x
,
y
))

	)

473 
	#TS_ASSERT_THROWS_DIFFERS
(
e
,
t
,
x
,
y
Ë
	`TS_ASSERT_THROWS_ASSERT
”,t,
	$TS_ASSERT_DIFFERS
(
x
,
y
))

	)

474 
	#TSM_ASSERT_THROWS_DIFFERS
(
m
,
e
,
t
,
x
,
y
Ë
	`TSM_ASSERT_THROWS_ASSERT
(m,e,t,
	$TSM_ASSERT_DIFFERS
(
m
,
x
,
y
))

	)

477 
	#TS_ASSERT_THROWS_DELTA
(
e
,
t
,
x
,
y
,
d
Ë
	`TS_ASSERT_THROWS_ASSERT
”,t,
	$TS_ASSERT_DELTA
(
x
,
y
,
d
))

	)

478 
	#TSM_ASSERT_THROWS_DELTA
(
m
,
e
,
t
,
x
,
y
,
d
Ë
	`TSM_ASSERT_THROWS_ASSERT
(m,e,t,
	$TSM_ASSERT_DELTA
(
m
,
x
,
y
,
d
))

	)

481 
	#TS_ASSERT_THROWS_SAME_DATA
(
e
,
t
,
x
,
y
,
s
Ë
	`TS_ASSERT_THROWS_ASSERT
”,t,
	$TS_ASSERT_SAME_DATA
(
x
,
y
,
s
))

	)

482 
	#TSM_ASSERT_THROWS_SAME_DATA
(
m
,
e
,
t
,
x
,
y
,
s
Ë
	`TSM_ASSERT_THROWS_ASSERT
(m,e,t,
	$TSM_ASSERT_SAME_DATA
(
m
,
x
,
y
,
s
))

	)

485 
	#TS_ASSERT_THROWS_LESS_THAN
(
e
,
t
,
x
,
y
Ë
	`TS_ASSERT_THROWS_ASSERT
”,t,
	$TS_ASSERT_LESS_THAN
(
x
,
y
))

	)

486 
	#TSM_ASSERT_THROWS_LESS_THAN
(
m
,
e
,
t
,
x
,
y
Ë
	`TSM_ASSERT_THROWS_ASSERT
(m,e,t,
	$TSM_ASSERT_LESS_THAN
(
m
,
x
,
y
))

	)

489 
	#TS_ASSERT_THROWS_LESS_THAN_EQUALS
(
e
,
t
,
x
,
y
Ë
	`TS_ASSERT_THROWS_ASSERT
”,t,
	$TS_ASSERT_LESS_THAN_EQUALS
(
x
,
y
))

	)

490 
	#TSM_ASSERT_THROWS_LESS_THAN_EQUALS
(
m
,
e
,
t
,
x
,
y
Ë
	`TSM_ASSERT_THROWS_ASSERT
(m,e,t,
	$TSM_ASSERT_LESS_THAN_EQUALS
(
m
,
x
,
y
))

	)

493 
	#TS_ASSERT_THROWS_PREDICATE
(
e
,
t
,
p
,
v
Ë
	`TS_ASSERT_THROWS_ASSERT
”,t,
	$TS_ASSERT_PREDICATE
(
p
,
v
))

	)

494 
	#TSM_ASSERT_THROWS_PREDICATE
(
m
,
e
,
t
,
p
,
v
Ë
	`TSM_ASSERT_THROWS_ASSERT
(m,e,t,
	$TSM_ASSERT_PREDICATE
(
m
,
p
,
v
))

	)

497 
	#TS_ASSERT_THROWS_RELATION
(
e
,
t
,
r
,
x
,
y
Ë
	`TS_ASSERT_THROWS_ASSERT
”,t,
	$TS_ASSERT_RELATION
(
r
,
x
,
y
))

	)

498 
	#TSM_ASSERT_THROWS_RELATION
(
m
,
e
,
t
,
r
,
x
,
y
Ë
	`TSM_ASSERT_THROWS_ASSERT
(m,e,t,
	$TSM_ASSERT_RELATION
(
m
,
r
,
x
,
y
))

	)

501 
	#___TS_ASSERT_THROWS_ANYTHING
(
f
,
l
,
e
,
m
) { \

502 
boﬁ
 
_ts_thªw
 = 
Ál£
; \

503 
_TS_TRY
 { 
e
; } \

504 
	`_TS_LAST_CATCH
–{ 
_ts_thªw
 = 
åue
; } ) \

505 i‡–!
_ts_thªw
 ) { 
CxxTe°
::
	`doFaûAs£πThrows
–(
f
), (
l
), #e, "...", 
Ál£
, (
m
Ë); } 
	}

	)
}

507 
	#_TS_ASSERT_THROWS_ANYTHING
(
f
,
l
,
e
Ë
	$___TS_ASSERT_THROWS_ANYTHING
(
f
,
l
,
e
,0)

	)

508 
	#TS_ASSERT_THROWS_ANYTHING
(
e
Ë
	$_TS_ASSERT_THROWS_ANYTHING
(
__FILE__
, 
__LINE__
, 
e
)

	)

510 
	#_TSM_ASSERT_THROWS_ANYTHING
(
f
,
l
,
m
,
e
Ë
	`___TS_ASSERT_THROWS_ANYTHING
(f,l,e,
	$TS_AS_STRING
(
m
))

	)

511 
	#TSM_ASSERT_THROWS_ANYTHING
(
m
,
e
Ë
	$_TSM_ASSERT_THROWS_ANYTHING
(
__FILE__
,
__LINE__
,
m
,
e
)

	)

514 
	#___TS_ASSERT_THROWS_NOTHING
(
f
,
l
,
e
,
m
) { \

515 
_TS_TRY
 { 
e
; } \

516 
	`_TS_CATCH_ABORT
–{ 
throw
; } ) \

517 
	`_TS_CATCH_STD
(
ex
, { 
CxxTe°
::
	`doFaûAs£πThrowsNŸ
–(
f
), (
l
), #e, (
m
),Éx.
	`wh©
() ); } ) \

518 
	`_TS_LAST_CATCH
–{ 
CxxTe°
::
	`doFaûAs£πThrowsNŸ
–(
f
), (
l
), #e, (
m
), 0 ); } ) 
	}

	)
}

520 
	#_TS_ASSERT_THROWS_NOTHING
(
f
,
l
,
e
Ë
	$___TS_ASSERT_THROWS_NOTHING
(
f
,
l
,
e
,0)

	)

521 
	#TS_ASSERT_THROWS_NOTHING
(
e
Ë
	$_TS_ASSERT_THROWS_NOTHING
(
__FILE__
,
__LINE__
,
e
)

	)

523 
	#_TSM_ASSERT_THROWS_NOTHING
(
f
,
l
,
m
,
e
Ë
	`___TS_ASSERT_THROWS_NOTHING
(f,l,e,
	$TS_AS_STRING
(
m
))

	)

524 
	#TSM_ASSERT_THROWS_NOTHING
(
m
,
e
Ë
	$_TSM_ASSERT_THROWS_NOTHING
(
__FILE__
,
__LINE__
,
m
,
e
)

	)

530 
	#CXXTEST_COMPARISONS
(
CXXTEST_X
, 
CXXTEST_Y
, 
CXXTEST_T
) \

531 
ãm∂©e
<> 
equÆs
<
CXXTEST_X
,
CXXTEST_Y
> { \

532 
boﬁ
 
	`ã°
(
CXXTEST_X
 
x
,
CXXTEST_Y
 
y
) { \

533  
equÆs
<
CXXTEST_T
,CXXTEST_T>::
	`ã°
((CXXTEST_T)
x
,(CXXTEST_T)
y
); } 
	}
}; \

534 
ãm∂©e
<> 
equÆs
<
CXXTEST_Y
,
CXXTEST_X
> { \

535 
boﬁ
 
	`ã°
(
CXXTEST_Y
 
x
,
CXXTEST_X
 
y
) { \

536  
equÆs
<
CXXTEST_T
,CXXTEST_T>::
	`ã°
((CXXTEST_T)
x
,(CXXTEST_T)
y
); } }; \

537 
ãm∂©e
<> 
dif„rs
<
CXXTEST_X
,
CXXTEST_Y
> { \

538 
boﬁ
 
	`ã°
(
CXXTEST_X
 
x
,
CXXTEST_Y
 
y
) { \

539  
dif„rs
<
CXXTEST_T
,CXXTEST_T>::
	`ã°
((CXXTEST_T)
x
,(CXXTEST_T)
y
); } }; \

540 
ãm∂©e
<> 
dif„rs
<
CXXTEST_Y
,
CXXTEST_X
> { \

541 
boﬁ
 
	`ã°
(
CXXTEST_Y
 
x
,
CXXTEST_X
 
y
) { \

542  
dif„rs
<
CXXTEST_T
,CXXTEST_T>::
	`ã°
((CXXTEST_T)
x
,(CXXTEST_T)
y
); } }; \

543 
ãm∂©e
<> 
ÀssTh™
<
CXXTEST_X
,
CXXTEST_Y
> { \

544 
boﬁ
 
	`ã°
(
CXXTEST_X
 
x
,
CXXTEST_Y
 
y
) { \

545  
ÀssTh™
<
CXXTEST_T
,CXXTEST_T>::
	`ã°
((CXXTEST_T)
x
,(CXXTEST_T)
y
); } }; \

546 
ãm∂©e
<> 
ÀssTh™
<
CXXTEST_Y
,
CXXTEST_X
> { \

547 
boﬁ
 
	`ã°
(
CXXTEST_Y
 
x
,
CXXTEST_X
 
y
) { \

548  
ÀssTh™
<
CXXTEST_T
,CXXTEST_T>::
	`ã°
((CXXTEST_T)
x
,(CXXTEST_T)
y
); } }; \

549 
ãm∂©e
<> 
ÀssTh™EquÆs
<
CXXTEST_X
,
CXXTEST_Y
> { \

550 
boﬁ
 
	`ã°
(
CXXTEST_X
 
x
,
CXXTEST_Y
 
y
) { \

551  
ÀssTh™EquÆs
<
CXXTEST_T
,CXXTEST_T>::
	`ã°
((CXXTEST_T)
x
,(CXXTEST_T)
y
); } }; \

552 
ãm∂©e
<> 
ÀssTh™EquÆs
<
CXXTEST_Y
,
CXXTEST_X
> { \

553 
boﬁ
 
	`ã°
(
CXXTEST_Y
 
x
,
CXXTEST_X
 
y
) { \

554  
ÀssTh™EquÆs
<
CXXTEST_T
,CXXTEST_T>::
	`ã°
((CXXTEST_T)
x
,(CXXTEST_T)
y
); } }

	)

558 
	gãm∂©e
<
˛ass
 
	gD
> 
	gdñè
<
	gCXXTEST_X
,
	gCXXTEST_Y
, D> { \

559 
boﬁ
 
ã°
(
CXXTEST_X
 
x
,
CXXTEST_Y
 
y
, 
D
 
d
) { \

560  
	gdñè
<
	gCXXTEST_T
,CXXTEST_T,
	gD
>::
ã°
((
CXXTEST_T
)
x
,(CXXTEST_T)
y
, 
d
); } }; \

561 
	gãm∂©e
<
˛ass
 
	gD
> 
	gdñè
<
	gCXXTEST_Y
,
	gCXXTEST_X
, D> { \

562 
boﬁ
 
ã°
(
CXXTEST_Y
 
x
,
CXXTEST_X
 
y
, 
D
 
d
) { \

563  
	gdñè
<
	gCXXTEST_T
,CXXTEST_T,
	gD
>::
ã°
((
CXXTEST_T
)
x
,(CXXTEST_T)
y
, 
d
); } }

566 
	#CXXTEST_INTEGRAL
(
CXXTEST_T
) \

567 
	$CXXTEST_COMPARISONS
–sig√d 
CXXTEST_T
, CXXTEST_T, CXXTEST_T )

	)

569 
	`CXXTEST_INTEGRAL
( );

570 
	`CXXTEST_INTEGRAL
( );

571 
	`CXXTEST_INTEGRAL
( );

572 
	`CXXTEST_INTEGRAL
( );

573 #ifde‡
_CXXTEST_LONGLONG


574 
	`CXXTEST_INTEGRAL
–
_CXXTEST_LONGLONG
 );

577 
	#CXXTEST_SMALL_BIG
(
CXXTEST_SMALL
, 
CXXTEST_BIG
) \

578 
	`CXXTEST_COMPARISONS
–sig√d 
CXXTEST_SMALL
, 
CXXTEST_BIG
, CXXTEST_BIG ); \

579 
	$CXXTEST_COMPARISONS
–sig√d 
CXXTEST_BIG
, 
CXXTEST_SMALL
, CXXTEST_BIG )

	)

581 
	`CXXTEST_SMALL_BIG
( , );

582 
	`CXXTEST_SMALL_BIG
( , );

583 
	`CXXTEST_SMALL_BIG
( , );

584 
	`CXXTEST_SMALL_BIG
( , );

585 
	`CXXTEST_SMALL_BIG
( , );

586 
	`CXXTEST_SMALL_BIG
( , );

588 #ifde‡
_CXXTEST_LONGLONG


589 
	`CXXTEST_SMALL_BIG
–, 
_CXXTEST_LONGLONG
 );

590 
	`CXXTEST_SMALL_BIG
–, 
_CXXTEST_LONGLONG
 );

591 
	`CXXTEST_SMALL_BIG
–, 
_CXXTEST_LONGLONG
 );

592 
	`CXXTEST_SMALL_BIG
–, 
_CXXTEST_LONGLONG
 );

594 
	}
}

596 #ifde‡
_CXXTEST_HAVE_STD


597 
	~<cxxã°/StdTe°Suôe.h
>

	@tools/cxxtest/cxxtest/TestTracker.cpp

12 #i‚de‡
__cxxã°__Te°Tøckî_˝p__


13 
	#__cxxã°__Te°Tøckî_˝p__


	)

15 
	~<cxxã°/Te°Tøckî.h
>

17 
«me•a˚
 
	gCxxTe°


19 
boﬁ
 
	gTe°Tøckî
::
_¸óãd
 = 
Ál£
;

20 
boﬁ
 
	gTe°Tøckî
::
¥öt_åacög
 = 
Ál£
;

22 
	gTe°Tøckî
::
Te°Tøckî
()

24 i‡–!
_¸óãd
 ) {

25 
öôülize
();

26 
£tLi°íî
( 0 );

27 
	g_¸óãd
 = 
åue
;

31 
	gTe°Tøckî
::~
Te°Tøckî
()

35 
Te°Tøckî
 & Te°Tøckî::
åackî
()

37 
Te°Tøckî
 
theTøckî
;

38  
	gtheTøckî
;

41 
	gTe°Tøckî
::
öôülize
()

43 
_w¨nögs
 = 0;

44 
	g_ÁûedTe°s
 = 0;

45 
	g_ã°FaûedAs£πs
 = 0;

46 
	g_suôeFaûedTe°s
 = 0;

47 
	g_ÁûedSuôes
 = 0;

48 
	g_w‹ld
 = 0;

49 
	g_suôe
 = 0;

50 
	g_ã°
 = 0;

53 c⁄° 
Te°Des¸ùti⁄
 *
	gTe°Tøckî
::
fixTe°
–c⁄° Te°Des¸ùti⁄ *
d
 ) const

55  
d
 ? d : &
dummyTe°
();

58 c⁄° 
SuôeDes¸ùti⁄
 *
	gTe°Tøckî
::
fixSuôe
–c⁄° SuôeDes¸ùti⁄ *
d
 ) const

60  
d
 ? d : &
dummySuôe
();

63 c⁄° 
W‹ldDes¸ùti⁄
 *
	gTe°Tøckî
::
fixW‹ld
–c⁄° W‹ldDes¸ùti⁄ *
d
 ) const

65  
d
 ? d : &
dummyW‹ld
();

68 c⁄° 
	gTe°Des¸ùti⁄
 &
	gTe°Tøckî
::
dummyTe°
() const

70  
dummySuôe
().
ã°Des¸ùti⁄
(0);

73 c⁄° 
	gSuôeDes¸ùti⁄
 &
	gTe°Tøckî
::
dummySuôe
() const

75  
dummyW‹ld
().
suôeDes¸ùti⁄
(0);

78 c⁄° 
	gW‹ldDes¸ùti⁄
 &
	gTe°Tøckî
::
dummyW‹ld
() const

80  
_dummyW‹ld
;

83 
	gTe°Tøckî
::
£tLi°íî
–
Te°Li°íî
 *
l
 )

85 
_l
 = 
l
 ?Ü : &
_dummyLi°íî
;

88 
	gTe°Tøckî
::
íãrW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 &
wd
 )

90 
£tW‹ld
–&
wd
 );

91 
	g_w¨nögs
 = 
_ÁûedTe°s
 = 
_ã°FaûedAs£πs
 = 
_suôeFaûedTe°s
 = 
_ÁûedSuôes
 = 0;

92 
	g_l
->
íãrW‹ld
–
wd
 );

95 
	gTe°Tøckî
::
íãrSuôe
–c⁄° 
SuôeDes¸ùti⁄
 &
sd
 )

97 
£tSuôe
–&
sd
 );

98 
	g_ã°FaûedAs£πs
 = 
_suôeFaûedTe°s
 = 0;

99 
	g_l
->
íãrSuôe
(
sd
);

102 
	gTe°Tøckî
::
íãrTe°
–c⁄° 
Te°Des¸ùti⁄
 &
td
 )

104 
£tTe°
–&
td
 );

105 
	g_ã°FaûedAs£πs
 = 
Ál£
;

106 
	g_l
->
íãrTe°
(
td
);

109 
	gTe°Tøckî
::
ÀaveTe°
–c⁄° 
Te°Des¸ùti⁄
 &
td
 )

111 
_l
->
ÀaveTe°
–
td
 );

112 
£tTe°
( 0 );

115 
	gTe°Tøckî
::
ÀaveSuôe
–c⁄° 
SuôeDes¸ùti⁄
 &
sd
 )

117 
_l
->
ÀaveSuôe
–
sd
 );

118 
£tSuôe
( 0 );

121 
	gTe°Tøckî
::
ÀaveW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 &
wd
 )

123 
_l
->
ÀaveW‹ld
–
wd
 );

124 
£tW‹ld
( 0 );

127 
	gTe°Tøckî
::
åa˚
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

129 
	g_l
->
åa˚
–
fûe
, 
löe
, 
ex¥essi⁄
 );

132 
	gTe°Tøckî
::
w¨nög
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

134 
cou¡W¨nög
();

135 
	g_l
->
w¨nög
–
fûe
, 
löe
, 
ex¥essi⁄
 );

138 
	gTe°Tøckî
::
ÁûedTe°
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

140 
cou¡Faûuª
();

141 
	g_l
->
ÁûedTe°
–
fûe
, 
löe
, 
ex¥essi⁄
 );

144 
	gTe°Tøckî
::
ÁûedAs£π
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

146 
cou¡Faûuª
();

147 
	g_l
->
ÁûedAs£π
–
fûe
, 
löe
, 
ex¥essi⁄
 );

150 
	gTe°Tøckî
::
ÁûedAs£πEquÆs
–c⁄° *
fûe
, 
löe
,

151 c⁄° *
xSå
, c⁄° *
ySå
,

152 c⁄° *
x
, c⁄° *
y
 )

154 
cou¡Faûuª
();

155 
	g_l
->
ÁûedAs£πEquÆs
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
x
, 
y
 );

158 
	gTe°Tøckî
::
ÁûedAs£πSameD©a
–c⁄° *
fûe
, 
löe
,

159 c⁄° *
xSå
, c⁄° *
ySå
,

160 c⁄° *
sizeSå
, c⁄° *
x
,

161 c⁄° *
y
, 
size
 )

163 
cou¡Faûuª
();

164 
	g_l
->
ÁûedAs£πSameD©a
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
sizeSå
, 
x
, 
y
, 
size
 );

167 
	gTe°Tøckî
::
ÁûedAs£πDñè
–c⁄° *
fûe
, 
löe
,

168 c⁄° *
xSå
, c⁄° *
ySå
, c⁄° *
dSå
,

169 c⁄° *
x
, c⁄° *
y
, c⁄° *
d
 )

171 
cou¡Faûuª
();

172 
	g_l
->
ÁûedAs£πDñè
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
dSå
, 
x
, 
y
, 
d
 );

175 
	gTe°Tøckî
::
ÁûedAs£πDif„rs
–c⁄° *
fûe
, 
löe
,

176 c⁄° *
xSå
, c⁄° *
ySå
,

177 c⁄° *
vÆue
 )

179 
cou¡Faûuª
();

180 
	g_l
->
ÁûedAs£πDif„rs
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
vÆue
 );

183 
	gTe°Tøckî
::
ÁûedAs£πLessTh™
–c⁄° *
fûe
, 
löe
,

184 c⁄° *
xSå
, c⁄° *
ySå
,

185 c⁄° *
x
, c⁄° *
y
 )

187 
cou¡Faûuª
();

188 
	g_l
->
ÁûedAs£πLessTh™
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
x
, 
y
 );

191 
	gTe°Tøckî
::
ÁûedAs£πLessTh™EquÆs
–c⁄° *
fûe
, 
löe
,

192 c⁄° *
xSå
, c⁄° *
ySå
,

193 c⁄° *
x
, c⁄° *
y
 )

195 
cou¡Faûuª
();

196 
	g_l
->
ÁûedAs£πLessTh™EquÆs
–
fûe
, 
löe
, 
xSå
, 
ySå
, 
x
, 
y
 );

199 
	gTe°Tøckî
::
ÁûedAs£πPªdiˇã
–c⁄° *
fûe
, 
löe
,

200 c⁄° *
¥ediˇã
, c⁄° *
xSå
, c⁄° *
x
 )

202 
cou¡Faûuª
();

203 
	g_l
->
ÁûedAs£πPªdiˇã
–
fûe
, 
löe
, 
¥ediˇã
, 
xSå
, 
x
 );

206 
	gTe°Tøckî
::
ÁûedAs£πRñ©i⁄
–c⁄° *
fûe
, 
löe
,

207 c⁄° *
ªœti⁄
, c⁄° *
xSå
, c⁄° *
ySå
,

208 c⁄° *
x
, c⁄° *
y
 )

210 
cou¡Faûuª
();

211 
	g_l
->
ÁûedAs£πRñ©i⁄
–
fûe
, 
löe
, 
ªœti⁄
, 
xSå
, 
ySå
, 
x
, 
y
 );

214 
	gTe°Tøckî
::
ÁûedAs£πThrows
–c⁄° *
fûe
, 
löe
,

215 c⁄° *
ex¥essi⁄
, c⁄° *
ty≥
,

216 
boﬁ
 
ŸhîThrown
 )

218 
cou¡Faûuª
();

219 
	g_l
->
ÁûedAs£πThrows
–
fûe
, 
löe
, 
ex¥essi⁄
, 
ty≥
, 
ŸhîThrown
 );

222 
	gTe°Tøckî
::
ÁûedAs£πThrowsNŸ
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

224 
cou¡Faûuª
();

225 
	g_l
->
ÁûedAs£πThrowsNŸ
–
fûe
, 
löe
, 
ex¥essi⁄
 );

228 
	gTe°Tøckî
::
ÁûedAs£πSameFûes
–c⁄° *
fûe
, 
löe
, c⁄° *
fûe1
, c⁄° * 
fûe2
, c⁄° * 
ex∂™©i⁄
 )

230 
cou¡Faûuª
();

231 
	g_l
->
ÁûedAs£πSameFûes
–
fûe
, 
löe
, 
fûe1
, 
fûe2
, 
ex∂™©i⁄
 );

234 
	gTe°Tøckî
::
£tW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 *
w
 )

236 
_w‹ld
 = 
fixW‹ld
–
w
 );

237 
£tSuôe
( 0 );

240 
	gTe°Tøckî
::
£tSuôe
–c⁄° 
SuôeDes¸ùti⁄
 *
s
 )

242 
_suôe
 = 
fixSuôe
–
s
 );

243 
£tTe°
( 0 );

246 
	gTe°Tøckî
::
£tTe°
–c⁄° 
Te°Des¸ùti⁄
 *
t
 )

248 
_ã°
 = 
fixTe°
–
t
 );

251 
	gTe°Tøckî
::
cou¡W¨nög
()

253 ++ 
_w¨nögs
;

256 
	gTe°Tøckî
::
cou¡Faûuª
()

258 i‡–++ 
_ã°FaûedAs£πs
 == 1 ) {

259 ++ 
_ÁûedTe°s
;

260 i‡–++ 
	g_suôeFaûedTe°s
 == 1 )

261 ++ 
_ÁûedSuôes
;

	@tools/cxxtest/cxxtest/TestTracker.h

12 #i‚de‡
__cxxã°__Te°Tøckî_h__


13 
	#__cxxã°__Te°Tøckî_h__


	)

21 
	~<cxxã°/Te°Li°íî.h
>

22 
	~<cxxã°/DummyDes¸ùti⁄s.h
>

24 
«me•a˚
 
	gCxxTe°


26 
˛ass
 
	gTe°Li°íî
;

28 ˛as†
	cTe°Tøckî
 : 
public
 
Te°Li°íî


30 
public
:

31 
vútuÆ
 ~
Te°Tøckî
();

33 
	gTe°Tøckî
 &
åackî
();

34 
boﬁ
 
	g¥öt_åacög
;

36 c⁄° 
Te°Des¸ùti⁄
 *
fixTe°
–c⁄° Te°Des¸ùti⁄ *
d
 ) const;

37 c⁄° 
SuôeDes¸ùti⁄
 *
fixSuôe
–c⁄° SuôeDes¸ùti⁄ *
d
 ) const;

38 c⁄° 
W‹ldDes¸ùti⁄
 *
fixW‹ld
–c⁄° W‹ldDes¸ùti⁄ *
d
 ) const;

40 c⁄° 
	gTe°Des¸ùti⁄
 &
ã°
(Ëc⁄° {  *
	g_ã°
; }

41 c⁄° 
	gSuôeDes¸ùti⁄
 &
suôe
(Ëc⁄° {  *
	g_suôe
; }

42 c⁄° 
	gW‹ldDes¸ùti⁄
 &
w‹ld
(Ëc⁄° {  *
	g_w‹ld
; }

44 
boﬁ
 
ã°Faûed
(Ëc⁄° {  (
ã°FaûedAs£πs
() > 0); }

45 
boﬁ
 
suôeFaûed
(Ëc⁄° {  (
suôeFaûedTe°s
() > 0); }

46 
boﬁ
 
w‹ldFaûed
(Ëc⁄° {  (
ÁûedSuôes
() > 0); }

48 
w¨nögs
(Ëc⁄° {  
	g_w¨nögs
; }

49 
ÁûedTe°s
(Ëc⁄° {  
	g_ÁûedTe°s
; }

50 
ã°FaûedAs£πs
(Ëc⁄° {  
	g_ã°FaûedAs£πs
; }

51 
suôeFaûedTe°s
(Ëc⁄° {  
	g_suôeFaûedTe°s
; }

52 
ÁûedSuôes
(Ëc⁄° {  
	g_ÁûedSuôes
; }

54 
íãrW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 &
wd
 );

55 
íãrSuôe
–c⁄° 
SuôeDes¸ùti⁄
 &
sd
 );

56 
íãrTe°
–c⁄° 
Te°Des¸ùti⁄
 &
td
 );

57 
ÀaveTe°
–c⁄° 
Te°Des¸ùti⁄
 &
td
 );

58 
ÀaveSuôe
–c⁄° 
SuôeDes¸ùti⁄
 &
sd
 );

59 
ÀaveW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 &
wd
 );

60 
åa˚
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 );

61 
w¨nög
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 );

62 
ÁûedTe°
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 );

63 
ÁûedAs£π
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 );

64 
ÁûedAs£πEquÆs
–c⁄° *
fûe
, 
löe
,

65 c⁄° *
xSå
, c⁄° *
ySå
,

66 c⁄° *
x
, c⁄° *
y
 );

67 
ÁûedAs£πSameD©a
–c⁄° *
fûe
, 
löe
,

68 c⁄° *
xSå
, c⁄° *
ySå
,

69 c⁄° *
sizeSå
, c⁄° *
x
,

70 c⁄° *
y
, 
size
 );

71 
ÁûedAs£πDñè
–c⁄° *
fûe
, 
löe
,

72 c⁄° *
xSå
, c⁄° *
ySå
, c⁄° *
dSå
,

73 c⁄° *
x
, c⁄° *
y
, c⁄° *
d
 );

74 
ÁûedAs£πDif„rs
–c⁄° *
fûe
, 
löe
,

75 c⁄° *
xSå
, c⁄° *
ySå
,

76 c⁄° *
vÆue
 );

77 
ÁûedAs£πLessTh™
–c⁄° *
fûe
, 
löe
,

78 c⁄° *
xSå
, c⁄° *
ySå
,

79 c⁄° *
x
, c⁄° *
y
 );

80 
ÁûedAs£πLessTh™EquÆs
–c⁄° *
fûe
, 
löe
,

81 c⁄° *
xSå
, c⁄° *
ySå
,

82 c⁄° *
x
, c⁄° *
y
 );

83 
ÁûedAs£πPªdiˇã
–c⁄° *
fûe
, 
löe
,

84 c⁄° *
¥ediˇã
, c⁄° *
xSå
, c⁄° *
x
 );

85 
ÁûedAs£πRñ©i⁄
–c⁄° *
fûe
, 
löe
,

86 c⁄° *
ªœti⁄
, c⁄° *
xSå
, c⁄° *
ySå
,

87 c⁄° *
x
, c⁄° *
y
 );

88 
ÁûedAs£πThrows
–c⁄° *
fûe
, 
löe
,

89 c⁄° *
ex¥essi⁄
, c⁄° *
ty≥
,

90 
boﬁ
 
ŸhîThrown
 );

91 
ÁûedAs£πThrowsNŸ
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 );

92 
ÁûedAs£πSameFûes
–c⁄° * 
fûe
, 
löe
, c⁄° * 
fûe1
, c⁄° * 
fûe2
, c⁄° * 
ex∂™©i⁄
);

94 
öôülize
();

96 
	g¥iv©e
:

97 
Te°Tøckî
( const TestTracker & );

98 
	gTe°Tøckî
 &
	g›î©‹
=–c⁄° 
Te°Tøckî
 & );

100 
boﬁ
 
	g_¸óãd
;

101 
Te°Li°íî
 
	g_dummyLi°íî
;

102 
DummyW‹ldDes¸ùti⁄
 
	g_dummyW‹ld
;

103 
	g_w¨nögs
, 
	g_ÁûedTe°s
, 
	g_ã°FaûedAs£πs
, 
	g_suôeFaûedTe°s
, 
	g_ÁûedSuôes
;

104 
Te°Li°íî
 *
	g_l
;

105 c⁄° 
W‹ldDes¸ùti⁄
 *
	g_w‹ld
;

106 c⁄° 
SuôeDes¸ùti⁄
 *
	g_suôe
;

107 c⁄° 
Te°Des¸ùti⁄
 *
	g_ã°
;

109 c⁄° 
	gTe°Des¸ùti⁄
 &
dummyTe°
() const;

110 c⁄° 
	gSuôeDes¸ùti⁄
 &
dummySuôe
() const;

111 c⁄° 
	gW‹ldDes¸ùti⁄
 &
dummyW‹ld
() const;

113 
£tW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 *
w
 );

114 
£tSuôe
–c⁄° 
SuôeDes¸ùti⁄
 *
s
 );

115 
£tTe°
–c⁄° 
Te°Des¸ùti⁄
 *
t
 );

116 
cou¡W¨nög
();

117 
cou¡Faûuª
();

119 
‰õnd
 
˛ass
 
	gTe°Ru¬î
;

121 
Te°Tøckî
();

122 
£tLi°íî
–
Te°Li°íî
 *
l
 );

125 
ölöe
 
	gTe°Tøckî
 &
	$åackî
(Ë{  
Te°Tøckî
::
	`åackî
(); 
	}
}

	@tools/cxxtest/cxxtest/ValueTraits.cpp

12 #i‚de‡
__cxxã°__VÆueTøôs_˝p__


13 
	#__cxxã°__VÆueTøôs_˝p__


	)

15 
	~<cxxã°/VÆueTøôs.h
>

17 
«me•a˚
 
	gCxxTe°


23 
digôToCh¨
–
digô
 )

25 i‡–
	gdigô
 < 10 )

26  ()('0' + 
	gdigô
);

27 i‡–
	gdigô
 <= 10 + 'Z' - 'A' )

28  ()('A' + 
digô
 - 10);

32 c⁄° *
byãToHex
–
byã
 )

34 
	gasHex
[3];

35 
	gasHex
[0] = 
digôToCh¨
–
byã
 >> 4 );

36 
	gasHex
[1] = 
digôToCh¨
–
byã
 & 0x0F );

37 
	gasHex
[2] = '\0';

38  
	gasHex
;

41 *
c›ySåög
–*
d°
, c⁄° *
§c
 )

43  (*
	gd°
 = *
§c
) != '\0' ) {

44 ++ 
d°
;

45 ++ 
	g§c
;

47  
	gd°
;

50 
boﬁ
 
°rögsEquÆ
–c⁄° *
s1
, c⁄° *
s2
 )

52 
	gc
;

53  (
	gc
 = *
s1
++Ë=*
s2
++ )

54 i‡–
c
 == '\0' )

55  
åue
;

56  
	gÁl£
;

59 *
ch¨ToSåög
–
c
, *
s
 )

61  
	gc
 ) {

62 '\\':  
c›ySåög
–
s
, "\\\\" );

63 '\"':  
c›ySåög
–
s
, "\\\"" );

64 '\'':  
c›ySåög
–
s
, "\\\'" );

65 '\0':  
c›ySåög
–
s
, "\\0" );

66 '\a':  
c›ySåög
–
s
, "\\a" );

67 '\b':  
c›ySåög
–
s
, "\\b" );

68 '\n':  
c›ySåög
–
s
, "\\n" );

69 '\r':  
c›ySåög
–
s
, "\\r" );

70 '\t':  
c›ySåög
–
s
, "\\t" );

72 i‡–
	gc
 >32 && 
c
 <= 127 ) {

73 
s
[0] = ()
c
;

74 
	gs
[1] = '\0';

75  
	gs
 + 1;

78 
	gs
[0] = '\\';

79 
	gs
[1] = 'x';

80 i‡–
	gc
 < 0x10 ) {

81 
	gs
[2] = '0';

82 ++ 
	gs
;

84  
numbîToSåög
–
c
, 
s
 + 2, 16UL );

88 *
ch¨ToSåög
–
c
, *
s
 )

90  
ch¨ToSåög
–()()
c
, 
s
 );

93 *
byãsToSåög
–c⁄° *
byãs
, 
numByãs
, 
maxByãs
, *
s
 )

95 
boﬁ
 
	gåunˇã
 = (
numByãs
 > 
maxByãs
);

96 i‡–
	gåunˇã
 )

97 
	gnumByãs
 = 
maxByãs
;

99 
	gs
 = 
c›ySåög
–
s
, "{ " );

100  
	gi
 = 0; i < 
	gnumByãs
; ++ i, ++ 
	gbyãs
 )

101 
	gs
 = 
c›ySåög
–c›ySåög–
s
, 
byãToHex
–*
byãs
 ) ), " " );

102 i‡–
	gåunˇã
 )

103 
	gs
 = 
c›ySåög
–
s
, "..." );

104  
c›ySåög
–
s
, " }" );

107 #i‚de‡
CXXTEST_USER_VALUE_TRAITS


108 
	gVÆueTøôs
<c⁄° >::
ªquúedDigôsOnLe·
–
t
 )

110 
digôs
 = 1;

111  
	gt
 = (
t
 < 0.0Ë? -à:Å;Å > 1.0;Å /
BASE
 )

112 ++ 
digôs
;

113  
	gdigôs
;

116 *
	gVÆueTøôs
<c⁄° >::
doNeg©ive
–&
t
 )

118 i‡–
t
 >= 0 )

119  
_asSåög
;

120 
	g_asSåög
[0] = '-';

121 
	gt
 = -
t
;

122  
	g_asSåög
 + 1;

125 
	gVÆueTøôs
<c⁄° >::
hugeNumbî
–
t
 )

127 *
s
 = 
doNeg©ive
–
t
 );

128 
	gs
 = 
doubÀToSåög
–
t
, 
s
, 0, 1 );

129 
	gs
 = 
c›ySåög
–
s
, "." );

130 
	gs
 = 
doubÀToSåög
–
t
, 
s
, 1, 
DIGITS_ON_RIGHT
 );

131 
	gs
 = 
c›ySåög
–
s
, "E" );

132 
	gs
 = 
numbîToSåög
–
ªquúedDigôsOnLe·
–
t
 ) - 1, 
s
 );

135 
	gVÆueTøôs
<c⁄° >::
n‹mÆNumbî
–
t
 )

137 *
s
 = 
doNeg©ive
–
t
 );

138 
	gs
 = 
doubÀToSåög
–
t
, 
s
 );

139 
	gs
 = 
c›ySåög
–
s
, "." );

140  
	gi
 = 0; i < 
	gDIGITS_ON_RIGHT
; ++ i )

141 
	gs
 = 
numbîToSåög
–()(
t
 *
BASE
Ë% BASE, 
s
 );

144 
	gVÆueTøôs
<c⁄° >::
n⁄FöôeNumbî
–
t
 )

146 *
s
 = 
_asSåög
;

147 i‡–
	gt
 !
t
 )

148 
s
 = 
c›ySåög
( s, "nan" );

150 i‡–
	gt
 >
HUGE_VAL
 )

151 
s
 = 
c›ySåög
( s, "-inf" );

152 i‡–
	gt
 <-
HUGE_VAL
 )

154 
s
 = 
c›ySåög
( s, "inf" );

157 *
	gVÆueTøôs
<c⁄° >::
doubÀToSåög
–
t
, *
s
, 
skù
, 
max
 )

159  
	gnumbîToSåög
<>–
	gt
, 
	gs
, 
	gBASE
, 
	gskù
, 
	gmax
 );

	@tools/cxxtest/cxxtest/ValueTraits.h

12 #i‚de‡
__cxxã°__VÆueTøôs_h__


13 
	#__cxxã°__VÆueTøôs_h__


	)

24 
	~<cxxã°/Fœgs.h
>

26 #ifde‡
_CXXTEST_OLD_TEMPLATE_SYNTAX


27 
	#CXXTEST_TEMPLATE_INSTANTIATION


	)

29 
	#CXXTEST_TEMPLATE_INSTANTIATION
 
ãm∂©e
<>

	)

32 #ifde‡
_CXXTEST_HAVE_STD


33 
	~<cm©h
>

35 
	~<m©h.h
>

38 
«me•a˚
 
	gCxxTe°


43 
	#TS_AS_STRING
(
x
Ë
CxxTe°
::
	`åaôs
(x).
	`asSåög
()

	)

48 
digôToCh¨
–
digô
 );

54 c⁄° *
byãToHex
–
byã
 );

60 *
byãsToSåög
–c⁄° *
byãs
, 
numByãs
, 
maxByãs
, *
s
 );

67 *
c›ySåög
–*
d°
, c⁄° *
§c
 );

73 
boﬁ
 
°rögsEquÆ
–c⁄° *
s1
, c⁄° *
s2
 );

80 *
ch¨ToSåög
–
c
, *
s
 );

85 *
ch¨ToSåög
–
c
, *
s
 );

90 
	gãm∂©e
 <
˛ass
 
	gT
>

91 ˛as†
	cVÆueTøôs


93 íum { 
	gMAX_BYTES
 = 8 };

94 
	g_asSåög
[("{ "Ë+ ("XX "Ë* 
MAX_BYTES
 + ("... }")];

96 
	gpublic
:

97 
VÆueTøôs
–c⁄° 
T
 &
t
 ) { 
byãsToSåög
–(c⁄° *)&t, (T), 
MAX_BYTES
, 
_asSåög
 ); }

98 c⁄° *
asSåög
–Ëc⁄° {  
	g_asSåög
; }

105 
	gãm∂©e
 <
˛ass
 
	gT
>

106 
ölöe
 
	gVÆueTøôs
<
	gT
> 
	$åaôs
–
T
 
t
 )

108  
VÆueTøôs
<
T
>–
t
 );

109 
	}
}

114 
	#CXXTEST_COPY_TRAITS
(
CXXTEST_NEW_CLASS
, 
CXXTEST_OLD_CLASS
) \

115 
CXXTEST_TEMPLATE_INSTANTIATION
 \

116 
˛ass
 
VÆueTøôs
< 
CXXTEST_NEW_CLASS
 > \

118 
VÆueTøôs
< 
CXXTEST_OLD_CLASS
 > 
_ﬁd
; \

119 
public
: \

120 
	`VÆueTøôs
–
CXXTEST_NEW_CLASS
 
n
 ) : 
	`_ﬁd
–(
CXXTEST_OLD_CLASS
)n ) {} \

121 c⁄° *
	`asSåög
–Ëc⁄° {  
_ﬁd
.asString(); } \

122 }

	)

127 #ifde‡
_CXXTEST_NO_COPY_CONST


128 
	#CXXTEST_COPY_CONST_TRAITS
(
CXXTEST_CLASS
)

	)

130 
	#CXXTEST_COPY_CONST_TRAITS
(
CXXTEST_CLASS
Ë
	$CXXTEST_COPY_TRAITS
(
CXXTEST_CLASS
, c⁄° CXXTEST_CLASS)

	)

136 
ãm∂©e
<
˛ass
 
N
> 
ölöe
 
boﬁ
 
	$√g©ive
–
N
 
n
 ) { Ç < 0; 
	}
}

137 
	gãm∂©e
<
˛ass
 
	gN
> 
ölöe
 
N
 
	$abs
–
N
 
n
 ) {  
	`√g©ive
“Ë? -¿:Ç; 
	}
}

139 
	#CXXTEST_NON_NEGATIVE
(
Ty≥
) \

140 
CXXTEST_TEMPLATE_INSTANTIATION
 \

141 
ölöe
 
boﬁ
 
√g©ive
<
Ty≥
>–Ty≥ ) {  
Ál£
; } \

142 
CXXTEST_TEMPLATE_INSTANTIATION
 \

143 
ölöe
 
Ty≥
 
abs
<Ty≥>–Ty≥ 
vÆue
 ) {  vÆue; }

	)

145 
	$CXXTEST_NON_NEGATIVE
–
boﬁ
 )

146 
	$CXXTEST_NON_NEGATIVE
( )

147 
	$CXXTEST_NON_NEGATIVE
( )

148 
	$CXXTEST_NON_NEGATIVE
( )

149 
	$CXXTEST_NON_NEGATIVE
( )

150 #ifde‡
_CXXTEST_LONGLONG


151 
	$CXXTEST_NON_NEGATIVE
–
_CXXTEST_LONGLONG
 )

159 
ãm∂©e
<
˛ass
 
N
>

160 *
	`numbîToSåög
–
N
 
n
, *
s
,

161 
N
 
ba£
 = 10,

162 
skùDigôs
 = 0,

163 
maxDigôs
 = ()-1 )

165 i‡–
	`√g©ive
(
n
) ) {

166 *
s
++ = '-';

167 
n
 = 
	`abs
(n);

170 
N
 
digô
 = 1;

171  
digô
 <(
n
 / 
ba£
) )

172 
digô
 *
ba£
;

173 
N
 
digôVÆue
;

174  ; 
digô
 >1 && 
skùDigôs
; 
n
 -digô * 
digôVÆue
, digô /
ba£
, -- skipDigits )

175 
digôVÆue
 = ()(
n
 / 
digô
);

176  ; 
digô
 >1 && 
maxDigôs
; 
n
 -digô * 
digôVÆue
, digô /
ba£
, -- maxDigits )

177 *
s
++ = 
	`digôToCh¨
–()(
digôVÆue
 = ()(
n
 / 
digô
)) );

179 *
s
 = '\0';

180  
s
;

181 
	}
}

188 #i‚de‡
CXXTEST_USER_VALUE_TRAITS


193 
CXXTEST_TEMPLATE_INSTANTIATION


194 
˛ass
 
	gVÆueTøôs
<const * const &>

196 
	gVÆueTøôs
 &
	g›î©‹
=–c⁄° 
VÆueTøôs
 & );

197 c⁄° *
	g_asSåög
;

199 
	gpublic
:

200 
VÆueTøôs
–c⁄° * c⁄° &
vÆue
 ) : 
_asSåög
( value ) {}

201 
VÆueTøôs
–c⁄° VÆueTøô†&
Ÿhî
 ) : 
_asSåög
( other._asString ) {}

202 c⁄° *
asSåög
–Ëc⁄° {  
_asSåög
; }

205 
CXXTEST_COPY_TRAITS
( const *, const * const & );

206 
CXXTEST_COPY_TRAITS
( *, const * const & );

211 
CXXTEST_TEMPLATE_INSTANTIATION


212 
˛ass
 
	gVÆueTøôs
<c⁄° 
	gboﬁ
>

214 
boﬁ
 
	g_vÆue
;

216 
	gpublic
:

217 
VÆueTøôs
–c⁄° 
boﬁ
 
vÆue
 ) : 
_vÆue
( value ) {}

218 c⁄° *
asSåög
–Ëc⁄° {  
_vÆue
 ? "true" : "false"; }

221 
CXXTEST_COPY_CONST_TRAITS
–
boﬁ
 );

223 #ifde‡
_CXXTEST_LONGLONG


227 
CXXTEST_TEMPLATE_INSTANTIATION


228 
˛ass
 
	gVÆueTøôs
<c⁄° sig√d 
	g_CXXTEST_LONGLONG
>

230 
_CXXTEST_LONGLONG
 
	tT
;

231 
	g_asSåög
[2 + 3 * (
T
)];

232 
	gpublic
:

233 
VÆueTøôs
–
T
 
t
 ) { 
numbîToSåög
<T>–t, 
	g_asSåög
 ); }

234 c⁄° *
asSåög
–Ëc⁄° {  
	g_asSåög
; }

237 
CXXTEST_COPY_CONST_TRAITS
–sig√d 
_CXXTEST_LONGLONG
 );

242 
CXXTEST_TEMPLATE_INSTANTIATION


243 
˛ass
 
	gVÆueTøôs
<c⁄° 
	g_CXXTEST_LONGLONG
>

245 
	t_CXXTEST_LONGLONG
 
	tT
;

246 
	g_asSåög
[1 + 3 * (
T
)];

247 
	gpublic
:

248 
VÆueTøôs
–
T
 
t
 ) { 
numbîToSåög
<T>–t, 
	g_asSåög
 ); }

249 c⁄° *
asSåög
–Ëc⁄° {  
	g_asSåög
; }

252 
CXXTEST_COPY_CONST_TRAITS
–
_CXXTEST_LONGLONG
 );

258 
CXXTEST_TEMPLATE_INSTANTIATION


259 
˛ass
 
	gVÆueTøôs
<const signed >

261 sig√d 
	tT
;

262 
	g_asSåög
[2 + 3 * (
T
)];

263 
	gpublic
:

264 
VÆueTøôs
–
T
 
t
 ) { 
numbîToSåög
<T>–t, 
	g_asSåög
 ); }

265 c⁄° *
asSåög
–Ëc⁄° {  
	g_asSåög
; }

268 
CXXTEST_COPY_CONST_TRAITS
( signed );

273 
CXXTEST_TEMPLATE_INSTANTIATION


274 
˛ass
 
	gVÆueTøôs
<const >

276 
	tT
;

277 
	g_asSåög
[1 + 3 * (
T
)];

278 
	gpublic
:

279 
VÆueTøôs
–
T
 
t
 ) { 
numbîToSåög
<T>–t, 
	g_asSåög
 ); }

280 c⁄° *
asSåög
–Ëc⁄° {  
	g_asSåög
; }

283 
CXXTEST_COPY_CONST_TRAITS
( );

289 
CXXTEST_COPY_TRAITS
( const signed , const signed );

290 
CXXTEST_COPY_TRAITS
( const , const );

291 
CXXTEST_COPY_TRAITS
( const signed , const signed );

292 
CXXTEST_COPY_TRAITS
( const , const );

293 
CXXTEST_COPY_TRAITS
( const , const );

295 
CXXTEST_COPY_CONST_TRAITS
( signed );

296 
CXXTEST_COPY_CONST_TRAITS
( );

297 
CXXTEST_COPY_CONST_TRAITS
( signed );

298 
CXXTEST_COPY_CONST_TRAITS
( );

299 
CXXTEST_COPY_CONST_TRAITS
( );

305 
CXXTEST_TEMPLATE_INSTANTIATION


306 
˛ass
 
	gVÆueTøôs
<const >

308 
	g_asSåög
[("'\\xXX'")];

309 
	gpublic
:

310 
VÆueTøôs
–
c
 ) { 
c›ySåög
–
ch¨ToSåög
–c, c›ySåög–
_asSåög
, "'" ) ), "'" ); }

311 c⁄° *
asSåög
–Ëc⁄° {  
	g_asSåög
; }

314 
CXXTEST_COPY_CONST_TRAITS
( );

320 
CXXTEST_COPY_TRAITS
( const signed , const );

321 
CXXTEST_COPY_CONST_TRAITS
( signed );

326 
CXXTEST_TEMPLATE_INSTANTIATION


327 
˛ass
 
	gVÆueTøôs
<const >

329 
	gpublic
:

330 
VÆueTøôs
–
t
 )

333 i‡––
t
 !àË|| (Å >
HUGE_VAL
 ) || (Å == -HUGE_VAL ) )

334 
n⁄FöôeNumbî
–
t
 );

335 i‡–
ªquúedDigôsOnLe·
–
t
 ) > 
	gMAX_DIGITS_ON_LEFT
 )

336 
hugeNumbî
–
t
 );

338 
n‹mÆNumbî
–
t
 );

341 c⁄° *
asSåög
–Ëc⁄° {  
	g_asSåög
; }

343 
	g¥iv©e
:

344 íum { 
MAX_DIGITS_ON_LEFT
 = 24, 
	gDIGITS_ON_RIGHT
 = 4, 
	gBASE
 = 10 };

345 
	g_asSåög
[1 + 
MAX_DIGITS_ON_LEFT
 + 1 + 
DIGITS_ON_RIGHT
 + 1];

347 
ªquúedDigôsOnLe·
–
t
 );

348 *
doNeg©ive
–&
t
 );

349 
hugeNumbî
–
t
 );

350 
n‹mÆNumbî
–
t
 );

351 
n⁄FöôeNumbî
–
t
 );

352 *
doubÀToSåög
–
t
, *
s
, 
skù
 = 0, 
max
 = ()-1 );

355 
CXXTEST_COPY_CONST_TRAITS
( );

360 
CXXTEST_COPY_TRAITS
( const , const );

361 
CXXTEST_COPY_CONST_TRAITS
( );

365 #ifde‡
_CXXTEST_HAVE_STD


366 
	~<cxxã°/StdVÆueTøôs.h
>

369 
«me•a˚
 
	gdummy_íum_ns
 {}

374 
	#CXXTEST_ENUM_TRAITS
–
TYPE
, 
VALUES
 ) \

375 
«me•a˚
 
CxxTe°
 \

377 
CXXTEST_TEMPLATE_INSTANTIATION
 \

378 
˛ass
 
VÆueTøôs
<
TYPE
> \

380 
TYPE
 
_vÆue
; \

381 
_ÁŒback
[("(" #TYPE ")"Ë+ 3 * (
TYPE
)]; \

382 
public
: \

383 
	`VÆueTøôs
–
TYPE
 
vÆue
 ) { \

384 
_vÆue
 = 
vÆue
; \

385 
numbîToSåög
<>–
_vÆue
, 
	`c›ySåög
–
_ÁŒback
, "(" #TYPE ")" ) ); \

387 c⁄° *
	`asSåög
( ) const \

389  
_vÆue
 ) \

391 
VALUES
 \

392 :  
_ÁŒback
; \

396 } 
usög
 
«me•a˚
 
dummy_íum_ns


	)

398 
	#CXXTEST_ENUM_MEMBER
–
MEMBER
 ) \

399 
MEMBER
:  #MEMBER;

	)

	@tools/cxxtest/cxxtest/Win32Gui.h

12 #i‚de‡
__cxxã°__Wö32Gui_h__


13 
	#__cxxã°__Wö32Gui_h__


	)

31 
	~<cxxã°/Gui.h
>

33 
	~<wödows.h
>

34 
	~<comm˘æ.h
>

36 
«me•a˚
 
	gCxxTe°


38 ˛as†
	cWö32Gui
 : 
public
 
GuiLi°íî


40 
public
:

41 
íãrGui
–&
¨gc
, **
¨gv
 )

43 
∑r£Comm™dLöe
–
¨gc
, 
¨gv
 );

46 
íãrW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 &
wd
 )

48 
gëTŸÆTe°s
–
wd
 );

49 
	g_ã°sD⁄e
 = 0;

50 
°¨tGuiThªad
();

53 
guiE¡îSuôe
–c⁄° *
suôeName
 )

55 
showSuôeName
–
suôeName
 );

56 
ª£t
–
_suôeSèπ
 );

59 
guiE¡îTe°
–c⁄° *
suôeName
, c⁄° *
ã°Name
 )

61 ++ 
	g_ã°sD⁄e
;

62 
£tTe°C≠ti⁄
–
suôeName
, 
ã°Name
 );

63 
showTe°Name
–
ã°Name
 );

64 
showTe°sD⁄e
();

65 
¥ogªssB¨Mesßge
–
PBM_STEPIT
 );

66 
ª£t
–
_ã°Sèπ
 );

69 
yñlowB¨
()

71 
£tCﬁ‹
( 255, 255, 0 );

72 
£tIc⁄
–
IDI_WARNING
 );

73 
gëTŸÆTe°s
();

76 
ªdB¨
()

78 i‡–
	g_°¨tMöimized
 )

79 
showMaöWödow
–
SW_SHOWNORMAL
 );

80 
£tCﬁ‹
( 255, 0, 0 );

81 
£tIc⁄
–
IDI_ERROR
 );

82 
gëTŸÆTe°s
();

85 
ÀaveGui
()

87 i‡–
kìp
() )

89 
showSumm¨y
();

90 
WaôF‹SögÀObje˘
–
_gui
, 
INFINITE
 );

92 
De°royWödow
–
_maöWödow
 );

95 
	g¥iv©e
:

96 c⁄° *
_tôÀ
;

97 
boﬁ
 
	g_°¨tMöimized
, 
	g_kìp
;

98 
HANDLE
 
	g_gui
;

99 
WNDCLASSEX
 
	g_wödowCœss
;

100 
HWND
 
	g_maöWödow
, 
	g_¥ogªssB¨
, 
	g_°©usB¨
;

101 
HANDLE
 
	g_ˇnSèπTe°s
;

102 
	g_numTŸÆTe°s
, 
	g_ã°sD⁄e
;

103 
	g_°rTŸÆTe°s
[
W‹ldDes¸ùti⁄
::
MAX_STRLEN_TOTAL_TESTS
];

105 
	gSTATUS_SUITE_NAME
, 
	gSTATUS_SUITE_TIME
,

106 
	gSTATUS_TEST_NAME
, 
	gSTATUS_TEST_TIME
,

107 
	gSTATUS_TESTS_DONE
, 
	gSTATUS_WORLD_TIME
,

108 
	gSTATUS_TOTAL_PARTS


110 
	g_°©usWidths
[
STATUS_TOTAL_PARTS
];

111 
	g_°©usOff£ts
[
STATUS_TOTAL_PARTS
];

112 
	g_°©usTŸÆ
;

113 
	g_°©usTe°sD⁄e
[("1000000000 o‡ (100%)"Ë+ 
W‹ldDes¸ùti⁄
::
MAX_STRLEN_TOTAL_TESTS
];

114 
DWORD
 
	g_w‹ldSèπ
, 
	g_suôeSèπ
, 
	g_ã°Sèπ
;

115 
	g_timeSåög
[("00:00:00")];

117 
∑r£Comm™dLöe
–
¨gc
, **
¨gv
 )

119 
	g_°¨tMöimized
 = 
_kìp
 = 
Ál£
;

120 
	g_tôÀ
 = 
¨gv
[0];

122  
	gi
 = 1; i < 
	g¨gc
; ++ i )

124 i‡–!
l°rcmpA
–
¨gv
[
i
], "-minimized" ) )

125 
	g_°¨tMöimized
 = 
åue
;

126 i‡–!
l°rcmpA
–
¨gv
[
i
], "-keep" ) )

127 
	g_kìp
 = 
åue
;

128 i‡–!
l°rcmpA
–
¨gv
[
i
], "-tôÀ" ) && (
	gi
 + 1 < 
	g¨gc
) )

129 
	g_tôÀ
 = 
¨gv
[++
i
];

133 
gëTŸÆTe°s
()

135 
gëTŸÆTe°s
–
åackî
().
w‹ld
() );

138 
gëTŸÆTe°s
–c⁄° 
W‹ldDes¸ùti⁄
 &
wd
 )

140 
	g_numTŸÆTe°s
 = 
wd
.
numTŸÆTe°s
();

141 
	gwd
.
°rTŸÆTe°s
–
_°rTŸÆTe°s
 );

144 
°¨tGuiThªad
()

146 
	g_ˇnSèπTe°s
 = 
Cª©eEvít
–
NULL
, 
TRUE
, 
FALSE
, NULL );

147 
DWORD
 
	gthªadId
;

148 
	g_gui
 = 
Cª©eThªad
–
NULL
, 0, &(
Wö32Gui
::
guiThªad
), (
LPVOID
)
this
, 0, &
thªadId
 );

149 
WaôF‹SögÀObje˘
–
_ˇnSèπTe°s
, 
INFINITE
 );

152 
DWORD
 
WINAPI
 
guiThªad
–
LPVOID
 
∑ømëî
 )

154 ((
	gWö32Gui
 *)
	g∑ømëî
)->
gui
();

158 
gui
()

160 
ªgi°îWödowCœss
();

161 
¸óãMaöWödow
();

162 
öôComm⁄C⁄åﬁs
();

163 
¸óãProgªssB¨
();

164 
¸óãSètusB¨
();

165 
˚¡îMaöWödow
();

166 
showMaöWödow
();

167 
°¨tTimî
();

168 
°¨tTe°s
();

170 
mesßgeLo›
();

173 
ªgi°îWödowCœss
()

175 
	g_wödowCœss
.
	gcbSize
 = (
_wödowCœss
);

176 
	g_wödowCœss
.
	g°yÀ
 = 
CS_HREDRAW
 | 
CS_VREDRAW
;

177 
	g_wödowCœss
.
	gÕ‚WndProc
 = &(
Wö32Gui
::
wödowPro˚duª
);

178 
	g_wödowCœss
.
	gcbClsExåa
 = 0;

179 
	g_wödowCœss
.
	gcbWndExåa
 = (
LONG
);

180 
	g_wödowCœss
.
	ghIn°™˚
 = (
HINSTANCE
)
NULL
;

181 
	g_wödowCœss
.
	ghIc⁄
 = (
HICON
)
NULL
;

182 
	g_wödowCœss
.
	ghCurs‹
 = (
HCURSOR
)
NULL
;

183 
	g_wödowCœss
.
	ghbrBackground
 = (
HBRUSH
)(
COLOR_WINDOW
 + 1);

184 
	g_wödowCœss
.
	gÕszMíuName
 = 
NULL
;

185 
	g_wödowCœss
.
	gÕszCœssName
 = 
TEXT
("CxxTest Window Class");

186 
	g_wödowCœss
.
	ghIc⁄Sm
 = (
HICON
)
NULL
;

188 
Regi°îCœssEx
–&
_wödowCœss
 );

191 
¸óãMaöWödow
()

193 
	g_maöWödow
 = 
¸óãWödow
–
_wödowCœss
.
ÕszCœssName
, 
WS_OVERLAPPEDWINDOW
 );

196 
öôComm⁄C⁄åﬁs
()

198 
HMODULE
 
	gdŒ
 = 
LﬂdLibøryA
( "comctl32.dll" );

199 i‡–!
	gdŒ
 )

202 (
WINAPI
 *
	tFUNC
)( );

203 
FUNC
 
	gfunc
 = (FUNC)
GëProcAddªss
–
dŒ
, "InitCommonControls" );

204 i‡–!
	gfunc
 )

207 
func
();

210 
¸óãProgªssB¨
()

212 
	g_¥ogªssB¨
 = 
¸óãWödow
–
PROGRESS_CLASS
, 
WS_CHILD
 | 
WS_VISIBLE
 | 
PBS_SMOOTH
, 
_maöWödow
 );

214 #ifde‡
PBM_SETRANGE32


215 
¥ogªssB¨Mesßge
–
PBM_SETRANGE32
, 0, 
_numTŸÆTe°s
 );

217 
¥ogªssB¨Mesßge
–
PBM_SETRANGE
, 0, 
MAKELPARAM
–0, (
WORD
)
_numTŸÆTe°s
 ) );

219 
¥ogªssB¨Mesßge
–
PBM_SETPOS
, 0 );

220 
¥ogªssB¨Mesßge
–
PBM_SETSTEP
, 1 );

221 
gªíB¨
();

222 
Upd©eWödow
–
_¥ogªssB¨
 );

225 
¸óãSètusB¨
()

227 
	g_°©usB¨
 = 
¸óãWödow
–
STATUSCLASSNAME
, 
WS_CHILD
 | 
WS_VISIBLE
, 
_maöWödow
 );

228 
£tR©ios
( 4, 1, 3, 1, 3, 1 );

231 
£tR©ios
–
suôeNameR©io
, 
suôeTimeR©io
,

232 
ã°NameR©io
, 
ã°TimeR©io
,

233 
ã°sD⁄eR©io
, 
w‹ldTimeR©io
 )

235 
	g_°©usTŸÆ
 = 0;

236 
	g_°©usOff£ts
[
STATUS_SUITE_NAME
] = (
_°©usTŸÆ
 +
suôeNameR©io
);

237 
	g_°©usOff£ts
[
STATUS_SUITE_TIME
] = (
_°©usTŸÆ
 +
suôeTimeR©io
);

238 
	g_°©usOff£ts
[
STATUS_TEST_NAME
] = (
_°©usTŸÆ
 +
ã°NameR©io
);

239 
	g_°©usOff£ts
[
STATUS_TEST_TIME
] = (
_°©usTŸÆ
 +
ã°TimeR©io
);

240 
	g_°©usOff£ts
[
STATUS_TESTS_DONE
] = (
_°©usTŸÆ
 +
ã°sD⁄eR©io
);

241 
	g_°©usOff£ts
[
STATUS_WORLD_TIME
] = (
_°©usTŸÆ
 +
w‹ldTimeR©io
);

244 
HWND
 
¸óãWödow
–
LPCTSTR
 
˛assName
, 
DWORD
 
°yÀ
, HWND 
∑ª¡
 = (HWND)
NULL
 )

246  
Cª©eWödow
–
˛assName
, 
NULL
, 
°yÀ
, 0, 0, 0, 0, 
∑ª¡
,

247 (
HMENU
)
NULL
, (
HINSTANCE
)NULL, (
LPVOID
)
this
 );

250 
¥ogªssB¨Mesßge
–
UINT
 
mesßge
, 
WPARAM
 
wP¨am
 = 0, 
LPARAM
 
lP¨am
 = 0 )

252 
SídMesßge
–
_¥ogªssB¨
, 
mesßge
, 
wP¨am
, 
lP¨am
 );

255 
˚¡îMaöWödow
()

257 
RECT
 
	gs¸ìn
;

258 
gëS¸ìnAªa
–
s¸ìn
 );

260 
LONG
 
	gs¸ìnWidth
 = 
s¸ìn
.
right
 - s¸ìn.
À·
;

261 
LONG
 
	gs¸ìnHeight
 = 
s¸ìn
.
bŸtom
 - s¸ìn.
t›
;

263 
LONG
 
	gxCíãr
 = (
s¸ìn
.
right
 + s¸ìn.
À·
) / 2;

264 
LONG
 
	gyCíãr
 = (
s¸ìn
.
bŸtom
 + s¸ìn.
t›
) / 2;

266 
LONG
 
	gwödowWidth
 = (
s¸ìnWidth
 * 4) / 5;

267 
LONG
 
	gwödowHeight
 = 
s¸ìnHeight
 / 10;

268 
LONG
 
	gmöimumHeight
 = 2 * (
GëSy°emMërics
–
SM_CYCAPTION
 ) + GëSy°emMërics–
SM_CYFRAME
 ));

269 i‡–
	gwödowHeight
 < 
	gmöimumHeight
 )

270 
	gwödowHeight
 = 
möimumHeight
;

272 
SëWödowPos
–
_maöWödow
, 
HWND_TOP
,

273 
xCíãr
 - (
wödowWidth
 / 2), 
yCíãr
 - (
wödowHeight
 / 2),

274 
wödowWidth
, 
wödowHeight
, 0 );

277 
gëS¸ìnAªa
–
RECT
 &
¨ó
 )

279 i‡–!
gëS¸ìnAªaWôhoutTaskb¨
–
¨ó
 ) )

280 
gëWhﬁeS¸ìnAªa
–
¨ó
 );

283 
boﬁ
 
gëS¸ìnAªaWôhoutTaskb¨
–
RECT
 &
¨ó
 )

285  (
Sy°emP¨amëîsInfo
–
SPI_GETWORKAREA
, (
RECT
), &
¨ó
, 0 ) != 0);

288 
gëWhﬁeS¸ìnAªa
–
RECT
 &
¨ó
 )

290 
	g¨ó
.
	gÀ·
 = 
¨ó
.
t›
 = 0;

291 
	g¨ó
.
	gright
 = 
GëSy°emMërics
–
SM_CXSCREEN
 );

292 
	g¨ó
.
	gbŸtom
 = 
GëSy°emMërics
–
SM_CYSCREEN
 );

295 
showMaöWödow
()

297 
showMaöWödow
–
_°¨tMöimized
 ? 
SW_MINIMIZE
 : 
SW_SHOWNORMAL
 );

298 
Upd©eWödow
–
_maöWödow
 );

301 
showMaöWödow
–
mode
 )

303 
ShowWödow
–
_maöWödow
, 
mode
 );

306 íum { 
	gTIMER_ID
 = 1, 
	gTIMER_DELAY
 = 1000 };

308 
°¨tTimî
()

310 
ª£t
–
_w‹ldSèπ
 );

311 
ª£t
–
_suôeSèπ
 );

312 
ª£t
–
_ã°Sèπ
 );

313 
SëTimî
–
_maöWödow
, 
TIMER_ID
, 
TIMER_DELAY
, 0 );

316 
ª£t
–
DWORD
 &
tick
 )

318 
	gtick
 = 
GëTickCou¡
();

321 
°¨tTe°s
()

323 
SëEvít
–
_ˇnSèπTe°s
 );

326 
mesßgeLo›
()

328 
MSG
 
	gmesßge
;

329  
BOOL
 
	ghaveMesßge
 = 
GëMesßge
–&
mesßge
, 
NULL
, 0, 0 ) )

330 i‡–
	ghaveMesßge
 != -1 )

331 
Di•©chMesßge
–&
mesßge
 );

334 
LRESULT
 
CALLBACK
 
wödowPro˚duª
–
HWND
 
wödow
, 
UINT
 
mesßge
, 
WPARAM
 
wP¨am
, 
LPARAM
 
lP¨am
 )

336 i‡–
	gmesßge
 =
WM_CREATE
 )

337 
£tUp
–
wödow
, (
LPCREATESTRUCT
)
lP¨am
 );

339 
Wö32Gui
 *
	gth©
 = (Wö32Guò*)
GëWödowL⁄g
–
wödow
, 
GWL_USERDATA
 );

340  
	gth©
->
h™dÀ
–
wödow
, 
mesßge
, 
wP¨am
, 
lP¨am
 );

343 
£tUp
–
HWND
 
wödow
, 
LPCREATESTRUCT
 
¸óã
 )

345 
SëWödowL⁄g
–
wödow
, 
GWL_USERDATA
, (
LONG
)
¸óã
->
ÕCª©eP¨ams
 );

348 
LRESULT
 
h™dÀ
–
HWND
 
wödow
, 
UINT
 
mesßge
, 
WPARAM
 
wP¨am
, 
LPARAM
 
lP¨am
 )

350  
	gmesßge
 )

352 
	gWM_SIZE
: 
ªsizeC⁄åﬁs
(); ;

354 
	gWM_TIMER
: 
upd©eTime
(); ;

356 
	gWM_CLOSE
:

357 
WM_DESTROY
:

358 
WM_QUIT
:

359 
ExôPro˚ss
–
åackî
().
ÁûedTe°s
() );

361 :  
DefWödowProc
–
wödow
, 
mesßge
, 
wP¨am
, 
lP¨am
 );

366 
ªsizeC⁄åﬁs
()

368 
RECT
 
	gr
;

369 
GëClõ¡Re˘
–
_maöWödow
, &
r
 );

370 
LONG
 
	gwidth
 = 
r
.
right
 -Ñ.
À·
;

371 
LONG
 
	gheight
 = 
r
.
bŸtom
 -Ñ.
t›
;

373 
GëClõ¡Re˘
–
_°©usB¨
, &
r
 );

374 
LONG
 
	g°©usHeight
 = 
r
.
bŸtom
 -Ñ.
t›
;

375 
LONG
 
	gªsizeGrùWidth
 = 
°©usHeight
;

376 
LONG
 
	g¥ogªssHeight
 = 
height
 - 
°©usHeight
;

378 
SëWödowPos
–
_¥ogªssB¨
, 
HWND_TOP
, 0, 0, 
width
, 
¥ogªssHeight
, 0 );

379 
SëWödowPos
–
_°©usB¨
, 
HWND_TOP
, 0, 
¥ogªssHeight
, 
width
, 
°©usHeight
, 0 );

380 
£tSètusP¨ts
–
width
 - 
ªsizeGrùWidth
 );

383 
£tSètusP¨ts
–
LONG
 
width
 )

385  
	gi
 = 0; i < 
	gSTATUS_TOTAL_PARTS
; ++ i )

386 
	g_°©usWidths
[
i
] = (
width
 * 
_°©usOff£ts
[i]Ë/ 
_°©usTŸÆ
;

388 
°©usB¨Mesßge
–
SB_SETPARTS
, 
STATUS_TOTAL_PARTS
, 
_°©usWidths
 );

391 
°©usB¨Mesßge
–
UINT
 
mesßge
, 
WPARAM
 
wP¨am
 = 0, c⁄° *
lP¨am
 = 0 )

393 
SídMesßge
–
_°©usB¨
, 
mesßge
, 
wP¨am
, (
LPARAM
)
lP¨am
 );

396 
gªíB¨
()

398 
£tCﬁ‹
( 0, 255, 0 );

399 
£tIc⁄
–
IDI_INFORMATION
 );

402 #ifde‡
PBM_SETBARCOLOR


403 
£tCﬁ‹
–
BYTE
 
ªd
, BYTE 
gªí
, BYTE 
blue
 )

405 
¥ogªssB¨Mesßge
–
PBM_SETBARCOLOR
, 0, 
RGB
–
ªd
, 
gªí
, 
blue
 ) );

408 
£tCﬁ‹
–
BYTE
, BYTE, BYTE )

413 
£tIc⁄
–
LPCTSTR
 
ic⁄
 )

415 
SídMesßge
–
_maöWödow
, 
WM_SETICON
, 
ICON_BIG
, (
LPARAM
)
lﬂdSènd¨dIc⁄
–
ic⁄
 ) );

418 
HICON
 
lﬂdSènd¨dIc⁄
–
LPCTSTR
 
ic⁄
 )

420  
LﬂdIc⁄
–(
HINSTANCE
)
NULL
, 
ic⁄
 );

423 
£tTe°C≠ti⁄
–c⁄° *
suôeName
, c⁄° *
ã°Name
 )

425 
£tC≠ti⁄
–
suôeName
, "::", 
ã°Name
, "()" );

428 
£tC≠ti⁄
–c⁄° *
a
 = "", c⁄° *
b
 = "", c⁄° *
c
 = "", c⁄° *
d
 = "" )

430 
Àngth
 = 
l°æíA
–
_tôÀ
 ) + ( " - " ) +

431 
l°æíA
–
a
 ) +Ü°æíA–
b
 ) +Ü°æíA–
c
 ) +Ü°æíA–
d
 );

432 *
	g«me
 = 
Æloˇã
–
Àngth
 );

433 
l°r˝yA
–
«me
, 
_tôÀ
 );

434 
l°rˇtA
–
«me
, " - " );

435 
l°rˇtA
–
«me
, 
a
 );

436 
l°rˇtA
–
«me
, 
b
 );

437 
l°rˇtA
–
«me
, 
c
 );

438 
l°rˇtA
–
«me
, 
d
 );

439 
SëWödowTextA
–
_maöWödow
, 
«me
 );

440 
dóŒoˇã
–
«me
 );

443 
showSuôeName
–c⁄° *
suôeName
 )

445 
£tSètusP¨t
–
STATUS_SUITE_NAME
, 
suôeName
 );

448 
showTe°Name
–c⁄° *
ã°Name
 )

450 
£tSètusP¨t
–
STATUS_TEST_NAME
, 
ã°Name
 );

453 
showTe°sD⁄e
()

455 
w•rötfA
–
_°©usTe°sD⁄e
, "%u of %s (%u%%)",

456 
_ã°sD⁄e
, 
_°rTŸÆTe°s
,

457 (
_ã°sD⁄e
 * 100Ë/ 
_numTŸÆTe°s
 );

458 
£tSètusP¨t
–
STATUS_TESTS_DONE
, 
_°©usTe°sD⁄e
 );

461 
upd©eTime
()

463 
£tSètusTime
–
STATUS_WORLD_TIME
, 
_w‹ldSèπ
 );

464 
£tSètusTime
–
STATUS_SUITE_TIME
, 
_suôeSèπ
 );

465 
£tSètusTime
–
STATUS_TEST_TIME
, 
_ã°Sèπ
 );

468 
£tSètusTime
–
∑π
, 
DWORD
 
°¨t
 )

470 
	gtŸÆ
 = (
GëTickCou¡
(Ë- 
°¨t
) / 1000;

471 
	ghours
 = 
tŸÆ
 / 3600;

472 
	gmöuãs
 = (
tŸÆ
 / 60) % 60;

473 
	g£c⁄ds
 = 
tŸÆ
 % 60;

475 i‡–
	ghours
 )

476 
w•rötfA
–
_timeSåög
, "%u:%02u:%02u", 
hours
, 
möuãs
, 
£c⁄ds
 );

478 
w•rötfA
–
_timeSåög
, "%02u:%02u", 
möuãs
, 
£c⁄ds
 );

480 
£tSètusP¨t
–
∑π
, 
_timeSåög
 );

483 
boﬁ
 
kìp
()

485 i‡–!
	g_kìp
 )

486  
	gÁl£
;

487 i‡–!
	g_°¨tMöimized
 )

488  
	gåue
;

489  (
	g_maöWödow
 =
GëF‹egroundWödow
());

492 
showSumm¨y
()

494 
°›Timî
();

495 
£tSumm¨ySètusB¨
();

496 
£tSumm¨yC≠ti⁄
();

499 
£tSètusP¨t
–
∑π
, c⁄° *
ãxt
 )

501 
°©usB¨Mesßge
–
SB_SETTEXTA
, 
∑π
, 
ãxt
 );

504 
°›Timî
()

506 
KûlTimî
–
_maöWödow
, 
TIMER_ID
 );

507 
£tSètusTime
–
STATUS_WORLD_TIME
, 
_w‹ldSèπ
 );

510 
£tSumm¨ySètusB¨
()

512 
£tR©ios
( 0, 0, 0, 0, 1, 1 );

513 
ªsizeC⁄åﬁs
();

515 c⁄° *
	gã°s
 = (
_numTŸÆTe°s
 == 1) ? "test" : "tests";

516 i‡–
åackî
().
ÁûedTe°s
() )

517 
w•rötfA
–
_°©usTe°sD⁄e
, "Failed %u of %s %s",

518 
åackî
().
ÁûedTe°s
(), 
_°rTŸÆTe°s
, 
ã°s
 );

520 
w•rötfA
–
_°©usTe°sD⁄e
, "%†%†∑s£d", 
_°rTŸÆTe°s
, 
ã°s
 );

522 
£tSètusP¨t
–
STATUS_TESTS_DONE
, 
_°©usTe°sD⁄e
 );

525 
£tSumm¨yC≠ti⁄
()

527 
£tC≠ti⁄
–
_°©usTe°sD⁄e
 );

530 *
Æloˇã
–
Àngth
 )

532  (*)
HópAŒoc
–
GëPro˚ssHóp
(), 0, 
Àngth
 );

535 
dóŒoˇã
–*
d©a
 )

537 
HópFªe
–
GëPro˚ssHóp
(), 0, 
d©a
 );

	@tools/cxxtest/cxxtest/X11Gui.h

12 #i‚de‡
__cxxã°__X11Gui_h__


13 
	#__cxxã°__X11Gui_h__


	)

26 
	~<cxxã°/Gui.h
>

28 
	~<X11/Xlib.h
>

29 
	~<X11/Xutû.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

34 
«me•a˚
 
	gCxxTe°


36 ˛as†
	cX11Gui
 : 
public
 
GuiLi°íî


38 
public
:

39 
íãrGui
–&
¨gc
, **
¨gv
 )

41 
∑r£Comm™dLöe
–
¨gc
, 
¨gv
 );

44 
íãrW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 &
wd
 )

46 
›íDi•œy
();

47 i‡–
	g_di•œy
 ) {

48 
¸óãCﬁ‹s
();

49 
¸óãWödow
();

50 
¸óãGc
();

51 
¸óãF⁄t
();

52 
˚¡îWödow
();

53 
öôülizeEvíts
();

54 
öôülizeB¨
–
wd
 );

55 
¥o˚ssEvíts
();

59 
guiE¡îTe°
–c⁄° *
suôeName
, c⁄° *
ã°Name
 )

61 i‡–
	g_di•œy
 ) {

62 ++ 
	g_ã°sD⁄e
;

63 
£tWödowName
–
suôeName
, 
ã°Name
 );

64 
ªdøw
();

68 
yñlowB¨
()

70 i‡–
	g_di•œy
 ) {

71 
	g_b¨Cﬁ‹
 = 
gëCﬁ‹
–
_yñlowName
 );

72 
gëTŸÆTe°s
();

73 
¥o˚ssEvíts
();

77 
ªdB¨
()

79 i‡–
	g_di•œy
 ) {

80 
	g_b¨Cﬁ‹
 = 
gëCﬁ‹
–
_ªdName
 );

81 
gëTŸÆTe°s
();

82 
¥o˚ssEvíts
();

86 
ÀaveGui
()

88 i‡–
	g_di•œy
 ) {

89 
‰ìF⁄tInfo
();

90 
de°royGc
();

91 
de°royWödow
();

92 
˛o£Di•œy
();

96 
	g¥iv©e
:

97 c⁄° *
_¥ogømName
;

98 
Di•œy
 *
	g_di•œy
;

99 
Wödow
 
	g_wödow
;

100 
	g_numTŸÆTe°s
, 
	g_ã°sD⁄e
;

101 
	g_°rTŸÆTe°s
[
W‹ldDes¸ùti⁄
::
MAX_STRLEN_TOTAL_TESTS
];

102 c⁄° *
	g_f‹egroundName
, *
	g_backgroundName
;

103 c⁄° *
	g_gªíName
, *
	g_yñlowName
, *
	g_ªdName
;

104 
	g_f‹eground
, 
	g_background
, 
	g_b¨Cﬁ‹
;

105 
	g_width
, 
	g_height
;

106 
GC
 
	g_gc
;

107 c⁄° *
	g_f⁄tName
;

108 
XID
 
	g_f⁄tId
;

109 
XF⁄tSåu˘
 *
	g_f⁄tInfo
;

110 
	g_ãxtHeight
, 
	g_ãxtDes˚¡
;

111 
	g_evítMask
;

112 
Cﬁ‹m≠
 
	g_cﬁ‹m≠
;

114 
∑r£Comm™dLöe
–&
¨gc
, **
¨gv
 )

116 
	g_¥ogømName
 = 
¨gv
[0];

118 
	g_f⁄tName
 = 0;

119 
	g_f‹egroundName
 = "Black";

120 
	g_backgroundName
 = "Grey";

121 
	g_gªíName
 = "Green";

122 
	g_yñlowName
 = "Yellow";

123 
	g_ªdName
 = "Red";

125  
	gi
 = 1; i + 1 < 
	g¨gc
; ++ i ) {

126 i‡–!
°rcmp
–
¨gv
[
i
], "-title" ) )

127 
	g_¥ogømName
 = 
¨gv
[++ 
i
];

128 i‡–!
°rcmp
–
¨gv
[
i
], "-fn" ) || !strcmp(árgv[i], "-font" ) )

129 
	g_f⁄tName
 = 
¨gv
[++ 
i
];

130 i‡–!
°rcmp
–
¨gv
[
i
], "-fg" ) || !strcmp(árgv[i], "-foreground" ) )

131 
	g_f‹egroundName
 = 
¨gv
[++ 
i
];

132 i‡–!
°rcmp
–
¨gv
[
i
], "-bg" ) || !strcmp(árgv[i], "-background" ) )

133 
	g_backgroundName
 = 
¨gv
[++ 
i
];

134 i‡–!
°rcmp
–
¨gv
[
i
], "-green" ) )

135 
	g_gªíName
 = 
¨gv
[++ 
i
];

136 i‡–!
°rcmp
–
¨gv
[
i
], "-yellow" ) )

137 
	g_yñlowName
 = 
¨gv
[++ 
i
];

138 i‡–!
°rcmp
–
¨gv
[
i
], "-red" ) )

139 
	g_ªdName
 = 
¨gv
[++ 
i
];

143 
›íDi•œy
()

145 
	g_di•œy
 = 
XO≥nDi•œy
–
NULL
 );

148 
¸óãCﬁ‹s
()

150 
	g_cﬁ‹m≠
 = 
DeÁu…Cﬁ‹m≠
–
_di•œy
, 0 );

151 
	g_f‹eground
 = 
gëCﬁ‹
–
_f‹egroundName
 );

152 
	g_background
 = 
gëCﬁ‹
–
_backgroundName
 );

155 
gëCﬁ‹
–c⁄° *
cﬁ‹Name
 )

157 
XCﬁ‹
 
	gcﬁ‹
;

158 
XP¨£Cﬁ‹
–
_di•œy
, 
_cﬁ‹m≠
, 
cﬁ‹Name
, &
cﬁ‹
 );

159 
XAŒocCﬁ‹
–
_di•œy
, 
_cﬁ‹m≠
, &
cﬁ‹
 );

160  
	gcﬁ‹
.
	gpixñ
;

163 
¸óãWödow
()

165 
	g_wödow
 = 
XCª©eSim∂eWödow
–
_di•œy
, 
RoŸWödow
–_di•œy, 0 ), 0, 0, 1, 1, 0, 0, 
_background
 );

168 
¸óãGc
()

170 
	g_gc
 = 
XCª©eGC
–
_di•œy
, 
_wödow
, 0, 0 );

173 
¸óãF⁄t
()

175 i‡–!
lﬂdF⁄t
() )

176 
u£DeÁu…F⁄t
();

177 
gëF⁄tInfo
();

178 
	g_ãxtHeight
 = 
_f⁄tInfo
->
as˚¡
 + _f⁄tInfo->
des˚¡
;

179 
	g_ãxtDes˚¡
 = 
_f⁄tInfo
->
des˚¡
;

182 
boﬁ
 
lﬂdF⁄t
()

184 i‡–!
	g_f⁄tName
 )

185  
	gÁl£
;

186 
	g_f⁄tId
 = 
XLﬂdF⁄t
–
_di•œy
, 
_f⁄tName
 );

187  (
XSëF⁄t
–
_di•œy
, 
_gc
, 
_f⁄tId
 ) =
Suc˚ss
);

190 
u£DeÁu…F⁄t
()

192 
	g_f⁄tId
 = 
XGC⁄ãxtFromGC
–
_gc
 );

195 
gëF⁄tInfo
()

197 
	g_f⁄tInfo
 = 
XQuîyF⁄t
–
_di•œy
, 
_f⁄tId
 );

200 
‰ìF⁄tInfo
()

202 
XFªeF⁄tInfo
–
NULL
, 
_f⁄tInfo
, 1 );

205 
öôülizeEvíts
()

207 
	g_evítMask
 = 
ExposuªMask
;

208 
XSñe˘I≈ut
–
_di•œy
, 
_wödow
, 
_evítMask
 );

211 
öôülizeB¨
–c⁄° 
W‹ldDes¸ùti⁄
 &
wd
 )

213 
gëTŸÆTe°s
–
wd
 );

214 
	g_ã°sD⁄e
 = 0;

215 
	g_b¨Cﬁ‹
 = 
gëCﬁ‹
–
_gªíName
 );

218 
gëTŸÆTe°s
()

220 
gëTŸÆTe°s
–
åackî
().
w‹ld
() );

223 
gëTŸÆTe°s
–c⁄° 
W‹ldDes¸ùti⁄
 &
wd
 )

225 
	g_numTŸÆTe°s
 = 
wd
.
numTŸÆTe°s
();

226 
	gwd
.
°rTŸÆTe°s
–
_°rTŸÆTe°s
 );

229 
˚¡îWödow
()

231 
XM≠Wödow
–
_di•œy
, 
_wödow
 );

233 
S¸ìn
 *
	gs¸ìn
 = 
XDeÁu…S¸ìnOfDi•œy
–
_di•œy
 );

234 
	gs¸ìnWidth
 = 
WidthOfS¸ìn
–
s¸ìn
 );

235 
	gs¸ìnHeight
 = 
HeightOfS¸ìn
–
s¸ìn
 );

236 
	gxCíãr
 = 
s¸ìnWidth
 / 2;

237 
	gyCíãr
 = 
s¸ìnHeight
 / 2;

239 
	g_width
 = (
s¸ìnWidth
 * 4) / 5;

240 
	g_height
 = 
s¸ìnHeight
 / 14;

242 
XMoveResizeWödow
–
_di•œy
, 
_wödow
, 
xCíãr
 - (
_width
 / 2), 
yCíãr
 - (
_height
 / 2), _width, _height );

245 
¥o˚ssEvíts
()

247 
ªdøw
();

249 
XEvít
 
	gevít
;

250  
XCheckMaskEvít
–
_di•œy
, 
_evítMask
, &
evít
 ) )

251 
ªdøw
();

254 
£tWödowName
–c⁄° *
suôeName
, c⁄° *
ã°Name
 )

256 
	gÀngth
 = 
°æí
–
_¥ogømName
 ) + såÀn–
suôeName
 ) + såÀn–
ã°Name
 ) + ( " - ::()" );

257 *
	g«me
 = (*)
mÆloc
–
Àngth
 );

258 
•rötf
–
«me
, "%†- %s::%s()", 
_¥ogømName
, 
suôeName
, 
ã°Name
 );

259 
XSëSènd¨dPr›îtõs
–
_di•œy
, 
_wödow
, 
«me
, 0, 0, 0, 0, 0 );

260 
‰ì
–
«me
 );

263 
ªdøw
()

265 
gëWödowSize
();

266 
døwSﬁidB¨
();

267 
døwDividîs
();

268 
døwPî˚¡age
();

269 
Êush
();

272 
gëWödowSize
()

274 
XWödowAâribuãs
 
	g©åibuãs
;

275 
XGëWödowAâribuãs
–
_di•œy
, 
_wödow
, &
©åibuãs
 );

276 
	g_width
 = 
©åibuãs
.
width
;

277 
	g_height
 = 
©åibuãs
.
height
;

280 
døwSﬁidB¨
()

282 
	gb¨Width
 = (
_width
 * 
_ã°sD⁄e
Ë/ 
_numTŸÆTe°s
;

284 
XSëF‹eground
–
_di•œy
, 
_gc
, 
_b¨Cﬁ‹
 );

285 
XFûlRe˘™gÀ
–
_di•œy
, 
_wödow
, 
_gc
, 0, 0, 
b¨Width
, 
_height
 );

287 
XSëF‹eground
–
_di•œy
, 
_gc
, 
_background
 );

288 
XFûlRe˘™gÀ
–
_di•œy
, 
_wödow
, 
_gc
, 
b¨Width
, 0, 
_width
 + 1 - b¨Width, 
_height
 );

291 
døwDividîs
()

293 if(
	g_width
 / 
	g_numTŸÆTe°s
 < 5)

295  
	gi
 = 1; i < 
	g_ã°sD⁄e
; ++ i ) {

296 
	gx
 = (
_width
 * 
i
Ë/ 
_numTŸÆTe°s
;

297 
XDøwLöe
–
_di•œy
, 
_wödow
, 
_gc
, 
x
, 0, x, 
_height
);

301 
døwPî˚¡age
()

303 
XSëF‹eground
–
_di•œy
, 
_gc
, 
_f‹eground
 );

305 
	g°r
[("1000000000 o‡"Ë+ (
_°rTŸÆTe°s
) + (" (100%)")];

306 
•rötf
–
°r
, "%u o‡%†(%u%%)", 
_ã°sD⁄e
, 
_°rTŸÆTe°s
, (_ã°sD⁄ê* 100Ë/ 
_numTŸÆTe°s
 );

307 
	gÀn
 = 
°æí
–
°r
 );

309 
	gãxtWidth
 = 
XTextWidth
–
_f⁄tInfo
, 
°r
, 
Àn
 );

311 
XDøwSåög
–
_di•œy
, 
_wödow
, 
_gc
,

312 (
_width
 - 
ãxtWidth
Ë/ 2, ((
_height
 + 
_ãxtHeight
Ë/ 2Ë- 
_ãxtDes˚¡
,

313 
°r
, 
Àn
 );

316 
Êush
()

318 
XFlush
–
_di•œy
 );

321 
de°royGc
()

323 
XFªeGC
–
_di•œy
, 
_gc
 );

326 
de°royWödow
()

328 
XDe°royWödow
–
_di•œy
, 
_wödow
 );

331 
˛o£Di•œy
()

333 
XClo£Di•œy
–
_di•œy
 );

	@tools/cxxtest/cxxtest/XUnitPrinter.h

12 #i‚de‡
__CXXTEST__XUNIT_PRINTER_H


13 
	#__CXXTEST__XUNIT_PRINTER_H


	)

19 
	~<cxxã°/TìLi°íî.h
>

20 
	~<cxxã°/Eº‹Pröãr.h
>

21 
	~<cxxã°/XmlPröãr.h
>

23 
«me•a˚
 
	gCxxTe°


25 ˛as†
	cXUnôPröãr
 : 
public
 
TìLi°íî


27 
public
:

29 
XmlPröãr
 
xml_¥öãr
;

30 
Eº‹Pröãr
 
	gîr‹_¥öãr
;

32 
XUnôPröãr
–
CXXTEST_STD
(
o°ªam
Ë&
o
 = CXXTEST_STD(
cout
) )

33 : 
xml_¥öãr
(
o
)

35 
£tFú°
–
îr‹_¥öãr
 );

36 
£tSec⁄d
–
xml_¥öãr
 );

39 
run
()

41 
	gTe°Ru¬î
::
runAŒTe°s
–*
this
 );

42  
åackî
().
ÁûedTe°s
();

	@tools/cxxtest/cxxtest/XmlFormatter.h

14 #i‚de‡
__CXXTEST__XMLFORMATTER_H


15 
	#__CXXTEST__XMLFORMATTER_H


	)

26 
	#CXXTEST_STACK_TRACE_ESCAPE_AS_XML


	)

27 
	#CXXTEST_STACK_TRACE_NO_ESCAPE_FILELINE_AFFIXES


	)

29 
	#CXXTEST_STACK_TRACE_INITIAL_PREFIX
 "<°ack-‰amêfun˘i⁄=\""

	)

30 
	#CXXTEST_STACK_TRACE_INITIAL_SUFFIX
 "\"/>\n"

	)

31 
	#CXXTEST_STACK_TRACE_OTHER_PREFIX
 
CXXTEST_STACK_TRACE_INITIAL_PREFIX


	)

32 
	#CXXTEST_STACK_TRACE_OTHER_SUFFIX
 
CXXTEST_STACK_TRACE_INITIAL_SUFFIX


	)

33 
	#CXXTEST_STACK_TRACE_ELLIDED_MESSAGE
 ""

	)

34 
	#CXXTEST_STACK_TRACE_FILELINE_PREFIX
 "\"Üoˇti⁄=\""

	)

35 
	#CXXTEST_STACK_TRACE_FILELINE_SUFFIX
 ""

	)

38 
	~<cxxã°/Te°Ru¬î.h
>

39 
	~<cxxã°/Te°Li°íî.h
>

40 
	~<cxxã°/Te°Tøckî.h
>

41 
	~<cxxã°/VÆueTøôs.h
>

42 
	~<cxxã°/Eº‹F‹m©ãr.h
>

43 
	~<cxxã°/StdHódîs.h
>

44 
	~<io°ªam
>

45 
	~<s°ªam
>

46 
	~<c°rög
>

47 
	~<c°dio
>

49 
«me•a˚
 
	gCxxTe°


51 ˛as†
	cTìOuçutSåóms


53 
	g¥iv©e
:

54 
˛ass
 
ãebuf„r
 : 
public
 
°d
::
basic_°ªambuf
<>

56 
°d
::
	tbasic_°ªambuf
<> 
	t°ªambuf_t
;

57 
	gpublic
:

58 
ãebuf„r
(
°ªambuf_t
 * 
buf1
, såómbuf_à* 
buf2
)

59 : 
buf„r1
(
buf1
), 
buf„r2
(
buf2
)

62 
vútuÆ
 
ovîÊow
(
c
)

64 i‡(
	gc
 =
EOF
)

65  !
EOF
;

68 c⁄° 
	g™s1
 = 
buf„r1
->
•utc
(
c
);

69 c⁄° 
	g™s2
 = 
buf„r2
->
•utc
(
c
);

70  
	g™s1
 =
EOF
 || 
™s2
 =EOF ? EOF : 
c
;

74 
vútuÆ
 
sync
()

76 
	g™s1
 = 
buf„r1
->
pubsync
();

77 
	g™s2
 = 
buf„r2
->
pubsync
();

78  
	g™s1
 || 
	g™s2
 ? -1 : 0;

81 
°ªambuf_t
 * 
	gbuf„r1
;

82 
°ªambuf_t
 * 
	gbuf„r2
;

85 
	gpublic
:

86 
TìOuçutSåóms
(
°d
::
o°ªam
& 
_cout
, std::o°ªam& 
_˚º
)

87 : 
out
(),

88 
îr
(),

89 
‹ig_cout
(
_cout
),

90 
‹ig_˚º
(
_˚º
),

91 
ãe_out
(
out
.
rdbuf
(), 
_cout
.rdbuf()),

92 
ãe_îr
(
îr
.
rdbuf
(), 
_˚º
.rdbuf())

94 
	g‹ig_cout
.
rdbuf
(&
ãe_out
);

95 
	g‹ig_˚º
.
rdbuf
(&
ãe_îr
);

98 ~
TìOuçutSåóms
()

100 
	g‹ig_cout
.
rdbuf
(
ãe_out
.
buf„r2
);

101 
	g‹ig_˚º
.
rdbuf
(
ãe_îr
.
buf„r2
);

104 
	g°d
::
°rög°ªam
 
out
;

105 
	g°d
::
°rög°ªam
 
îr
;

107 
	g¥iv©e
:

108 
°d
::
o°ªam
& 
‹ig_cout
;

109 
	g°d
::
o°ªam
& 
‹ig_˚º
;

110 
ãebuf„r
 
	gãe_out
;

111 
ãebuf„r
 
	gãe_îr
;

114 ˛as†
	cEÀmítInfo


116 
	gpublic
:

117 
°d
::
°rög
 
«me
;

118 
	g°d
::
°rög°ªam
 
vÆue
;

119 
	g°d
::
m≠
<
°d
::
°rög
,°d::°rög> 
©åibuã
;

121 
EÀmítInfo
()

122 : 
«me
(), 
vÆue
(), 
©åibuã
()

125 
EÀmítInfo
(c⁄° EÀmítInfo& 
rhs
)

126 : 
«me
(
rhs
.«me), 
vÆue
‘hs.vÆue.
°r
()), 
©åibuã
(rhs.attribute)

129 
	gEÀmítInfo
& 
	g›î©‹
=(c⁄° 
EÀmítInfo
& 
rhs
)

131 
«me
 = 
rhs
.name;

132 
	gvÆue
.
°r
(
rhs
.
vÆue
.str());

133 
	g©åibuã
 = 
rhs
.
©åibuã
;

134  *
	gthis
;

137 
	gãm∂©e
 <
˛ass
 
	gTy≥
>

138 
add
(c⁄° 
°d
::
°rög
& 
«me_
, 
Ty≥
& 
vÆue_
)

140 
	g°d
::
o°rög°ªam
 
os
;

141 
	gos
 << 
	gvÆue_
;

142 
	g©åibuã
[
«me_
] = 
os
.
°r
();

145 
wrôe
(
OuçutSåóm
& 
os
) {

146 
	gos
 << " <" << 
	g«me
.
c_°r
() << " ";

147 
	g°d
::
m≠
<
°d
::
°rög
,°d::°rög>::
ôî©‹
 
cuº
=
©åibuã
.
begö
();

148 
	g°d
::
m≠
<
°d
::
°rög
,°d::°rög>::
ôî©‹
 
íd
 =
©åibuã
.end();

149 
	gcuº
 !
íd
) {

150 
os
 << 
cuº
->
fú°
.
c_°r
()

151 << "=\"" << 
cuº
->
£c⁄d
.
c_°r
() << "\" ";

152 
	gcuº
++;

154 i‡(
	gvÆue
.
°r
().
em±y
()) {

155 
	gos
 << "/>";

158 
	gos
 << ">" << 
esˇ≥
(
vÆue
.
°r
()).
c_°r
()

159 << "</" << 
	g«me
.
c_°r
() << ">";

161 
	gos
.
ídl
(
os
);

164 
	g°d
::
°rög
 
esˇ≥
(c⁄° 
°d
::°rög& 
°r
)

166 
°d
::
°rög
 
escSå
 = "";

167 
size_t
 
	gi
 = 0; i < 
	g°r
.
Àngth
(); i++)

169 
	g°r
[
i
])

171 '"': 
escSå
 += "&quot;"; ;

172 '\'': 
escSå
 += "&apos;"; ;

173 '<': 
escSå
 += "&lt;"; ;

174 '>': 
escSå
 += "&gt;"; ;

175 '&': 
escSå
 += "&amp;"; ;

176 : 
escSå
 +
°r
[
i
]; ;

179  
	gescSå
;

184 ˛as†
	cTe°Ca£Info


186 
	gpublic
:

188 
Te°Ca£Info
(Ë: 
Áû
(
Ál£
), 
îr‹
(Ál£), 
ru¡ime
(0.0) {}

189 
	g°d
::
°rög
 
˛assName
;

190 
	g°d
::
°rög
 
ã°Name
;

191 
	g°d
::
°rög
 
löe
;

192 
boﬁ
 
	gÁû
;

193 
boﬁ
 
	gîr‹
;

194 
	gru¡ime
;

195 
	g°d
::
li°
<
EÀmítInfo
> 
ñemíts
;

196 
	g°d
::
	tli°
<
	tEÀmítInfo
>::
	tôî©‹
 
	tñemít_t
;

197 
	g°d
::
°rög
 
w‹ld
;

199 
ñemít_t
 
add_ñemít
(c⁄° 
°d
::
°rög
& 
«me
)

201 
ñemít_t
 
ñt
 = 
ñemíts
.
ö£π
”Àmíts.
íd
(), 
EÀmítInfo
());

202 
	gñt
->
	g«me
=
«me
;

203  
	gñt
;

206 
ñemít_t
 
upd©e_ñemít
(c⁄° 
°d
::
°rög
& 
«me
)

208 
ñemít_t
 
ñt
 = 
ñemíts
.
begö
();

209  
	gñt
 !
ñemíts
.
íd
() )

211 i‡–
ñt
->
«me
 ==Çame )

212  
ñt
;

214  
add_ñemít
(
«me
);

217 
wrôe
–
OuçutSåóm
 &
o
 )

219 
	go
 << " <ã°ˇ£ cœs¢ame=\"" << 
	g˛assName
.
c_°r
()

220 << "\"Çame=\"" << 
	gã°Name
.
c_°r
()

221 << "\"Üöe=\"" << 
	glöe
.
c_°r
() << "\"";

222 
boﬁ
 
	gñts
=
Ál£
;

223 
ñemít_t
 
	gcuº
 = 
ñemíts
.
begö
();

224 
ñemít_t
 
	gíd
 = 
ñemíts
.
íd
();

225 
	gcuº
 !
íd
) {

226 i‡(!
ñts
) {

227 
o
 << ">";

228 
	go
.
ídl
(
o
);

229 
	gñts
=
åue
;

231 
	gcuº
->
wrôe
(
o
);

232 
	gcuº
++;

234 i‡(
	gñts
)

235 
	go
 << " </testcase>";

237 
	go
 << " />";

238 
	go
.
ídl
(
o
);

243 ˛as†
	cXmlF‹m©ãr
 : 
public
 
Te°Li°íî


245 
public
:

246 
XmlF‹m©ãr
–
OuçutSåóm
 *
o
, OuçutSåóm *
o°r
, 
°d
::
o°rög°ªam
 *
os
)

247 : 
_o
(
o
), 
_o°r
(
o°r
), 
_os
(
os
), 
°ªam_ªdúe˘
(
NULL
)

250 
	g°d
::
li°
<
Te°Ca£Info
> 
öfo
;

251 
	g°d
::
li°
<
Te°Ca£Info
>::
ôî©‹
 
ã°ˇ£
;

252 
	g°d
::
	tli°
<
	tEÀmítInfo
>::
	tôî©‹
 
	tñemít_t
;

253 
	g°d
::
°rög
 
˛as¢ame
;

254 
	g¡e°s
;

255 
	gnÁû
;

256 
	g√º‹
;

257 
	gtŸÆtime
;

259 
run
()

261 
	gTe°Ru¬î
::
runAŒTe°s
–*
this
 );

262  
åackî
().
ÁûedTe°s
();

265 
íãrW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 & )

267 
	g¡e°s
=0;

268 
	gnÁû
=0;

269 
	g√º‹
=0;

270 
	gtŸÆtime
=0;

273 
tŸÆTe°s
–
OuçutSåóm
 &
o
 )

275 
	gs
[
W‹ldDes¸ùti⁄
::
MAX_STRLEN_TOTAL_TESTS
];

276 c⁄° 
	gW‹ldDes¸ùti⁄
 &
	gwd
 = 
åackî
().
w‹ld
();

277 
	go
 << 
	gwd
.
°rTŸÆTe°s
–
s
 )

278 << (
	gwd
.
numTŸÆTe°s
() == 1 ? "Åest" : "Åests");

281 
íãrSuôe
–c⁄° 
SuôeDes¸ùti⁄
& 
desc
 )

283 
	g˛as¢ame
 = 
desc
.
suôeName
();

285 
size_t
 
	gpos
 = 0;

286  (
	gpos
 = 
˛as¢ame
.
föd
("::", 
pos
)) !=

287 
CXXTEST_STD
(
°rög
::
≈os
) )

288 
˛as¢ame
.
ª∂a˚
(
pos
, 2, ".");

289  ! 
	g˛as¢ame
.
em±y
() && classname[0] == '.' )

290 
˛as¢ame
.
îa£
(0,1);

301 
ÀaveSuôe
–c⁄° 
SuôeDes¸ùti⁄
 & )

303 
	g°d
::
li°
<
Te°Ca£Info
>::
ôî©‹
 
cuº
 = 
öfo
.
begö
();

304 
	g°d
::
li°
<
Te°Ca£Info
>::
ôî©‹
 
íd
 = 
öfo
.end();

305 
	gcuº
 !
íd
) {

306 i‡(
cuº
->
Áû
Ë
nÁû
++;

307 i‡(
	gcuº
->
	gîr‹
Ë
	g√º‹
++;

308 
	gtŸÆtime
 +
cuº
->
ru¡ime
;

309 
	g¡e°s
++;

310 
	gcuº
++;

312 
	gcuº
 = 
öfo
.
begö
();

313 
	gíd
 = 
öfo
.
íd
();

314 
	gcuº
 !
íd
) {

315 (*
cuº
).
wrôe
(*
_o°r
);

316 
	gcuº
++;

318 
	göfo
.
˛ór
();

321 
íãrTe°
–c⁄° 
Te°Des¸ùti⁄
 & 
desc
 )

323 
	gã°ˇ£
 = 
öfo
.
ö£π
(öfo.
íd
(),
Te°Ca£Info
());

324 
	gã°ˇ£
->
	gã°Name
 = 
desc
.
ã°Name
();

325 
	gã°ˇ£
->
	g˛assName
 = 
˛as¢ame
;

326 
	g°d
::
o°rög°ªam
 
os
;

327 
	gos
 << 
	gdesc
.
löe
();

328 
	gã°ˇ£
->
	glöe
 = 
os
.
°r
();

330 i‡–
	g°ªam_ªdúe˘
 )

331 
CXXTEST_STD
(
˚º
) << "ERROR: The stream_redirect != NULL"

332 << 
CXXTEST_STD
(
ídl
);

334 
	g°ªam_ªdúe˘
 =

335 
√w
 
TìOuçutSåóms
(
CXXTEST_STD
(
cout
), CXXTEST_STD(
˚º
));

338 
ÀaveTe°
–c⁄° 
Te°Des¸ùti⁄
 & )

340 i‡–
	g°ªam_ªdúe˘
 !
NULL
 )

342 
°d
::
°rög
 
out
 = 
°ªam_ªdúe˘
->out.
°r
();

343 i‡–! 
	gout
.
em±y
() )

346 i‡–
	gout
[0] !'.' || 
out
.
size
() > 1 )

347 
ã°ˇ£
->
add_ñemít
("sy°em-out")->
vÆue
 << 
out
;

349 i‡–! 
	g°ªam_ªdúe˘
->
	gîr
.
°r
().
em±y
() )

350 
	gã°ˇ£
->
add_ñemít
("sy°em-îr")->
	gvÆue
 << 
	g°ªam_ªdúe˘
->
	gîr
.
°r
();

352 
dñëe
 
	g°ªam_ªdúe˘
;

353 
	g°ªam_ªdúe˘
 = 
NULL
;

357 
ÀaveW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
& 
desc
 )

359 
	g°d
::
o°rög°ªam
 
os
;

360 
	gos
 << 
	gtŸÆtime
;

361 (*
	g_o
Ë<< "<?xm»vîsi⁄=\"1.0\"Éncodög=\"UTF-8\" ?>" << 
	gídl
;

362 (*
	g_o
Ë<< "<ã°suôê«me=\"" << 
	gdesc
.
w‹ldName
() << "\" ";

363 (*
	g_o
Ë<< "Åe°s=\"" << 
	g¡e°s


364 << "\"Éº‹s=\"" << 
	g√º‹


365 << "\" faûuªs=\"" << 
	gnÁû


366 << "\"Åime=\"" << 
	gos
.
°r
().
c_°r
() << "\" >";

367 
	g_o
->
ídl
(*
_o
);

368 (*
	g_o
Ë<< 
	g_os
->
°r
().
c_°r
();

369 
	g_os
->
˛ór
();

370 (*
	g_o
Ë<< "</ã°suôe>" << 
	gídl
;

371 
	g_o
->
Êush
();

374 
åa˚
–c⁄° * , 
löe
, c⁄° *
ex¥essi⁄
 )

376 
ñemít_t
 
	gñt
 = 
ã°ˇ£
->
add_ñemít
("trace");

377 
	gñt
->
add
("löe",
löe
);

378 
	gñt
->
	gvÆue
 << 
	gex¥essi⁄
;

381 
w¨nög
–c⁄° * , 
löe
, c⁄° *
ex¥essi⁄
 )

383 
ñemít_t
 
	gñt
 = 
ã°ˇ£
->
add_ñemít
("warning");

384 
	gñt
->
add
("löe",
löe
);

385 
	gñt
->
	gvÆue
 << 
	gex¥essi⁄
;

388 
ÁûedTe°
–c⁄° * 
fûe
, 
löe
, c⁄° * 
ex¥essi⁄
 )

390 
ã°Faûuª
–
fûe
, 
löe
, "Áûuª"Ë<< "Te° faûed: " << 
	gex¥essi⁄
;

393 
ÁûedAs£π
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

395 
ã°Faûuª
–
fûe
, 
löe
, "failedAssert" )

396 << "As£πi⁄ faûed: " << 
	gex¥essi⁄
;

399 
ÁûedAs£πEquÆs
–c⁄° *
fûe
, 
löe
,

400 c⁄° * 
xSå
, c⁄° * 
ySå
,

401 c⁄° *
x
, c⁄° *
y
 )

403 
ã°Faûuª
–
fûe
, 
löe
, "failedAssertEquals" )

405 << 
	gxSå
 << " =" << 
	gySå
 << "), found ("

406 << 
	gx
 << " !" << 
	gy
 << ")";

409 
ÁûedAs£πSameD©a
–c⁄° *
fûe
, 
löe
,

410 c⁄° *
xSå
, c⁄° *
ySå
, c⁄° *
sizeSå
,

411 c⁄° * , c⁄° * , 
size
 )

413 
ã°Faûuª
–
fûe
, 
löe
, "failedAssertSameData")

414 << "Eº‹: Ex≥˘ed " << 
	gsizeSå


415 << " (" << 
	gsize
 << ") bytesÅo beÉqualát ("

416 << 
	gxSå
 << "Ë™d (" << 
	gySå
 << "), found";

419 
ÁûedAs£πSameFûes
–c⁄° *
fûe
, 
löe
,

421 c⁄° * 
ex∂™©i⁄


424 
ã°Faûuª
–
fûe
, 
löe
, "failedAssertSameFiles" )

425 << "Eº‹: " << 
	gex∂™©i⁄
;

428 
ÁûedAs£πDñè
–c⁄° *
fûe
, 
löe
,

429 c⁄° *
xSå
, c⁄° *
ySå
, c⁄° *
dSå
,

430 c⁄° *
x
, c⁄° *
y
, c⁄° *
d
 )

432 
ã°Faûuª
–
fûe
, 
löe
, "failedAssertDelta" )

434 << 
	gxSå
 << " =" << 
	gySå
 << "Ëu∞tÿ" << 
	gdSå


435 << " (" << 
	gd
 << "), found ("

436 << 
	gx
 << " !" << 
	gy
 << ")";

439 
ÁûedAs£πDif„rs
–c⁄° *
fûe
, 
löe
,

440 c⁄° *
xSå
, c⁄° *
ySå
,

441 c⁄° *
vÆue
 )

443 
ã°Faûuª
–
fûe
, 
löe
, "failedAssertDiffers" )

445 << 
	gxSå
 << " !" << 
	gySå
 << "), found ("

446 << 
	gvÆue
 << ")";

449 
ÁûedAs£πLessTh™
–c⁄° *
fûe
, 
löe
,

450 c⁄° *
xSå
, c⁄° *
ySå
,

451 c⁄° *
x
, c⁄° *
y
 )

453 
ã°Faûuª
–
fûe
, 
löe
, "failedAssertLessThan" )

455 
	gxSå
 << " < " << 
	gySå
 << "), found (" <<

456 
	gx
 << " >" << 
	gy
 << ")";

459 
ÁûedAs£πLessTh™EquÆs
–c⁄° *
fûe
, 
löe
,

460 c⁄° *
xSå
, c⁄° *
ySå
,

461 c⁄° *
x
, c⁄° *
y
 )

463 
ã°Faûuª
–
fûe
, 
löe
, "failedAssertLessThanEquals" )

465 
	gxSå
 << " <" << 
	gySå
 << "), found (" <<

466 
	gx
 << " > " << 
	gy
 << ")";

469 
ÁûedAs£πRñ©i⁄
–c⁄° *
fûe
, 
löe
,

470 c⁄° *
ªœti⁄
, c⁄° *
xSå
, c⁄° *
ySå
,

471 c⁄° *
x
, c⁄° *
y
 )

473 
ã°Faûuª
–
fûe
, 
löe
, "failedAssertRelation" )

474 << "Eº‹: Ex≥˘ed " << 
	gªœti⁄
 << "( " <<

475 
	gxSå
 << ", " << 
	gySå
 << " ), found !" << 
	gªœti⁄


476 << "–" << 
	gx
 << ", " << 
	gy
 << " )";

479 
ÁûedAs£πPªdiˇã
–c⁄° *
fûe
, 
löe
,

480 c⁄° *
¥ediˇã
, c⁄° *
xSå
, c⁄° *
x
 )

482 
ã°Faûuª
–
fûe
, 
löe
, "failedAssertPredicate" )

483 << "Eº‹: Ex≥˘ed " << 
	g¥ediˇã
 << "( " <<

484 
	gxSå
 << " ), found !" << 
	g¥ediˇã
 << "–" << 
	gx
 << " )";

487 
ÁûedAs£πThrows
–c⁄° *
fûe
, 
löe
,

488 c⁄° *
ex¥essi⁄
, c⁄° *
ty≥
,

489 
boﬁ
 
ŸhîThrown
 )

491 
ã°Faûuª
–
fûe
, 
löe
, "failedAssertThrows" )

492 << "Eº‹: Ex≥˘ed (" << 
	gex¥essi⁄
 << ")ÅoÅhrow (" <<

493 
	gty≥
 << ") but it "

494 << (
	gŸhîThrown
 ? "threw somethingÉlse" : "didn'tÅhrow");

497 
ÁûedAs£πThrowsNŸ
–c⁄° *
fûe
, 
löe
, c⁄° *
ex¥essi⁄
 )

499 
ã°Faûuª
–
fûe
, 
löe
, "failedAssertThrowsNot" )

500 << "Eº‹: Ex≥˘ed (" << 
	gex¥essi⁄


504 
	g¥Ÿe˘ed
:

506 
OuçutSåóm
 *
ouçutSåóm
() const

508  
_o
;

511 
OuçutSåóm
 *
ouçutFûeSåóm
() const

513  
	g_o°r
;

516 
	g¥iv©e
:

517 
XmlF‹m©ãr
( const XmlFormatter & );

518 
	gXmlF‹m©ãr
 &
	g›î©‹
=–c⁄° 
XmlF‹m©ãr
 & );

520 
	g°d
::
°rög°ªam
& 
ã°Faûuª
–c⁄° * 
fûe
, 
löe
, c⁄° *
ÁûuªTy≥
)

522 
	gã°ˇ£
->
	gÁû
=
åue
;

523 
ñemít_t
 
	gñt
 = 
ã°ˇ£
->
upd©e_ñemít
("failure");

524 i‡–
	gñt
->
	gvÆue
.
°r
().
em±y
() )

526 
	gñt
->
add
("ty≥",
ÁûuªTy≥
);

527 
	gñt
->
add
("löe",
löe
);

528 
	gñt
->
add
("fûe",
fûe
);

531 
	gñt
->
	gvÆue
 << 
CXXTEST_STD
(
ídl
);

532  
	gñt
->
	gvÆue
;

537 
©åibuãBö¨y
–c⁄° * 
«me
, c⁄° *
vÆue
, 
size
 )

539 (*
	g_o
Ë<< 
	g«me
;

540 (*
	g_o
) << "=\"";

541 
dump
(
vÆue
, 
size
);

542 (*
	g_o
) << "\" ";

545 
dump
–c⁄° *
buf„r
, 
size
 )

547 i‡(!
	gbuf„r
) ;

549 
	gdumpSize
 = 
size
;

550 i‡–
maxDumpSize
(Ë&& 
	gdumpSize
 > maxDumpSize() )

551 
	gdumpSize
 = 
maxDumpSize
();

553 c⁄° *
	gp
 = (c⁄° *)
buf„r
;

554  
	gi
 = 0; i < 
	gdumpSize
; ++ i )

555 (*
	g_o
Ë<< 
byãToHex
–*
p
++ ) << " ";

556 i‡–
	gdumpSize
 < 
	gsize
 )

557 (*
	g_o
) << "... ";

561 
ídl
–
OuçutSåóm
 &
o
 )

563 
	gOuçutSåóm
::
ídl
–
o
 );

566 
OuçutSåóm
 *
	g_o
;

567 
OuçutSåóm
 *
	g_o°r
;

568 
	g°d
::
o°rög°ªam
 *
_os
;

570 
TìOuçutSåóms
 *
	g°ªam_ªdúe˘
;

	@tools/cxxtest/cxxtest/XmlPrinter.h

12 #i‚de‡
__cxxã°__XmlPröãr_h__


13 
	#__cxxã°__XmlPröãr_h__


	)

21 
	~<cxxã°/Fœgs.h
>

23 #i‚de‡
_CXXTEST_HAVE_STD


24 
	#_CXXTEST_HAVE_STD


	)

27 
	~<cxxã°/XmlF‹m©ãr.h
>

28 
	~<cxxã°/StdVÆueTøôs.h
>

30 
	~<s°ªam
>

31 #ifde‡
_CXXTEST_OLD_STD


32 
	~<io°ªam.h
>

34 
	~<io°ªam
>

37 
«me•a˚
 
	gCxxTe°


39 ˛as†
	cXmlPröãr
 : 
public
 
XmlF‹m©ãr


41 
public
:

42 
XmlPröãr
–
CXXTEST_STD
(
o°ªam
Ë&
o
 = CXXTEST_STD(
cout
), const * = ":", const * = "" ) :

43 
XmlF‹m©ãr
–
√w
 
Ad≠ãr
(
o
),Çew Ad≠ãr(
o°r
), &ostr ) {}

45 
	gvútuÆ
 ~
XmlPröãr
()

47 
dñëe
 
ouçutSåóm
();

48 
dñëe
 
ouçutFûeSåóm
();

51 
	g¥iv©e
:

53 
°d
::
o°rög°ªam
 
o°r
;

55 ˛as†
	cAd≠ãr
 : 
public
 
OuçutSåóm


57 
CXXTEST_STD
(
o°ªam
Ë&
_o
;

58 
	gpublic
:

59 
Ad≠ãr
–
CXXTEST_STD
(
o°ªam
Ë&
o
 ) : 
_o
(o) {}

60 
Êush
(Ë{ 
_o
.flush(); }

61 
	gOuçutSåóm
 &
	g›î©‹
<<–c⁄° *
	gs
 ) { 
	g_o
 << s;  *
	gthis
; }

62 
	gOuçutSåóm
 &
	g›î©‹
<<–
M™ùuœt‹
 
	gm
 ) {  OuçutSåóm::
›î©‹
<<–
m
 ); }

63 
	gOuçutSåóm
 &
	g›î©‹
<<–
	gi
 )

65 
	gs
[1 + 3 * ()];

66 
numbîToSåög
–
i
, 
s
 );

67 
	g_o
 << 
	gs
;

68  *
	gthis
;

	@tools/cxxtest/cxxtest/YesNoRunner.h

12 #i‚de‡
__cxxã°__YesNoRu¬î_h__


13 
	#__cxxã°__YesNoRu¬î_h__


	)

20 
	~<cxxã°/Te°Ru¬î.h
>

21 
	~<cxxã°/Te°Li°íî.h
>

23 
«me•a˚
 
	gCxxTe°


25 ˛as†
	cYesNoRu¬î
 : 
public
 
Te°Li°íî


27 
public
:

28 
YesNoRu¬î
()

32 
run
()

34 
Te°Ru¬î
::
runAŒTe°s
–*
this
 );

35  
åackî
().
ÁûedTe°s
();

	@tools/cxxtest/doc/examples/Assertions.h

2 
	~<cxxã°/Te°Suôe.h
>

4 ˛as†
	cTe°
 : 
public
 
CxxTe°
::
Te°Suôe


6 
public
:

9 
	$ã°_as£π
()

11 
	`TS_ASSERT
(1 + 1 > 1);

16 
	$ã°_as£π_dñè
()

18 
	`TS_ASSERT_DELTA
(
	`sqπ
(4.0), 2.0, 1e-7);

19 
	}
}

23 
	$ã°_as£π_dif„rs
()

25 
	`TS_ASSERT_DIFFERS
(1, 2);

26 
	}
}

30 
	$ã°_as£π_equÆs
()

32 
	`TS_ASSERT_EQUALS
(21 % 5, 1);

33 
	}
}

37 
	$ã°_as£π_Àss_th™
()

39 
	`TS_ASSERT_LESS_THAN
(0, 1);

40 
	}
}

44 
	$ã°_as£π_Àss_th™_equÆs
()

46 
	`TS_ASSERT_LESS_THAN_EQUALS
(0, 0);

47 
	}
}

51 ˛as†
	cIsOdd


53 
	gpublic
:

54 
boﬁ
 
›î©‹
()(
x
) const {  x % 2 == 1; }

57 
	$ã°_as£π_¥ediˇã
()

59 
	`TS_ASSERT_PREDICATE
(
IsOdd
, 29);

60 
	}
}

64 
	$ã°_as£π_ªœti⁄
()

66 
	`TS_ASSERT_RELATION
(
°d
::
gª©î
<>, 1e6, 1000.0);

67 
	}
}

71 
	$ã°_as£π_ßme_d©a
()

73 
öput
 = "The quick brown foxÑan overÅheÜazy dog";

74 
ouçut
[26];

75 
	`memc›y
(
ouçut
, 
öput
, 26);

76 
	`TS_ASSERT_SAME_DATA
(
öput
, 
ouçut
, 26);

77 
	}
}

81 
	$throws_ru¡ime_îr‹
()

83 
øi£
 
°d
::
ru¡ime_îr‹
, "This method simply generatesánÉxception";

84 
	}
}

86 
	$ã°_as£π_throws
()

88 
	`TS_ASSERT_THROWS
(
£lf
.
	`throws_ru¡ime_îr‹
(), 
°d
::
ru¡ime_îr‹
);

89 
	}
}

93 
	$ã°_as£π_throws_™ythög
()

95 
	`TS_ASSERT_THROWS_ANYTHING
(
£lf
.
	`throws_ru¡ime_îr‹
());

96 
	}
}

100 
	$throws_vÆue
()

102 
øi£
 1;

103 
	}
}

105 
	$ã°_as£π_throws_as£π
()

107 
	`TS_ASSERT_THROWS_ASSERT
(
£lf
.
	`throws_vÆue
(), c⁄° 
Eº‹
 & 
e
, 
	`TS_ASSERT_EQUALS
(e, 1));

108 
	}
}

112 
	$ã°_as£π_throws_equÆs
()

114 
	`TS_ASSERT_THROWS_EQUALS
(
£lf
.
	`throws_vÆue
(), c⁄° 
Eº‹
 & 
e
,É.
	`wh©
(), 1);

115 
	}
}

119 
	$throws_nŸhög
()

120 { 
	}
}

122 
	$ã°_as£π_throws_nŸhög
()

124 
	`TS_ASSERT_THROWS_ASSERT
(
£lf
.
	`throws_nŸhög
());

125 
	}
}

129 
	$ã°_Áû
()

131 
	`TS_FAIL
("ThisÅest has failed.");

132 
	}
}

136 
	$ã°_åa˚
()

138 
	`TS_TRACE
("This isáÅestÅracing message.");

139 
	}
}

143 
	$ã°_w¨n
()

145 
	`TS_WARN
("This isá warning message.");

146 
	}
}

	@tools/cxxtest/doc/examples/BadTestSuite1.h

2 
	~<cxxã°/Te°Suôe.h
>

4 ˛as†
	cBadTe°Suôe1
 : 
public
 
CxxTe°
::
Te°Suôe


6 
public
:

7 
	$ã°Addôi⁄
()

9 
	`TS_ASSERT
(1 + 1 > 1);

10 
	`TS_ASSERT_EQUALS
(1 + 1, 2);

13 
	$ã°Subåa˘i⁄
()

15 
	`TS_ASSERT
(1 - 1 < 1);

16 
	`TS_ASSERT_EQUALS
(1 - 1, 0);

17 
	}
}

	@tools/cxxtest/doc/examples/MockTestSuite.h

2 
	~<cxxã°/Te°Suôe.h
>

3 
	~<time_mock.h
>

5 
gíî©eR™domNumbî
();

8 ˛as†
	cMockObje˘
 : 
public
 
T
::
Ba£_time


10 
public
:

11 
	$MockObje˘
(
öôül
Ë: 
	$cou¡î
(
öôül
) {}

12 
cou¡î
;

13 
time_t
 
	$time
–
time_t
 * ) {  
cou¡î
++; 
	}
}

16 ˛as†
	cTe°R™dom
 : 
public
 
CxxTe°
::
Te°Suôe


18 
public
:

19 
	$ã°_gíî©eR™domNumbî
()

21 
MockObje˘
 
	`t
(1);

22 
	`TS_ASSERT_EQUALS
–
	`gíî©eR™domNumbî
(), 3 );

23 
	`TS_ASSERT_EQUALS
–
	`gíî©eR™domNumbî
(), 6 );

24 
	`TS_ASSERT_EQUALS
–
	`gíî©eR™domNumbî
(), 9 );

26 
	}
};

	@tools/cxxtest/doc/examples/MyClass.h

3 ˛as†
	cMyCœss


5 
	mpublic
:

7 
vÆue
;

9 
	$MyCœss
(
vÆue_
Ë: 
	$vÆue
(
vÆue_
) {}

12 
	$MyCœss
(c⁄° 
MyCœss
& 
Ÿhî
Ë: 
	$vÆue
(
Ÿhî
.
vÆue
Ë{
	}
}

15 
boﬁ
 
›î©‹
==(c⁄° 
MyCœss
& 
Ÿhî
Ëc⁄° {  
vÆue
 == other.value; }

18 
boﬁ
 
	g›î©‹
<(c⁄° 
	gMyCœss
& 
	gŸhî
Ëc⁄° {  
	gvÆue
 < other.value; }

21 #ifde‡
CXXTEST_RUNNING


23 
	~<cxxã°/VÆueTøôs.h
>

24 
	~<°dio.h
>

26 
«me•a˚
 
	gCxxTe°


28 
CXXTEST_TEMPLATE_INSTANTIATION


29 
˛ass
 
	gVÆueTøôs
<
	gMyCœss
>

31 
	g_s
[256];

33 
	gpublic
:

34 
VÆueTøôs
–c⁄° 
MyCœss
& 
m
 ) { 
•rötf
–
_s
, "MyCœss–%ò)", m.
vÆue
 ); }

35 c⁄° *
asSåög
(Ëc⁄° {  
	g_s
; }

	@tools/cxxtest/doc/examples/MyTestSuite1.h

2 
	~<cxxã°/Te°Suôe.h
>

4 ˛as†
	cMyTe°Suôe1
 : 
public
 
CxxTe°
::
Te°Suôe


6 
public
:

7 
	$ã°Addôi⁄
()

9 
	`TS_ASSERT
(1 + 1 > 1);

10 
	`TS_ASSERT_EQUALS
(1 + 1, 2);

12 
	}
};

	@tools/cxxtest/doc/examples/MyTestSuite10.h

2 
	~<cxxã°/Te°Suôe.h
>

3 
	~<MyCœss.h
>

5 ˛as†
	cMyTe°Suôe10
 : 
public
 
CxxTe°
::
Te°Suôe


7 
public
:

8 
	$ã°_À
()

10 
MyCœss
 
	`x
(1), 
	`y
(2);

11 
	`TS_ASSERT_LESS_THAN
–
x
, 
y
 );

14 
	$ã°_eq
()

16 
MyCœss
 
	`x
(1), 
	`y
(2);

17 
	`TS_ASSERT_EQUALS
–
x
, 
y
 );

18 
	}
}

	@tools/cxxtest/doc/examples/MyTestSuite11.h

2 
	~<cxxã°/Te°Suôe.h
>

3 
	~<TMyCœss.h
>

5 ˛as†
	cMyTe°Suôe11
 : 
public
 
CxxTe°
::
Te°Suôe


7 
public
:

8 
	$ã°_À
()

10 
TMyCœss
<> 
	`x
(1), 
	`y
(2);

11 
	`TS_ASSERT_LESS_THAN
–
x
, 
y
 );

14 
	$ã°_eq
()

16 
TMyCœss
<> 
	`x
(1), 
	`y
(2);

17 
	`TS_ASSERT_EQUALS
–
x
, 
y
 );

18 
	}
}

	@tools/cxxtest/doc/examples/MyTestSuite2.h

2 
	~<cxxã°/Te°Suôe.h
>

4 ˛as†
	cMyTe°Suôe2
 : 
public
 
CxxTe°
::
Te°Suôe


6 
public
:

7 
	$ã°Addôi⁄
()

9 
	`TS_ASSERT
(1 + 1 > 1);

10 
	`TS_ASSERT_EQUALS
(1 + 1, 2);

13 
	$ã°Mu…ùliˇti⁄
()

15 
	`TS_TRACE
("Starting multiplicationÅest");

16 
	`TS_ASSERT_EQUALS
(2 * 2, 5);

17 
	`TS_TRACE
("Finishing multiplicationÅest");

18 
	}
}

	@tools/cxxtest/doc/examples/MyTestSuite3.h

2 
	~<cxxã°/Te°Suôe.h
>

4 ˛as†
	cMyTe°Suôe3
 : 
public
 
CxxTe°
::
Te°Suôe


6 
public
:

7 
	$ã°Addôi⁄
()

9 
	`TS_ASSERT
(1 + 1 > 1);

10 
	`TS_ASSERT_EQUALS
(1 + 1, 2);

27 
	$Xã°Divisi⁄
()

29 
	`TS_ASSERT
(1 / 1 < 2);

30 
	`TS_ASSERT_EQUALS
(1 / 1, 1);

31 
	}
}

	@tools/cxxtest/doc/examples/MyTestSuite4.h

2 
	~<cxxã°/Te°Suôe.h
>

4 ˛as†
	cMyTe°Suôe4


6 
public
 
CxxTe°
::
Te°Suôe


8 
public
:

9 
	$ã°Addôi⁄
()

11 
	`TS_ASSERT
(1 + 1 > 1);

12 
	`TS_ASSERT_EQUALS
(1 + 1, 2);

14 
	}
};

	@tools/cxxtest/doc/examples/MyTestSuite5.h

2 
	~<cxxã°/Te°Suôe.h
>

3 
	~<°rög.h
>

5 ˛as†
	cMyTe°Suôe5
 : 
public
 
CxxTe°
::
Te°Suôe


7 *
_buf„r
;

9 
	mpublic
:

11 
	$£tUp
()

13 
_buf„r
 = 
√w
 [1024];

16 
	$ã¨Down
()

18 
dñëe
 [] 
_buf„r
;

19 
	}
}

21 
	$ã°_°r˝y
()

23 
	`°r˝y
(
_buf„r
, "Hello, world!");

24 
	`TS_ASSERT_EQUALS
(
_buf„r
[0], 'H');

25 
	`TS_ASSERT_EQUALS
(
_buf„r
[1], 'e');

26 
	}
}

28 
	$ã°_mem˝y
()

30 
	`mem˝y
(
_buf„r
, "Hello, world!", ());

31 
	`TS_ASSERT_EQUALS
(
_buf„r
[0], 'H');

32 
	`TS_ASSERT_EQUALS
(
_buf„r
[1], 'e');

33 
	}
}

	@tools/cxxtest/doc/examples/MyTestSuite6.h

2 
	~<cxxã°/Te°Suôe.h
>

4 ˛as†
	cMyTe°Suôe6
 : 
public
 
CxxTe°
::
Te°Suôe


6 
public
:

8 
MyTe°Suôe6
* 
	$¸óãSuôe
()

10 #ifde‡
_MSC_VER


11  
√w
 
	`MyTe°Suôe6
();

17 
	$de°roySuôe
–
MyTe°Suôe6
* 
suôe
 )

18 { 
dñëe
 
suôe
; 
	}
}

20 
	$ã°_nŸhög
()

22 
	`TS_FAIL
( "NothingÅoÅest" );

23 
	}
}

	@tools/cxxtest/doc/examples/MyTestSuite7.h

2 
	~<cxxã°/Te°Suôe.h
>

3 
	~<io°ªam
>

5 ˛as†
	cMyTe°Suôe7
 : 
public
 
CxxTe°
::
Te°Suôe


7 
public
:

9 
	sD©a


11 
d©a
[3];

12 
boﬁ
 
	m›î©‹
==(
D©a
 
o
) {

13  (
memcmp
(
this
, &
o
, (o)) == 0);

17 
	sD©a2


19 
	gd©a
[3];

22 
	$ã°Com∑ªD©a
()

24 
D©a
 
x
, 
y
;

25 
	`mem£t
–
x
.
d©a
, 0x12, (x.data) );

26 
	`mem£t
–
y
.
d©a
, 0xF6, (y.data) );

27 
	`TS_ASSERT_EQUALS
–
x
, 
y
 );

29 
D©a2
 
z
, 
w
;

30 
	`mem£t
–
z
.
d©a
, 0x12, (
x
.data) );

31 
	`mem£t
–
w
.
d©a
, 0xF6, (
y
.data) );

32 
	`TS_ASSERT_SAME_DATA
–&
z
, &
w
, (z) )

33 
	}
}

	@tools/cxxtest/doc/examples/MyTestSuite8.h

2 
	~<c°dio
>

3 
	~<cxxã°/Te°Suôe.h
>

4 
	~<cxxã°/GlobÆFixtuª.h
>

9 ˛as†
	cFixtuª1
 : 
public
 
CxxTe°
::
GlobÆFixtuª


11 
public
:

12 
£tUpCou¡
;

13 
	mã¨DownCou¡
;

15 
	$Fixtuª1
(Ë{ 
£tUpCou¡
 = 
ã¨DownCou¡
 = 0; }

17 
boﬁ
 
	$£tUp
(Ë{ ++ 
£tUpCou¡
;  
åue
; 
	}
}

18 
boﬁ
 
	$ã¨Down
(Ë{ ++ 
ã¨DownCou¡
;  
åue
; 
	}
}

20 
boﬁ
 
	$£tUpW‹ld
(Ë{ 
	`¥ötf
–"SèπögáÅe° suôe\n" );  
åue
;
	}
}

21 
boﬁ
 
	$ã¨DownW‹ld
(Ë{ 
	`¥ötf
–"FöishögáÅe° suôe\n" );  
åue
;
	}
}

23 
Fixtuª1
 
	gfixtuª1
;

30 ˛as†
	cFixtuª2
 : 
public
 
Fixtuª1


32 
public
:

33 
boﬁ
 
	$£tUp
()

35 
	`TS_ASSERT_EQUALS
(
£tUpCou¡
, 
fixtuª1
.setUpCount - 1);

36 
	`TS_ASSERT_EQUALS
(
ã¨DownCou¡
, 
fixtuª1
.tearDownCount);

37  
Fixtuª1
::
	`£tUp
();

40 
boﬁ
 
	$ã¨Down
()

42 
	`TS_ASSERT_EQUALS
(
£tUpCou¡
, 
fixtuª1
.setUpCount);

43 
	`TS_ASSERT_EQUALS
(
ã¨DownCou¡
, 
fixtuª1
.tearDownCount);

44  
Fixtuª1
::
	`ã¨Down
();

45 
	}
}

47 
Fixtuª2
 
	gfixtuª2
;

53 ˛as†
	cMyTe°Suôe8
 : 
public
 
CxxTe°
::
Te°Suôe


55 
public
:

56 
	$ã°Cou¡sFú°Time
()

58 
	`TS_ASSERT_EQUALS
(
fixtuª1
.
£tUpCou¡
, 1);

59 
	`TS_ASSERT_EQUALS
(
fixtuª1
.
ã¨DownCou¡
, 0);

60 
	`TS_ASSERT_EQUALS
(
fixtuª2
.
£tUpCou¡
, 1);

61 
	`TS_ASSERT_EQUALS
(
fixtuª2
.
ã¨DownCou¡
, 0);

64 
	$ã°Cou¡sSec⁄dTime
()

66 
	`TS_ASSERT_EQUALS
(
fixtuª1
.
£tUpCou¡
, 2);

67 
	`TS_ASSERT_EQUALS
(
fixtuª1
.
ã¨DownCou¡
, 1);

68 
	`TS_ASSERT_EQUALS
(
fixtuª2
.
£tUpCou¡
, 2);

69 
	`TS_ASSERT_EQUALS
(
fixtuª2
.
ã¨DownCou¡
, 1);

70 
	}
}

	@tools/cxxtest/doc/examples/MyTestSuite9.h

2 
	~<cxxã°/Te°Suôe.h
>

4 
	eAnswî
 {

5 
	mYes
,

6 
	mNo
,

7 
	mMaybe
,

8 
	mD⁄tKnow
,

9 
	mD⁄tC¨e


13 
CXXTEST_ENUM_TRAITS
–
Answî
,

14 
	$CXXTEST_ENUM_MEMBER
–
Yes
 )

15 
	$CXXTEST_ENUM_MEMBER
–
No
 )

16 
	$CXXTEST_ENUM_MEMBER
–
Maybe
 )

17 
	$CXXTEST_ENUM_MEMBER
–
D⁄tKnow
 )

18 
	`CXXTEST_ENUM_MEMBER
–
D⁄tC¨e
 ) );

21 ˛as†
	cEnumTøôs
 : 
public
 
CxxTe°
::
Te°Suôe


23 
public
:

24 
	$ã°_Enum_åaôs
()

26 
	`TS_FAIL
–
Yes
 );

27 
	`TS_FAIL
–
No
 );

28 
	`TS_FAIL
–
Maybe
 );

29 
	`TS_FAIL
–
D⁄tKnow
 );

30 
	`TS_FAIL
–
D⁄tC¨e
 );

31 
	`TS_FAIL
–(
Answî
)1000 );

33 
	}
};

	@tools/cxxtest/doc/examples/TMyClass.h

3 
	gãm∂©e
<
˛ass
 
	gT
>

4 ˛as†
	cTMyCœss


6 
	mpublic
:

8 
T
 
vÆue
;

10 
	$TMyCœss
(c⁄° 
T
& 
vÆue_
Ë: 
	$vÆue
(
vÆue_
) {}

13 
	`TMyCœss
(c⁄° 
TMyCœss
<
T
>& 
Ÿhî
Ë: 
	$vÆue
(
Ÿhî
.
vÆue
Ë{
	}
}

16 
boﬁ
 
›î©‹
==(c⁄° 
TMyCœss
<
T
>& 
Ÿhî
Ëc⁄° {  
vÆue
 == other.value; }

19 
boﬁ
 
	g›î©‹
<(c⁄° 
	gTMyCœss
<
	gT
>& 
	gŸhî
Ëc⁄° {  
	gvÆue
 < other.value; }

22 #ifde‡
CXXTEST_RUNNING


24 
	~<cxxã°/VÆueTøôs.h
>

25 
	~<ty≥öfo
>

26 
	~<s°ªam
>

28 
«me•a˚
 
	gCxxTe°


30 
	gãm∂©e
 <
˛ass
 
	gT
>

31 
˛ass
 
	gVÆueTøôs
< 
	gTMyCœss
<
	gT
> >

33 
	gpublic
:

34 
°d
::
o°rög°ªam
 
_s
;

36 
VÆueTøôs
–c⁄° 
TMyCœss
<
T
>& 
t
 ) { 
	g_s
 << 
ty≥id
—).
«me
(Ë<< "–" << 
	gt
.
	gvÆue
 << " )"; }

38 
VÆueTøôs
–c⁄° VÆueTøôs< 
TMyCœss
<
T
> >& 
vÆue
 ) { 
	g_s
 << 
	gvÆue
._s.
rdbuf
(); }

40 c⁄° *
asSåög
(Ëc⁄° {  
	g_s
.
°r
().
c_°r
(); }

	@tools/cxxtest/doc/examples/rand_example.cpp

2 
	~<time_mock.h
>

4 
	$gíî©eR™domNumbî
()

6  
T
::
	`time
–
NULL
 ) * 3;

7 
	}
}

	@tools/cxxtest/doc/examples/time_mock.cpp

2 
	#CXXTEST_MOCK_TEST_SOURCE_FILE


	)

3 
	~<time_mock.h
>

	@tools/cxxtest/doc/examples/time_mock.h

2 
	~<time.h
>

3 
	~<cxxã°/Mock.h
>

5 
CXXTEST_MOCK_GLOBAL
–
time_t
,

6 
time
,

7 –
time_t
 *
t
 ),

8 –
t
 ) );

	@tools/cxxtest/doc/examples/time_real.cpp

2 
	#CXXTEST_MOCK_REAL_SOURCE_FILE


	)

3 
	~<time_mock.h
>

	@tools/cxxtest/sample/CreatedTest.h

1 #i‚de‡
__CREATEDTEST_H


2 
	#__CREATEDTEST_H


	)

4 
	~<cxxã°/Te°Suôe.h
>

5 
	~<°rög.h
>

6 
	~<mem‹y.h
>

14 ˛as†
	cCª©edTe°
 : 
public
 
CxxTe°
::
Te°Suôe


16 *
_buf„r
;

17 
	mpublic
:

18 
	$Cª©edTe°
–
size
 ) : 
	$_buf„r
–
√w
 [
size
] ) {}

19 
vútuÆ
 ~
	$Cª©edTe°
(Ë{ 
dñëe
 [] 
_buf„r
; 
	}
}

21 
Cª©edTe°
 *
	$¸óãSuôe
(Ë{  
√w
 
	`Cª©edTe°
–16 ); 
	}
}

22 
	$de°roySuôe
–
Cª©edTe°
 *
suôe
 ) { 
dñëe
 suôe; 
	}
}

24 
	$ã°_nŸhög
()

26 
	`TS_FAIL
( "NothingÅoÅest" );

27 
	}
}

	@tools/cxxtest/sample/DeltaTest.h

1 #i‚de‡
__DELTATEST_H


2 
	#__DELTATEST_H


	)

4 
	~<cxxã°/Te°Suôe.h
>

5 
	~<m©h.h
>

7 ˛as†
	cDñèTe°
 : 
public
 
CxxTe°
::
Te°Suôe


9 
_pi
, 
	m_dñè
;

11 
	mpublic
:

12 
	$£tUp
()

14 
_pi
 = 3.1415926535;

15 
_dñè
 = 0.0001;

18 
	$ã°Söe
()

20 
	`TS_ASSERT_DELTA
–
	`sö
(0.0), 0.0, 
_dñè
 );

21 
	`TS_ASSERT_DELTA
–
	`sö
(
_pi
 / 6), 0.5, 
_dñè
 );

22 
	`TS_ASSERT_DELTA
–
	`sö
(
_pi
 / 2), 1.0, 
_dñè
 );

23 
	`TS_ASSERT_DELTA
–
	`sö
(
_pi
), 0.0, 
_dñè
 );

24 
	}
}

	@tools/cxxtest/sample/EnumTraits.h

4 
	~<cxxã°/Te°Suôe.h
>

9 
	eAnswî
 {

10 
	mYes
,

11 
	mNo
,

12 
	mMaybe
,

13 
	mD⁄tKnow
,

14 
	mD⁄tC¨e


20 
CXXTEST_ENUM_TRAITS
–
Answî
,

21 
	$CXXTEST_ENUM_MEMBER
–
Yes
 )

22 
	$CXXTEST_ENUM_MEMBER
–
No
 )

23 
	$CXXTEST_ENUM_MEMBER
–
Maybe
 )

24 
	$CXXTEST_ENUM_MEMBER
–
D⁄tKnow
 )

25 
	`CXXTEST_ENUM_MEMBER
–
D⁄tC¨e
 ) );

27 ˛as†
	cEnumTøôs
 : 
public
 
CxxTe°
::
Te°Suôe


29 
public
:

30 
	$ã°_Enum_åaôs
()

32 
	`TS_FAIL
–
Yes
 );

33 
	`TS_FAIL
–
No
 );

34 
	`TS_FAIL
–
Maybe
 );

35 
	`TS_FAIL
–
D⁄tKnow
 );

36 
	`TS_FAIL
–
D⁄tC¨e
 );

37 
	`TS_FAIL
–(
Answî
)1000 );

39 
	}
};

	@tools/cxxtest/sample/ExceptionTest.h

1 #i‚de‡
__EXCEPTIONTEST_H


2 
	#__EXCEPTIONTEST_H


	)

4 
	~<cxxã°/Te°Suôe.h
>

10 ˛as†
	cEx˚±i⁄Te°
 : 
public
 
CxxTe°
::
Te°Suôe


12 
public
:

13 
	$ã°As£πi⁄
( )

16 
	`TS_ASSERT_THROWS
–
	`throwThis
(3), c⁄° 
Numbî
 & );

18 
	`TS_ASSERT_THROWS_ANYTHING
–
	`throwThis
(-30) );

20 
	`TS_ASSERT_THROWS
–
	`throwThis
(5), const * );

22 
	`TS_ASSERT_THROWS_ANYTHING
–
	`goodFun˘i⁄
(1) );

24 
	`TS_ASSERT_EQUALS
–
	`throwThis
(3), 333 );

26 
	`TS_ASSERT_THROWS_NOTHING
–
	`throwThis
(-1) );

28 
åy
 {

29 
	`ETS_ASSERT_EQUALS
–
	`throwThis
(3), 333 );

30 } 
	`ˇtch
–c⁄° 
Numbî
 & ) {

31 
	`TS_FAIL
( "throwThis(3) failed" );

35 
¥iv©e
:

36 
	$goodFun˘i⁄
( )

38 
	}
}

40 ˛as†
	cNumbî


42 
public
:

43 
Numbî
( ) {}

46 
	$throwThis
–
i
 )

48 
throw
 
	`Numbî
–
i
 );

49 
	}
}

	@tools/cxxtest/sample/FixtureTest.h

1 #i‚de‡
__FIXTURETEST_H


2 
	#__FIXTURETEST_H


	)

4 
	~<cxxã°/Te°Suôe.h
>

5 
	~<°rög.h
>

14 ˛as†
	cFixtuªTe°
 : 
public
 
CxxTe°
::
Te°Suôe


16 *
_buf„r
;

17 
	mpublic
:

18 
	$£tUp
()

20 
_buf„r
 = 
√w
 [1024];

23 
	$ã¨Down
()

25 
dñëe
 [] 
_buf„r
;

26 
	}
}

28 
	$ã°_°r˝y
()

30 
	`°r˝y
–
_buf„r
, "Hello, world!" );

31 
	`TS_ASSERT_EQUALS
–
_buf„r
[0], 'H' );

32 
	`TS_ASSERT_EQUALS
–
_buf„r
[1], 'E' );

33 
	}
}

	@tools/cxxtest/sample/MessageTest.h

1 #i‚de‡
__MESSAGETEST_H


2 
	#__MESSAGETEST_H


	)

4 
	~<cxxã°/Te°Suôe.h
>

12 ˛as†
	cMesßgeTe°
 : 
public
 
CxxTe°
::
Te°Suôe


14 
public
:

15 
	$ã°VÆues
()

17 
	`checkVÆue
( 0, "My hovercraft" );

18 
	`checkVÆue
( 1, "is full" );

19 
	`checkVÆue
( 2, "ofÉels" );

22 
	$checkVÆue
–
vÆue
, c⁄° *
mesßge
 )

24 
	`TSM_ASSERT
–
mesßge
, 
vÆue
 != 0 );

25 
	`TSM_ASSERT_EQUALS
–
mesßge
, 
vÆue
, value * value );

26 
	}
}

	@tools/cxxtest/sample/SCons/include/stack.h

1 #i‚de‡
STACK_H


2 
	#STACK_H


	)

4 #ifde‡
__˝lu•lus


8 
	s°ack_t
 {

9 
size
;

10 * 
vÆs
;

11 
ˇ∑côy
;

12 } 
	t°ack_t
;

14 
°ack_t
* 
°ack_¸óã
();

15 
°ack_‰ì
(
°ack_t
* 
°ack
);

16 
°ack_size
(
°ack_t
* 
°ack
);

17 
°ack_push
(
°ack_t
* 
°ack
, 
vÆ
);

18 
°ack_p›
(
°ack_t
* 
°ack
);

19 
°ack_≥ak
(
°ack_t
* 
°ack
);

20 
°ack_ˇ∑côy
(
°ack_t
* 
°ack
);

22 #ifde‡
__˝lu•lus


	@tools/cxxtest/sample/SCons/src/stack.c

1 
	~<°ack.h
>

3 
	~<°dlib.h
>

5 
°ack_t
* 
	$°ack_¸óã
() {

6 
°ack_t
* 
ªtVÆ
 = 
	`mÆloc
((stack_t));

7 
ªtVÆ
->
size
 = 0;

8 
ªtVÆ
->
ˇ∑côy
 = 10;

9 
ªtVÆ
->
vÆs
 = 
	`mÆloc
‘ëVÆ->
ˇ∑côy
*());

10  
ªtVÆ
;

11 
	}
}

13 
	$°ack_‰ì
(
°ack_t
* 
°ack
) {

14 
	`‰ì
(
°ack
->
vÆs
);

15 
	`‰ì
(
°ack
);

16 
	}
}

18 
	$°ack_size
(
°ack_t
* 
°ack
) {

19  
°ack
->
size
;

20 
	}
}

22 
	$°ack_push
(
°ack_t
* 
°ack
, 
vÆ
) {

23 if(
°ack
->
size
 =°ack->
ˇ∑côy
) {

24 
°ack
->
ˇ∑côy
 *= 2;

25 
°ack
->
vÆs
 = 
	`ªÆloc
(°ack->vÆs, sèck->
ˇ∑côy
*());

27 
°ack
->
vÆs
[°ack->
size
++] = 
vÆ
;

28 
	}
}

30 
	$°ack_p›
(
°ack_t
* 
°ack
) {

31 i‡(
°ack
->
size
 >= 1)

32  
°ack
->
vÆs
[--°ack->
size
];

35 
	}
}

37 
	$°ack_≥ak
(
°ack_t
* 
°ack
) {

38 i‡(
°ack
->
size
 >= 1)

39  
°ack
->
vÆs
[°ack->
size
-1];

42 
	}
}

44 
	$°ack_ˇ∑côy
(
°ack_t
* 
°ack
) {

45  
°ack
->
ˇ∑côy
;

46 
	}
}

	@tools/cxxtest/sample/SCons/tests/stack_test.h

1 #i‚de‡
STACK_TEST_H


2 
	#STACK_TEST_H


	)

4 
	~<cxxã°/Te°Suôe.h
>

5 
	~<°ack.h
>

7 ˛as†
	c°ack_ã°
 : 
public
 
CxxTe°
::
Te°Suôe


10 
¥iv©e
:

11 
°ack_t
* 
°ack
;

12 
	mpublic
:

14 
	$£tUp
() {

15 
°ack
 = 
	`°ack_¸óã
();

18 
	$ã¨Down
() {

19 
	`°ack_‰ì
(
°ack
);

20 
	}
}

22 
	$ã°_¸óã_°ack
() {

23 
	`TS_ASSERT_DIFFERS
((
°ack_t
*)0, 
°ack
);

24 
	}
}

26 
	$ã°_√w_°ack_is_em±y
() {

27 
	`TS_ASSERT_EQUALS
(0, 
	`°ack_size
(
°ack
));

28 
	}
}

30 
	$ã°_⁄e_push_add_⁄e_to_size
() {

31 
	`°ack_push
(
°ack
, 1);

32 
	`TS_ASSERT_EQUALS
(1, 
	`°ack_size
(
°ack
));

33 
	}
}

35 
	$ã°_push_p›_d€¢t_ch™ge_size
() {

36 
	`°ack_push
(
°ack
, 1);

37 ()
	`°ack_p›
(
°ack
);

38 
	`TS_ASSERT_EQUALS
(0, 
	`°ack_size
(
°ack
));

39 
	}
}

41 
	$ã°_≥ak_a·î_push
() {

42 
	`°ack_push
(
°ack
, 1);

43 
	`TS_ASSERT_EQUALS
(1, 
	`°ack_≥ak
(
°ack
))

44 
	}
}

46 
	$ã°_öôül_ˇ∑côy_is_posôive
() {

47 
	`TS_ASSERT
(
	`°ack_ˇ∑côy
(
°ack
) > 0);

48 
	}
}

50 
	$ã°_p›_⁄_em±y
() {

51 
	`TS_ASSERT_EQUALS
(0, 
	`°ack_p›
(
°ack
));

52 
	`TS_ASSERT_EQUALS
(0, 
	`°ack_size
(
°ack
));

53 
	}
}

55 
	$ã°_≥ak_⁄_em±y
() {

56 
	`TS_ASSERT_EQUALS
(0, 
	`°ack_≥ak
(
°ack
));

57 
	}
}

59 
	$ã°_ˇ∑côy_gã_size
() {

60 
	`TS_ASSERT_LESS_THAN_EQUALS
(
	`°ack_size
(
°ack
), 
	`°ack_ˇ∑côy
(stack));

61 
öô_ˇ∑côy
 = 
	`°ack_ˇ∑côy
(
°ack
);

62 
i
=0; i < 
öô_ˇ∑côy
 + 1; i++) {

63 
	`°ack_push
(
°ack
, 
i
);

65 
	`TS_ASSERT_LESS_THAN_EQUALS
(
	`°ack_size
(
°ack
), 
	`°ack_ˇ∑côy
(stack));

66 
	}
}

	@tools/cxxtest/sample/SimpleTest.h

1 #i‚de‡
__SIMPLETEST_H


2 
	#__SIMPLETEST_H


	)

4 
	~<cxxã°/Te°Suôe.h
>

10 ˛as†
	cSim∂eTe°
 : 
public
 
CxxTe°
::
Te°Suôe


12 
public
:

13 
	$ã°EquÆôy
()

15 
	`TS_ASSERT_EQUALS
( 1, 1 );

16 
	`TS_ASSERT_EQUALS
( 1, 2 );

17 
	`TS_ASSERT_EQUALS
( 'a', 'A' );

18 
	`TS_ASSERT_EQUALS
( 1.0, -12345678900000000000000000000000000000000000000000.1234 );

21 
	$ã°Addôi⁄
()

23 
	`TS_ASSERT_EQUALS
( 1 + 1, 2 );

24 
	`TS_ASSERT_EQUALS
( 2 + 2, 5 );

25 
	}
}

27 
	$Te°Mu…ùliˇti⁄
()

29 
	`TS_ASSERT_EQUALS
( 2 * 2, 4 );

30 
	`TS_ASSERT_EQUALS
( 4 * 4, 44 );

31 
	`TS_ASSERT_DIFFERS
( -2 * -2, 4 );

32 
	}
}

34 
	$ã°Com∑ris⁄
()

36 
	`TS_ASSERT_LESS_THAN
( ()1, ()2 );

37 
	`TS_ASSERT_LESS_THAN
( -1, -2 );

38 
	}
}

40 
	$ã°TheW‹ldIsCøzy
()

42 
	`TS_ASSERT_EQUALS
–
åue
, 
Ál£
 );

43 
	}
}

45 
	$ã°_Faûuª
()

47 
	`TS_FAIL
( "Not implemented" );

48 
	`TS_FAIL
( 1569779912 );

49 
	}
}

51 
	$ã°_TS_WARN_ma¸o
()

53 
	`TS_WARN
( "Justá friendly warning" );

54 
	`TS_WARN
( "Warnings don'tábortÅheÅest" );

55 
	}
}

	@tools/cxxtest/sample/TraitsTest.h

1 #i‚de‡
__TRAITSTEST_H


2 
	#__TRAITSTEST_H


	)

7 
	~<cxxã°/Te°Suôe.h
>

8 
	~<cxxã°/VÆueTøôs.h
>

13 
	~<°dio.h
>

14 
	~<°rög.h
>

16 ˛as†
	cPë


18 
	m_«me
[128];

19 
	mpublic
:

20 
	$Pë
–c⁄° *
≥tName
 ) { 
	`°r˝y
–
_«me
,ÖetName ); }

22 c⁄° *
	$«me
(Ëc⁄° {  
_«me
; 
	}
}

24 
boﬁ
 
	g›î©‹
=–c⁄° 
Pë
 &
Ÿhî
 ) const

26  !
°rcmp
–
«me
(), 
Ÿhî
.name() );

35 
«me•a˚
 
	gCxxTe°


37 
CXXTEST_TEMPLATE_INSTANTIATION


38 
˛ass
 
	gVÆueTøôs
<c⁄° 
	gPë
>

40 
	g_asSåög
[256];

42 
	gpublic
:

43 
VÆueTøôs
–c⁄° 
Pë
 &
≥t
 ) { 
•rötf
–
_asSåög
, "Pë(\"%s\")",Öë.
«me
() ); }

44 c⁄° *
asSåög
(Ëc⁄° {  
	g_asSåög
; }

47 
CXXTEST_COPY_CONST_TRAITS
–
Pë
 );

53 ˛as†
	cTe°Funky
 : 
public
 
CxxTe°
::
Te°Suôe


55 
public
:

56 
	$ã°Pës
()

58 
Pë
 
	`≥t1
("dog"), 
	`≥t2
("cat");

59 
	`TS_ASSERT_EQUALS
–
≥t1
, 
≥t2
 );

60 
Pë
 
	`ˇt
("ˇt"), 
	`g©o
("cat");

61 
	`TS_ASSERT_DIFFERS
–
ˇt
, 
g©o
 );

62 #ifde‡
_CXXTEST_HAVE_STD


63 
	`CXXTEST_STD
(
	t°rög
Ë
	tSåög
;

64 
	`TS_ASSERT_EQUALS
–
	`Såög
("Hello"), String("World!") );

67 
	}
};

	@tools/cxxtest/sample/gui/GreenYellowRed.h

1 
	~<cxxã°/Te°Suôe.h
>

3 #ifde‡
_WIN32


4 
	~<wödows.h
>

5 
	#CXXTEST_SAMPLE_GUI_WAIT
(Ë
	`SÀï
–1000 )

	)

7 "C" 
¶ìp
–
£c⁄ds
 );

8 
	#CXXTEST_SAMPLE_GUI_WAIT
(Ë
	`¶ìp
–1 )

	)

11 ˛as†
	cGªíYñlowRed
 : 
public
 
CxxTe°
::
Te°Suôe


13 
public
:

14 
	$waô
()

16 
	`CXXTEST_SAMPLE_GUI_WAIT
();

19 
	$ã°_Sèπ_gªí
()

21 
	`waô
();

22 
	}
}

24 
	$ã°_Gªí_agaö
()

26 
	`TS_TRACE
( "Still green" );

27 
	`waô
();

28 
	}
}

30 
	$ã°_Now_yñlow
()

32 
	`TS_WARN
( "Yellow" );

33 
	`waô
();

34 
	}
}

36 
	$ã°_C™nŸ_go_back
()

38 
	`waô
();

39 
	}
}

41 
	$ã°_FöÆly_ªd
()

43 
	`TS_FAIL
( "Red" );

44 
	`waô
();

45 
	}
}

47 
	$ã°_C™nŸ_go_back_to_yñlow
()

49 
	`TS_WARN
( "Yellow?" );

50 
	`waô
();

51 
	}
}

53 
	$ã°_C™nŸ_go_back_to_gªí
()

55 
	`waô
();

56 
	}
}

	@tools/cxxtest/sample/mock/Dice.cpp

1 
	~<T/°dlib.h
>

2 
	~"Di˚.h
"

4 
	gDi˚
::
	$Di˚
()

6 
T
::
	`§™d
–T::
	`time
( 0 ) );

7 
	}
}

9 
	gDi˚
::
	$rﬁl
()

11  (
T
::
	`ønd
() % 6) + 1;

12 
	}
}

	@tools/cxxtest/sample/mock/Dice.h

1 #i‚de‡
__DICE_H


2 
	#__DICE_H


	)

4 ˛as†
	cDi˚


6 
	mpublic
:

7 
Di˚
();

9 
rﬁl
();

	@tools/cxxtest/sample/mock/MockStdlib.h

1 
	~<T/°dlib.h
>

3 
˛ass
 
	gMockStdlib
 :

4 
public
 
T
::
Ba£_§™d
,

5 
public
 
	gT
::
Ba£_ønd
,

6 
public
 
	gT
::
Ba£_time


8 
public
:

9 
œ°Sìd
;

11 
§™d
–
£ed
 )

13 
	gœ°Sìd
 = 
£ed
;

16 
	g√xtR™d
;

18 
ønd
()

20  
	g√xtR™d
;

23 
time_t
 
	g√xtTime
;

25 
time_t
 
time
–time_à*
t
 )

27 i‡–
	gt
 )

28 *
	gt
 = 
√xtTime
;

29  
	g√xtTime
;

	@tools/cxxtest/sample/mock/T/stdlib.h

1 #i‚de‡
__T__STDLIB_H


2 
	#__T__STDLIB_H


	)

4 
	~<°dlib.h
>

5 
	~<time.h
>

7 
	~<cxxã°/Mock.h
>

9 
CXXTEST_MOCK_VOID_GLOBAL
–
§™d
, ( 
£ed
 ), ( seed ) );

10 
CXXTEST_MOCK_GLOBAL
–, 
ønd
, ( ), () );

11 
CXXTEST_MOCK_GLOBAL
–
time_t
, 
time
, (Åime_à*
t
 ), (Å ) );

	@tools/cxxtest/sample/mock/TestDice.h

1 
	~<cxxã°/Te°Suôe.h
>

2 
	~"Di˚.h
"

3 
	~"MockStdlib.h
"

5 ˛as†
	cTe°Di˚
 : 
public
 
CxxTe°
::
Te°Suôe


7 
public
:

8 
MockStdlib
 *
°dlib
;

10 
	$£tUp
()

12 
	`TS_ASSERT
–
°dlib
 = 
√w
 
MockStdlib
 );

15 
	$ã¨Down
()

17 
dñëe
 
°dlib
;

18 
	}
}

20 
	$ã°_R™domize_u£s_time
()

22 
°dlib
->
√xtTime
 = 12345;

23 
Di˚
 
di˚
;

24 
	`TS_ASSERT_EQUALS
–
°dlib
->
œ°Sìd
, 12345 );

25 
	}
}

27 
	$ã°_Rﬁl
()

29 
Di˚
 
di˚
;

31 
°dlib
->
√xtR™d
 = 0;

32 
	`TS_ASSERT_EQUALS
–
di˚
.
	`rﬁl
(), 1 );

34 
°dlib
->
√xtR™d
 = 2;

35 
	`TS_ASSERT_EQUALS
–
di˚
.
	`rﬁl
(), 3 );

37 
°dlib
->
√xtR™d
 = 5;

38 
	`TS_ASSERT_EQUALS
–
di˚
.
	`rﬁl
(), 6 );

40 
°dlib
->
√xtR™d
 = 7;

41 
	`TS_ASSERT_EQUALS
–
di˚
.
	`rﬁl
(), 2 );

42 
	}
}

44 
	$ã°_Temp‹¨y_ovîride_of_⁄e_mock_fun˘i⁄
()

46 
Di˚
 
di˚
;

48 
°dlib
->
√xtR™d
 = 2;

49 
	`TS_ASSERT_EQUALS
–
di˚
.
	`rﬁl
(), 3 );

51 ˛as†
	cFive
 : 
public
 
T
::
Ba£_ønd
 { 
	`ønd
() {  5; } };

53 
Five
 *
five
 = 
√w
 Five;

54 
	`TS_ASSERT_EQUALS
–
di˚
.
	`rﬁl
(), 6 );

55 
	`TS_ASSERT_EQUALS
–
di˚
.
	`rﬁl
(), 6 );

56 
	`TS_ASSERT_EQUALS
–
di˚
.
	`rﬁl
(), 6 );

57 
dñëe
 
five
;

59 
°dlib
->
√xtR™d
 = 1;

60 
	`TS_ASSERT_EQUALS
–
di˚
.
	`rﬁl
(), 2 );

61 
	}
}

	@tools/cxxtest/sample/mock/mock_stdlib.cpp

1 
	#CXXTEST_MOCK_TEST_SOURCE_FILE


	)

2 
	~<T/°dlib.h
>

	@tools/cxxtest/sample/mock/real_stdlib.cpp

1 
	#CXXTEST_MOCK_REAL_SOURCE_FILE


	)

2 
	~<T/°dlib.h
>

	@tools/cxxtest/sample/mock/roll.cpp

1 
	~<°dio.h
>

2 
	~"Di˚.h
"

4 
	$maö
()

6 
Di˚
 
di˚
;

7 
	`¥ötf
–"Fú°Ñﬁl: %u\n", 
di˚
.
	`rﬁl
() );

8 
	`¥ötf
–"Sec⁄dÑﬁl: %u\n", 
di˚
.
	`rﬁl
() );

11 
	}
}

	@tools/cxxtest/sample/yes_no_runner.cpp

6 
	~<cxxã°/YesNoRu¬î.h
>

8 
	$maö
()

10  
CxxTe°
::
	`YesNoRu¬î
().
	`run
();

11 
	}
}

	@tools/cxxtest/test/AborterNoThrow.h

1 
	~<cxxã°/Te°Suôe.h
>

8 ˛as†
	cAb‹ãrNoThrow
 : 
public
 
CxxTe°
::
Te°Suôe


10 
public
:

11 
	$ã°Faûuªs
()

13 
	`TS_FAIL
(1);

14 
	`TS_FAIL
(2);

15 
	`TS_FAIL
(3);

16 
	`TS_FAIL
(4);

17 
	`TS_FAIL
(5);

19 
	}
};

	@tools/cxxtest/test/BadTest.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cBadTe°


9 
public
 
CxxTe°
::
Te°Suôe


11 
public
:

12 
	$ã°EquÆôy
()

14 
	`TS_ASSERT_EQUALS
( 1, 1 );

15 
	`TS_ASSERT_EQUALS
( 1, 2 );

16 
	`TS_ASSERT_EQUALS
( 'a', 'A' );

17 
	`TS_ASSERT_EQUALS
( 1.0, -12345678900000000000000000000000000000000000000000.1234 );

20 
	$ã°Addôi⁄
()

22 
	`TS_ASSERT_EQUALS
( 1 + 1, 2 );

23 
	`TS_ASSERT_EQUALS
( 2 + 2, 5 );

24 
	}
}

26 
	$Te°Mu…ùliˇti⁄
()

28 
	`TS_ASSERT_EQUALS
( 2 * 2, 4 );

29 
	`TS_ASSERT_EQUALS
( 4 * 4, 44 );

30 
	`TS_ASSERT_DIFFERS
( -2 * -2, 4 );

31 
	}
}

33 
	$ã°Com∑ris⁄
()

35 
	`TS_ASSERT_LESS_THAN
( ()1, ()2 );

36 
	`TS_ASSERT_LESS_THAN
( -1, -2 );

37 
	}
}

39 
	$ã°TheW‹ldIsCøzy
()

41 
	`TS_ASSERT_EQUALS
–
åue
, 
Ál£
 );

42 
	}
}

44 
	$ã°_Faûuª
()

46 
	`TS_FAIL
( "Not implemented" );

47 
	`TS_FAIL
( 1569779912 );

48 
	}
}

50 
	$ã°_TS_WARN_ma¸o
()

52 
	`TS_WARN
( "Justá friendly warning" );

53 
	`TS_WARN
( "Warnings don'tábortÅheÅest" );

54 
	}
}

	@tools/cxxtest/test/Comments.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cCommíts
 : 
public
 
CxxTe°
::
Te°Suôe


9 
public
:

10 
	$ã°_Somëhög
()

12 
	`TS_WARN
( "Something" );

24 
	}
};

	@tools/cxxtest/test/Comments2.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cCommíts
 : 
public
 
CxxTe°
::
Te°Suôe


9 
public
:

10 
	$ã°_Somëhög
()

12 
	`TS_WARN
( "Something" );

21 
	}
};

	@tools/cxxtest/test/CppTemplateTest.h

1 
	~<cxxã°/Te°Suôe.h
>

3 
	gãm∂©e
 <
˛ass
 
	gT
>

4 ˛as†
	cTe°s


6 
	mpublic
:

8 
CXXTEST_STD
(
li°
)<
T
>* 
ˇche
;

10 
	$£tUp
()

12 
this
->
ˇche
 = 
√w
 
	`CXXTEST_STD
(
li°
)<
T
>();

15 
	$ã¨Down
()

16 { 
	}
}

18 
	$ã°_size
()

20 
	`TS_ASSERT_EQUALS
(
ˇche
->
	`size
(), 0);

21 
	}
}

23 
	$ã°_ö£π
()

25 
this
->
ˇche
->
	`push_back
(1);

26 
	`TS_ASSERT_EQUALS
(
ˇche
->
	`size
(), 1);

27 
	}
}

31 
˛ass
 
	gI¡Te°s
: 
public
 
Te°s
<>,Öubli¯
	gCxxTe°
::
Te°Suôe


33 
public
:

35 
£tUp
(Ë{ 
Te°s
<>::setUp(); }

36 
ã¨Down
(Ë{ 
	gTe°s
<>::tearDown(); }

	@tools/cxxtest/test/DeepAbort.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cDìpAb‹t
 : 
public
 
CxxTe°
::
Te°Suôe


9 
public
:

10 
	$ã°As£πThrowsPas£sAb‹t
()

12 
	`TS_ASSERT_THROWS
–
	`Áû
(), );

13 
	`TS_FAIL
( "You shouldn't seeÅhis if --abort-on-fail is used" );

16 
	$ã°MesßgeAs£πThrowsPas£sAb‹t
()

18 
	`TSM_ASSERT_THROWS
–"Áû(ËshouldÅhrowá¿öt", 
	`Áû
(), );

19 
	`TS_FAIL
( "You shouldn't seeÅhis if --abort-on-fail is used" );

20 
	}
}

22 
	$ã°As£πThrowsAb‹ts
()

24 
	`TS_ASSERT_THROWS
–
	`suc˚ed
(), );

25 
	`TS_FAIL
( "You shouldn't seeÅhis if --abort-on-fail is used" );

26 
	}
}

28 
	$ã°MesßgeAs£πThrowsAb‹ts
()

30 
	`TSM_ASSERT_THROWS
–"suc˚ed(ËshouldÅhrowá¿öt", 
	`suc˚ed
(), );

31 
	`TS_FAIL
( "You shouldn't seeÅhis if --abort-on-fail is used" );

32 
	}
}

34 
	$ã°As£πThrowsNŸhögPas£sAb‹t
()

36 
	`TS_ASSERT_THROWS_NOTHING
–
	`Áû
() );

37 
	`TS_FAIL
( "You shouldn't seeÅhis if --abort-on-fail is used" );

38 
	}
}

40 
	$ã°MesßgeAs£πThrowsNŸhögPas£sAb‹t
()

42 
	`TSM_ASSERT_THROWS_NOTHING
–"Áû(Ëshouldn'àthrowánythög", 
	`Áû
() );

43 
	`TS_FAIL
( "You shouldn't seeÅhis if --abort-on-fail is used" );

44 
	}
}

46 
	$ã°As£πThrowsNŸhögAb‹ts
()

48 
	`TS_ASSERT_THROWS_NOTHING
–
	`throwSomëhög
() );

49 
	`TS_FAIL
( "You shouldn't seeÅhis if --abort-on-fail is used" );

50 
	}
}

52 
	$ã°MesßgeAs£πThrowsNŸhögAb‹ts
()

54 
	`TSM_ASSERT_THROWS_NOTHING
–"Áû(Ëshouldn'àthrowánythög", 
	`throwSomëhög
() );

55 
	`TS_FAIL
( "You shouldn't seeÅhis if --abort-on-fail is used" );

56 
	}
}

58 
	$ã°As£πThrowsAnythög
()

60 
	`TS_ASSERT_THROWS_ANYTHING
–
	`suc˚ed
() );

61 
	`TS_FAIL
( "You shouldn't seeÅhis if --abort-on-fail is used" );

62 
	}
}

64 
	$ã°MesßgeAs£πThrowsAnythög
()

66 
	`TSM_ASSERT_THROWS_ANYTHING
–"suc˚ed(ËshouldÅhrow somëhög", 
	`suc˚ed
() );

67 
	`TS_FAIL
( "You shouldn't seeÅhis if --abort-on-fail is used" );

68 
	}
}

70 
	$Áû
()

72 
	`TS_ASSERT_EQUALS
( 0, 1 );

73 
	}
}

75 
	$throwSomëhög
()

77 
throw
 "something";

78 
	}
}

80 
	$suc˚ed
()

82 
	`TS_ASSERT_EQUALS
( 1, 1 );

83 
	}
}

	@tools/cxxtest/test/DefaultAbort.h

1 
	#CXXTEST_HAVE_EH


	)

2 
	#CXXTEST_ABORT_TEST_ON_FAIL


	)

3 
	#CXXTEST_DEFAULT_ABORT
 
Ál£


	)

	@tools/cxxtest/test/DefaultTraits.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cDeÁu…Tøôs
 : 
public
 
CxxTe°
::
Te°Suôe


9 
public
:

10 
	sEightByãs


12 
EightByãs
() {}

13 
d©a
[8];

16 
	$ã°SmÆlDeÁu…Tøôs
()

18 
EightByãs
 
x
;

19  
i
 = 0; i < (
x
.
d©a
); ++ i )

20 
x
.
d©a
[
i
] = ()i;

21 
	`TS_FAIL
–
x
 );

22 
	}
}

24 
	sNöeByãs


26 
NöeByãs
() {}

27 
	gd©a
[9];

30 
	$ã°BigDeÁu…Tøôs
()

32 
NöeByãs
 
x
;

33  
i
 = 0; i < (
x
.
d©a
); ++ i )

34 
x
.
d©a
[
i
] = ()(0x98 + i);

35 
	`TS_FAIL
–
x
 );

36 
	}
}

	@tools/cxxtest/test/DoubleCall.h

1 
	~<cxxã°/Te°Suôe.h
>

9 ˛as†
	cDoubÀCÆl
 : 
public
 
CxxTe°
::
Te°Suôe


11 
public
:

12 
i
;

14 
	$£tUp
()

16 
i
 = 0;

19 
	$ã°As£πEquÆsWôhSideEf„˘s
()

21 
	`TS_ASSERT_EQUALS
–
	`ö¸emít
(), 3 );

22 
	}
}

24 
	$ã°As£πDif„rsWôhSideEf„˘s
()

26 
	`TS_ASSERT_DIFFERS
–
	`ö¸emít
(), 1 );

27 
	}
}

29 
	$ã°As£πDñèWôhSideEf„˘s
()

31 
	`TS_ASSERT_DELTA
–
	`ö¸emít
(), 2.0, 0.5 );

32 
	}
}

34 
	$ö¸emít
()

36  ++
i
;

37 
	}
}

	@tools/cxxtest/test/DynamicAbort.h

1 
	~<cxxã°/Te°Suôe.h
>

3 ˛as†
	cDy«micAb‹t
 : 
public
 
CxxTe°
::
Te°Suôe


5 
public
:

6 
	$ã°_Ab‹t_⁄_Áû_ö_this_ã°
()

8 
	`TS_ASSERT_EQUALS
( 1, 2 );

9 
	`TS_ASSERT_EQUALS
( 2, 3 );

12 
	$ã°_D⁄t_ab‹t_ö_this_ã°
()

14 
CxxTe°
::
	`£tAb‹tTe°OnFaû
–
Ál£
 );

15 
	`TS_ASSERT_EQUALS
( 1, 2 );

16 
	`TS_ASSERT_EQUALS
( 2, 3 );

17 
	}
}

19 
	$ã°_Revît_to_ab‹t
()

21 
	`TS_ASSERT_EQUALS
( 1, 2 );

22 
	`TS_ASSERT_EQUALS
( 2, 3 );

23 
	}
}

26 ˛as†
	cSëUpW‹ksAŒTe°s
 : 
public
 
CxxTe°
::
Te°Suôe


28 
public
:

29 
	$£tUp
()

31 
CxxTe°
::
	`£tAb‹tTe°OnFaû
–
Ál£
 );

34 
	$ã°_D⁄t_ab‹t_ö_this_ã°
()

36 
	`TS_ASSERT_EQUALS
( 1, 2 );

37 
	`TS_ASSERT_EQUALS
( 2, 3 );

38 
	}
}

40 
	$ã°_D⁄t_ab‹t_ö_this_ã°_eôhî
()

42 
	`TS_ASSERT_EQUALS
( 1, 2 );

43 
	`TS_ASSERT_EQUALS
( 2, 3 );

44 
	}
}

46 
	$ã°_Ovîride_ö_this_ã°
()

48 
CxxTe°
::
	`£tAb‹tTe°OnFaû
–
åue
 );

49 
	`TS_ASSERT_EQUALS
( 1, 2 );

50 
	`TS_ASSERT_EQUALS
( 2, 3 );

51 
	}
}

	@tools/cxxtest/test/DynamicMax.h

1 
	~<cxxã°/Te°Suôe.h
>

3 ˛as†
	cDy«micMax
 : 
public
 
CxxTe°
::
Te°Suôe


5 
public
:

6 íum { 
DATA_SIZE
 = 24 };

7 
	gx
[
DATA_SIZE
], 
	gy
[DATA_SIZE];

9 
	$£tUp
()

11  
i
 = 0; i < 
DATA_SIZE
; ++ i ) {

12 
x
[
i
] = ()i;

13 
y
[
i
] = ()~
x
[i];

15 
	}
}

17 
	$ã°_Max_size_‰om_deföe
()

19 
	`TS_ASSERT_SAME_DATA
–
x
, 
y
, 
DATA_SIZE
 );

20 
	}
}

22 
	$ã°_Së_max_size
()

24 
CxxTe°
::
	`£tMaxDumpSize
( 16 );

25 
	`TS_ASSERT_SAME_DATA
–
x
, 
y
, 
DATA_SIZE
 );

26 
	}
}

28 
	$ã°_Revît_to_max_size_‰om_deföe
()

30 
	`TS_ASSERT_SAME_DATA
–
x
, 
y
, 
DATA_SIZE
 );

31 
	}
}

33 
	$ã°_Së_max_size_to_zîo__dumps_Æl
()

35 
CxxTe°
::
	`£tMaxDumpSize
( 0 );

36 
	`TS_ASSERT_SAME_DATA
–
x
, 
y
, 
DATA_SIZE
 );

37 
	}
}

40 ˛as†
	cSëUpAf„˘sAŒTe°s
 : 
public
 
CxxTe°
::
Te°Suôe


42 
public
:

43 íum { 
DATA_SIZE
 = 24 };

44 
	gx
[
DATA_SIZE
], 
	gy
[DATA_SIZE];

46 
	$£tUp
()

48  
i
 = 0; i < 
DATA_SIZE
; ++ i ) {

49 
x
[
i
] = ()i;

50 
y
[
i
] = ()~
x
[i];

53 
CxxTe°
::
	`£tMaxDumpSize
( 12 );

54 
	}
}

56 
	$ã°_U£_12_ö_this_ã°
()

58 
	`TS_ASSERT_SAME_DATA
–
x
, 
y
, 
DATA_SIZE
 );

59 
	}
}

61 
	$ã°_U£_12_ö_this_ã°_too
()

63 
	`TS_ASSERT_SAME_DATA
–
x
, 
y
, 
DATA_SIZE
 );

64 
	}
}

	@tools/cxxtest/test/EmptySuite.h

1 
	~<cxxã°/Te°Suôe.h
>

3 ˛as†
	cEm±ySuôe
 : 
public
 
CxxTe°
::
Te°Suôe


5 
public
:

6 
Em±ySuôe
 *
	$¸óãSuôe
(Ë{  
√w
 
	`Em±ySuôe
(); }

7 
	$de°roySuôe
–
Em±ySuôe
 *
suôe
 ) { 
dñëe
 suôe; 
	}
}

9 
	$£tUp
(Ë{
	}
}

10 
	$ã¨Down
(Ë{
	}
}

12 
	$thisSuôeHasNoTe°s
()

14 
	`TS_FAIL
( "This suite hasÇoÅests" );

15 
	}
}

	@tools/cxxtest/test/Exceptions.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cNuŒCª©e
 : 
public
 
CxxTe°
::
Te°Suôe


9 
public
:

10 
NuŒCª©e
 *
	$¸óãSuôe
() {  0; }

11 
	$de°roySuôe
–
NuŒCª©e
 * ) { 
	`TS_FAIL
–"ShouldÇŸ bêˇŒed" ); 
	}
}

13 
	$ã°NŸhög
()

15 
	`TS_FAIL
( "Test calledálthoughÇo suite" );

16 
	}
}

19 ˛as†
	cThrowCª©e
 : 
public
 
CxxTe°
::
Te°Suôe


21 
public
:

22 
ThrowCª©e
 *
	$¸óãSuôe
(Ë{ 
throw
 -3; }

23 
	$de°roySuôe
–
ThrowCª©e
 * ) { 
	`TS_FAIL
–"ShouldÇŸ bêˇŒed" ); 
	}
}

25 
	$ã°NŸhög
()

27 
	`TS_FAIL
( "Test calledálthoughÇo suite" );

28 
	}
}

31 ˛as†
	cThrowDe°roy
 : 
public
 
CxxTe°
::
Te°Suôe


33 
public
:

34 
ThrowDe°roy
 *
	$¸óãSuôe
(Ë{  
√w
 
ThrowDe°roy
; }

35 
	$de°roySuôe
–
ThrowDe°roy
 * ) { 
throw
 42; 
	}
}

37 
	$ã°NŸhög
(Ë{
	}
}

40 ˛as†
	cThrowSëUp
 : 
public
 
CxxTe°
::
Te°Suôe


42 
public
:

43 
	$£tUp
(Ë{ 
throw
 5; }

44 
	$ã¨Down
(Ë{ 
	`TS_FAIL
–"Shouldn'àgë hîe" ); 
	}
}

46 
	$ã°NŸhög
(Ë{ 
	`TS_FAIL
–"Shouldn'àgë hîe" ); 
	}
}

49 ˛as†
	cThrowTórDown
 : 
public
 
CxxTe°
::
Te°Suôe


51 
public
:

52 
	$£tUp
() {}

53 
	$ã¨Down
(Ë{ 
throw
 5; 
	}
}

55 
	$ã°NŸhög
(Ë{
	}
}

58 ˛as†
	cTe°ThrowFromTe°
 : 
public
 
CxxTe°
::
Te°Suôe


60 
public
:

61 
	$ã°ThrowSomëhög
()

63 
throw
 582;

66 
	$ã°MoveOn
()

68 
	`TS_TRACE
( "One failedÅest doesn'táffectÅhe others" );

69 
	}
}

	@tools/cxxtest/test/Factor.h

5 
	~<cxxã°/Te°Suôe.h
>

6 
	~<cxxã°/DummyDes¸ùti⁄s.h
>

8 ˛as†
	cFa˘‹
 : 
public
 
CxxTe°
::
Te°Suôe


10 
public
:

11 ˛as†
	cX
 : 
public
 
CxxTe°
::
DummyW‹ldDes¸ùti⁄


13 
public
:

14 
n
;

15 
numTŸÆTe°s
(Ëc⁄° {  
	mn
; }

18 
X
 
	gx
;

19 
	eLimô
 { 
	gMAX_STRLEN_TOTAL_TESTS
 = 
CxxTe°
::
W‹ldDes¸ùti⁄
::
MAX_STRLEN_TOTAL_TESTS
 };

20 
	gbuf„r
[
MAX_STRLEN_TOTAL_TESTS
 * 2];

22 c⁄° *
	$c⁄vît
–
n
 )

24 
x
.
n
 =Ç;

25  
x
.
	`°rTŸÆTe°s
–
buf„r
 );

26 
	}
}

28 
	$ã°_Some_numbîs
()

30 
	`TS_WARN
–
	`c⁄vît
(53) );

31  
n
 = 0;Ç < 64; ++Ç ) {

32 
	`TS_ASSERT_DIFFERS
–
n
, 32 );

33 
	`TS_WARN
–
	`c⁄vît
(
n
) );

35 
	}
}

37 ˛as†
	cSh‹ãrTh™


39 
	gpublic
:

40 
boﬁ
 
›î©‹
()–c⁄° *
s
, 
	gn
 ) const

42 
	gÀn
 = 0;

43  *
	gs
++ != '\0' )

44 ++ 
Àn
;

45  (
	gÀn
 < 
	gn
);

49 ˛as†
	cNŸSh‹ãrTh™


51 
Sh‹ãrTh™
 
	g_sh‹ãrTh™
;

53 
	gpublic
:

54 
boﬁ
 
›î©‹
()–c⁄° *
s
, 
	gn
 ) c⁄° {  !
_sh‹ãrTh™
–s, 
n
 ); }

57 
	$ã°_Lígths
()

59 
ªas⁄abÀLimô
 = 60060;

60  
n
 = 0;Ç < 
ªas⁄abÀLimô
; ++Ç )

61 
	`TS_ASSERT_RELATION
–
Sh‹ãrTh™
, 
	`c⁄vît
(
n
), 
MAX_STRLEN_TOTAL_TESTS
 );

62 
	`TS_ASSERT_RELATION
–
NŸSh‹ãrTh™
, 
	`c⁄vît
(
ªas⁄abÀLimô
), 
MAX_STRLEN_TOTAL_TESTS
 );

63 
	}
}

	@tools/cxxtest/test/ForceNoEh.h

1 
	~<cxxã°/Te°Suôe.h
>

3 ˛as†
	cF‹˚NoEh
 : 
public
 
CxxTe°
::
Te°Suôe


5 
public
:

6 
	$ã°CxxTe°C™CompûeWôhoutEx˚±i⁄H™dlög
()

8 
	`TS_ASSERT_EQUALS
( 1, 2 );

9 
	`TS_ASSERT_EQUALS
( 2, 3 );

10 
	`TS_ASSERT_THROWS_NOTHING
–
	`foo
() );

13 
	$foo
()

15 
	}
}

	@tools/cxxtest/test/GfSetUpFails.h

5 
	~<cxxã°/Te°Suôe.h
>

6 
	~<cxxã°/GlobÆFixtuª.h
>

7 
	~<°dio.h
>

9 ˛as†
	cFixtuª
 : 
public
 
CxxTe°
::
GlobÆFixtuª


11 
public
:

12 
boﬁ
 
	$£tUp
(Ë{  
Ál£
; }

13 
	}
};

19 
Fixtuª
 
	gfixtuª
;

21 ˛as†
	cSuôe
 : 
public
 
CxxTe°
::
Te°Suôe


23 
public
:

24 
	$ã°O√
()

26 
	`TS_FAIL
( "Shouldn't get hereátáll" );

28 
	}
};

	@tools/cxxtest/test/GfSetUpThrows.h

5 
	~<cxxã°/Te°Suôe.h
>

6 
	~<cxxã°/GlobÆFixtuª.h
>

7 
	~<°dio.h
>

9 ˛as†
	cFixtuª
 : 
public
 
CxxTe°
::
GlobÆFixtuª


11 
public
:

12 
boﬁ
 
	$£tUp
(Ë{ 
throw
 
this
; }

13 
	}
};

19 
Fixtuª
 
	gfixtuª
;

21 ˛as†
	cSuôe
 : 
public
 
CxxTe°
::
Te°Suôe


23 
public
:

24 
	$ã°O√
()

26 
	`TS_FAIL
( "Shouldn't get hereátáll" );

28 
	}
};

	@tools/cxxtest/test/GfTearDownFails.h

5 
	~<cxxã°/Te°Suôe.h
>

6 
	~<cxxã°/GlobÆFixtuª.h
>

7 
	~<°dio.h
>

9 ˛as†
	cFixtuª
 : 
public
 
CxxTe°
::
GlobÆFixtuª


11 
public
:

12 
boﬁ
 
	$ã¨Down
(Ë{  
Ál£
; }

13 
	}
};

19 
Fixtuª
 
	gfixtuª
;

21 ˛as†
	cSuôe
 : 
public
 
CxxTe°
::
Te°Suôe


23 
public
:

24 
	$ã°O√
() {}

25 
	$ã°Two
(Ë{ 
	`TS_WARN
–"Te°ög should gÿ⁄!" ); 
	}
}

	@tools/cxxtest/test/GfTearDownThrows.h

5 
	~<cxxã°/Te°Suôe.h
>

6 
	~<cxxã°/GlobÆFixtuª.h
>

7 
	~<°dio.h
>

9 ˛as†
	cFixtuª
 : 
public
 
CxxTe°
::
GlobÆFixtuª


11 
public
:

12 
boﬁ
 
	$ã¨Down
(Ë{ 
throw
 
this
; }

13 
	}
};

19 
Fixtuª
 
	gfixtuª
;

21 ˛as†
	cSuôe
 : 
public
 
CxxTe°
::
Te°Suôe


23 
public
:

24 
	$ã°O√
() {}

25 
	$ã°Two
(Ë{ 
	`TS_WARN
–"Te°ög should gÿ⁄!" ); 
	}
}

	@tools/cxxtest/test/GlobalFixtures.h

5 
	~<cxxã°/Te°Suôe.h
>

6 
	~<cxxã°/GlobÆFixtuª.h
>

11 ˛as†
	cFixtuª1
 : 
public
 
CxxTe°
::
GlobÆFixtuª


13 
_£tUpCou¡
;

14 
	m_ã¨DownCou¡
;

16 
	mpublic
:

17 
	$Fixtuª1
(Ë{ 
_£tUpCou¡
 = 
_ã¨DownCou¡
 = 0; }

18 
boﬁ
 
	$£tUp
(Ë{ ++ 
_£tUpCou¡
;  
åue
; 
	}
}

19 
boﬁ
 
	$ã¨Down
(Ë{ ++ 
_ã¨DownCou¡
;  
åue
; 
	}
}

20 
	$£tUpCou¡
(Ëc⁄° {  
_£tUpCou¡
; 
	}
}

21 
	$ã¨DownCou¡
(Ëc⁄° {  
_ã¨DownCou¡
; 
	}
}

28 
Fixtuª1
 
	gfixtuª1
;

34 ˛as†
	cFixtuª2
 : 
public
 
Fixtuª1


36 
public
:

37 
boﬁ
 
	$£tUp
()

39 
	`TS_ASSERT_EQUALS
(
	`£tUpCou¡
(), 
fixtuª1
.setUpCount() - 1);

40 
	`TS_ASSERT_EQUALS
(
	`ã¨DownCou¡
(), 
fixtuª1
.tearDownCount());

41  
Fixtuª1
::
	`£tUp
();

44 
boﬁ
 
	$ã¨Down
()

46 
	`TS_ASSERT_EQUALS
(
	`£tUpCou¡
(), 
fixtuª1
.setUpCount());

47 
	`TS_ASSERT_EQUALS
(
	`ã¨DownCou¡
(), 
fixtuª1
.tearDownCount());

48  
Fixtuª1
::
	`ã¨Down
();

49 
	}
}

52 
Fixtuª2
 
	gfixtuª2
;

54 ˛as†
	cTe°GlobÆFixtuª
 : 
public
 
CxxTe°
::
Te°Suôe


56 
public
:

57 
	$ã°Cou¡sFú°Time
()

59 
	`TS_ASSERT_EQUALS
(
fixtuª1
.
	`£tUpCou¡
(), 1);

60 
	`TS_ASSERT_EQUALS
(
fixtuª1
.
	`ã¨DownCou¡
(), 0);

61 
	`TS_ASSERT_EQUALS
(
fixtuª2
.
	`£tUpCou¡
(), 1);

62 
	`TS_ASSERT_EQUALS
(
fixtuª2
.
	`ã¨DownCou¡
(), 0);

65 
	$ã°Cou¡sSec⁄dTime
()

67 
	`TS_ASSERT_EQUALS
(
fixtuª1
.
	`£tUpCou¡
(), 2);

68 
	`TS_ASSERT_EQUALS
(
fixtuª1
.
	`ã¨DownCou¡
(), 1);

69 
	`TS_ASSERT_EQUALS
(
fixtuª2
.
	`£tUpCou¡
(), 2);

70 
	`TS_ASSERT_EQUALS
(
fixtuª2
.
	`ã¨DownCou¡
(), 1);

71 
	}
}

	@tools/cxxtest/test/GoodSuite.h

1 
	~<cxxã°/Te°Suôe.h
>

2 
	~<m©h.h
>

9 ˛as†
	cGoodSuôe
 : 
public
 
CxxTe°
::
Te°Suôe


11 
public
:

12 
	$ã°As£π
()

14 
	`TS_ASSERT
–
åue
 );

15 
	`TS_ASSERT
( 1 == 1 );

16 
	`TS_ASSERT
( 13 );

17 
	`TS_ASSERT
–
this
 );

20 
	$ã°As£πMesßge
()

22 
	`TSM_ASSERT
( "ASCII works", 'A' == 65 );

23 
	}
}

25 
	$ã°EquÆs
()

27 
	`TS_ASSERT_EQUALS
( 1 + 1, 2 );

28 
	`TS_ASSERT_EQUALS
( 2 * 2, 4 );

29 
	`TS_ASSERT_EQUALS
( -4 * -4, 16 );

30 
	}
}

32 
	$ã°EquÆsMesßge
()

34 
	`TSM_ASSERT_EQUALS
( "Addition operator works", 1 + 1, 2 );

35 
	}
}

37 
	$ã°Dñè
()

39 
	`TS_ASSERT_DELTA
( 1.0 + 1.0, 2.0, 0.0001 );

40 
	}
}

42 
	$ã°DñèMesßge
()

44 
	`TSM_ASSERT_DELTA
–"sqπ(Ëw‹ks", 
	`sqπ
(2.0), 1.4142, 0.0001 );

45 
	}
}

47 
	$ã°Dif„rs
()

49 
	`TS_ASSERT_DIFFERS
( 0, 1 );

50 
	`TS_ASSERT_DIFFERS
( 0.12, 0.123 );

51 
	}
}

53 
	$ã°Dif„rsMesßge
()

55 
	`TSM_ASSERT_DIFFERS
( "Notáll isÅrue", 0, 1 );

56 
	}
}

58 
	$ã°LessTh™
()

60 
	`TS_ASSERT_LESS_THAN
( 1, 2 );

61 
	`TS_ASSERT_LESS_THAN
( -2, -1 );

62 
	}
}

64 
	$ã°LessTh™Mesßge
()

66 
	`TSM_ASSERT_LESS_THAN
–".5 i†Às†th™ it†squ¨êroŸ", 0.5, 
	`sqπ
(0.5) );

67 
	}
}

69 
	$ã°LessTh™EquÆs
()

71 
	`TS_ASSERT_LESS_THAN_EQUALS
( 3, 3 );

72 
	`TS_ASSERT_LESS_THAN_EQUALS
( 3, 4 );

73 
	}
}

75 
	$ã°LessTh™EquÆsMesßge
()

77 
	`TSM_ASSERT_LESS_THAN_EQUALS
–"1.0 <ô†squ¨êroŸ", 1.0, 
	`sqπ
(1.0) );

78 
	}
}

80 
	$ã°Throws
()

82 
	`TS_ASSERT_THROWS
–{ 
throw
 1; }, );

83 
	}
}

85 
	$ã°ThrowsMesßge
()

87 
	`TSM_ASSERT_THROWS
–"1 i†™ i¡egî", { 
throw
 1; }, );

88 
	}
}

90 
	$ã°ThrowsAnythög
()

92 
	`TS_ASSERT_THROWS_ANYTHING
–{ 
throw
 
	`GoodSuôe
(); } );

93 
	}
}

95 
	$ã°ThrowsAnythögMesßge
()

97 
	`TSM_ASSERT_THROWS_ANYTHING
( "Yes, you canÅhrowÅest suites",

98 { 
throw
 
	`GoodSuôe
(); } );

99 
	}
}

101 
	$ã°ThrowsNŸhög
()

103 
	`TS_ASSERT_THROWS_NOTHING
–
	`throwNŸhög
() );

104 
	}
}

106 
	$ã°ThrowsNŸhögMesßge
()

108 
	`TSM_ASSERT_THROWS_NOTHING
–"Em±y fun˘i⁄†do¢'àthrow", 
	`throwNŸhög
() );

109 
	}
}

111 
	$throwNŸhög
()

113 
	}
}

	@tools/cxxtest/test/GuiWait.h

1 #i‚de‡
__GUI_WAIT_H


2 
	#__GUI_WAIT_H


	)

4 
	#CXXTEST_SAMPLE_GUI_WAIT
()

	)

	@tools/cxxtest/test/HaveStd.h

1 
	~<cxxã°/Te°Suôe.h
>

6 
	~"Somëhög.h
"

8 ˛as†
	cHaveStd
 : 
public
 
CxxTe°
::
Te°Suôe


10 
public
:

11 
	$ã°HaveStd
()

13 
	`TS_ASSERT_EQUALS
–
	`somëhög
(), "Something" );

15 
	}
};

	@tools/cxxtest/test/IncludeTest.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cIn˛udesTe°
 : 
public
 
CxxTe°
::
Te°Suôe


9 
public
:

10 
	$ã°Tøôs
()

12 
	`TS_WARN
( (*)0 );

13 
	`TS_WARN
( (*)0 );

15 
	}
};

	@tools/cxxtest/test/InheritedTest.h

1 #i‚de‡
__INHERITANCETEST_H


2 
	#__INHERITANCETEST_H


	)

4 
	~<cxxã°/Te°Suôe.h
>

10 ˛as†
	cBa£Te°s


12 
	mpublic
:

13 
	$ã°EquÆôy
()

15 
	`TS_ASSERT_EQUALS
( 1, 1 );

16 
	`TS_ASSERT_EQUALS
( 1, 2 );

17 
	`TS_ASSERT_EQUALS
( 'a', 'A' );

18 
	`TS_ASSERT_EQUALS
( 1.0, -12345678900000000000000000000000000000000000000000.1234 );

21 
	$ã°Addôi⁄
()

23 
	`TS_ASSERT_EQUALS
( 1 + 1, 2 );

24 
	`TS_ASSERT_EQUALS
( 2 + 2, 5 );

25 
	}
}

27 
	$Te°Mu…ùliˇti⁄
()

29 
	`TS_ASSERT_EQUALS
( 2 * 2, 4 );

30 
	`TS_ASSERT_EQUALS
( 4 * 4, 44 );

31 
	`TS_ASSERT_DIFFERS
( -2 * -2, 4 );

32 
	}
}

34 
	$ã°Com∑ris⁄
()

36 
	`TS_ASSERT_LESS_THAN
( ()1, ()2 );

37 
	`TS_ASSERT_LESS_THAN
( -1, -2 );

38 
	}
}

40 
	$ã°TheW‹ldIsCøzy
()

42 
	`TS_ASSERT_EQUALS
–
åue
, 
Ál£
 );

43 
	}
}

45 
	$ã°_Faûuª
()

47 
	`TS_FAIL
( "Not implemented" );

48 
	`TS_FAIL
( 1569779912 );

49 
	}
}

51 
	$ã°_TS_WARN_ma¸o
()

53 
	`TS_WARN
( "Justá friendly warning" );

54 
	`TS_WARN
( "Warnings don'tábortÅheÅest" );

55 
	}
}

59 
˛ass
 
	gInhîôedTe°s1
 : 
public
 
Ba£Te°s
,Öubli¯
	gCxxTe°
::
Te°Suôe


62 
˛ass
 
	gInhîôedTe°s2
 : 
public
 
CxxTe°
::
Te°Suôe
,Öubli¯
	gBa£Te°s


	@tools/cxxtest/test/Int64.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cI¡64
 : 
public
 
CxxTe°
::
Te°Suôe


9 
public
:

10 
	$ã°I¡64
()

12 
	`TS_ASSERT_EQUALS
–(
__öt64
)1, (__int64)2 );

13 
	`TS_ASSERT_DIFFERS
–(
__öt64
)3, (__int64)3 );

14 
	`TS_ASSERT_LESS_THAN
–(
__öt64
)5, (__int64)4 );

16 
	}
};

	@tools/cxxtest/test/LessThanEquals.h

1 
	~<cxxã°/Te°Suôe.h
>

8 ˛as†
	cLessTh™EquÆs
 : 
public
 
CxxTe°
::
Te°Suôe


10 
public
:

11 
	$ã°LessTh™EquÆs
()

13 
	`TS_ASSERT_LESS_THAN_EQUALS
( 1, 2 );

14 
	`TS_ASSERT_LESS_THAN_EQUALS
( 1, 1 );

16 
	`TS_ASSERT_LESS_THAN_EQUALS
( 1, 0 );

17 
	`TSM_ASSERT_LESS_THAN_EQUALS
( "1 <=? 0", 1, 0 );

19 
	`ETS_ASSERT_LESS_THAN
( 1, 0 );

20 
	`ETSM_ASSERT_LESS_THAN_EQUALS
( "1 <=? 0", 1, 0 );

22 
	}
};

	@tools/cxxtest/test/LongLong.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cL⁄gL⁄gTe°
 : 
public
 
CxxTe°
::
Te°Suôe


9 
public
:

10 
	$ã°L⁄gL⁄g
()

12 
	`TS_ASSERT_EQUALS
( ()1, ()2 );

13 
	`TS_ASSERT_DIFFERS
( ()3, ()3 );

14 
	`TS_ASSERT_LESS_THAN
( ()5, ()4 );

16 
	}
};

	@tools/cxxtest/test/LongTraits.h

5 
	~<cxxã°/VÆueTøôs.h
>

7 
«me•a˚
 
	gCxxTe°


9 
CXXTEST_TEMPLATE_INSTANTIATION


10 
˛ass
 
	gVÆueTøôs
<*>

12 
	gpublic
:

13 
VÆueTøôs
( * ) {}

14 c⁄° *
asSåög
() {  "(long *)"; }

	@tools/cxxtest/test/MaxDump.h

5 
	#CXXTEST_MAX_DUMP_SIZE
 20

	)

	@tools/cxxtest/test/MockTest.h

4 
	~<cxxã°/Te°Suôe.h
>

9 
	$⁄e
–Ë{  1; 
	}
}

10 
	$two
–*
p
 ) { *∞2; 
	}
}

12 
«me•a˚
 
	gNameS∑˚


14 
idítôy
–
i
 ) {  
	gi
; }

15 
idítôy
–
d
 ) {  
	gd
; }

18 ˛as†
	cO∑que


20 
	mpublic
:

21 
ex∂icô
 
	$O∑que
–
i
 ) : 
	$vÆue
–
i
 ) {}

22 
vÆue
;

23 
	}
};

25 
O∑que
 
	$gëO∑que
–
i
 )

27  
	`O∑que
–
i
 );

28 
	}
}

30 
	#CXXTEST_MOCK_TEST_SOURCE_FILE


	)

31 
	~<cxxã°/Mock.h
>

33 
CXXTEST_MOCK_GLOBAL
–, 
⁄e
, ( ), () );

34 
CXXTEST_MOCK_VOID_GLOBAL
–
two
, ( *
p
 ), (Ö ) );

36 
CXXTEST_MOCK
–
ötIdítôy
, , 
idítôy
, ( 
i
 ), 
NameS∑˚
::identity, ( i ) );

37 
CXXTEST_MOCK
–
doubÀIdítôy
, , 
idítôy
, ( 
i
 ), 
NameS∑˚
::identity, ( i ) );

39 
CXXTEST_MOCK_DEFAULT_VALUE
–
O∑que
, Opaque( 42 ) );

40 
CXXTEST_MOCK_GLOBAL
–
O∑que
, 
gëO∑que
, ( 
i
 ), ( i ) );

42 
CXXTEST_SUPPLY_GLOBAL
–, 
suµlyO√
, ( ), () );

43 
CXXTEST_SUPPLY_VOID_GLOBAL
–
suµlyTwo
, ( *
p
 ), (Ö ) );

45 
CXXTEST_SUPPLY
–
SuµlyThªe
, , 
doSuµlyThªe
, ( ), 
suµlyThªe
, () );

46 
CXXTEST_SUPPLY_VOID
–
SuµlyFour
, 
doSuµlyFour
, ( *
p
 ), 
suµlyFour
, (Ö ) );

48 ˛as†
	cMockO√
 : 
public
 
T
::
Ba£_⁄e


50 
public
:

51 
	$MockO√
–
i
 ) : 
	$ªsu…
–
i
 ) {}

52 
ªsu…
;

53 
	$⁄e
(Ë{  
ªsu…
; 
	}
}

56 ˛as†
	cMockI¡Idítôy
 : 
public
 
T
::
Ba£_ötIdítôy


58 
public
:

59 
	$MockI¡Idítôy
–
i
 ) : 
	$ªsu…
–
i
 ) {}

60 
ªsu…
;

61 
	$idítôy
–Ë{  
ªsu…
; 
	}
}

64 ˛as†
	cMockDoubÀIdítôy
 : 
public
 
T
::
Ba£_doubÀIdítôy


66 
public
:

67 
	$MockDoubÀIdítôy
–
d
 ) : 
	$ªsu…
–
d
 ) {}

68 
ªsu…
;

69 
	$idítôy
–Ë{  
ªsu…
; 
	}
}

72 ˛as†
	cMockGëO∑que
 : 
public
 
T
::
Ba£_gëO∑que


74 
public
:

75 
	$MockGëO∑que
–
i
 ) : 
	$ªsu…
–
i
 ) {}

76 
O∑que
 
ªsu…
;

77 
O∑que
 
	$gëO∑que
–Ë{  
ªsu…
; 
	}
}

80 ˛as†
	cSuµlyO√
 : 
public
 
T
::
Ba£_suµlyO√


82 
public
:

83 
	$SuµlyO√
–
i
 ) : 
	$ªsu…
–
i
 ) {}

84 
ªsu…
;

85 
	$suµlyO√
(Ë{  
ªsu…
; 
	}
}

88 ˛as†
	cSuµlyTwo
 : 
public
 
T
::
Ba£_suµlyTwo


90 
public
:

91 
	$SuµlyTwo
–
i
 ) : 
	$ªsu…
–
i
 ) {}

92 
ªsu…
;

93 
	$suµlyTwo
–*
p
 ) { *∞
ªsu…
; 
	}
}

96 ˛as†
	cSuµlyThªe
 : 
public
 
T
::
Ba£_SuµlyThªe


98 
public
:

99 
	$SuµlyThªe
–
i
 ) : 
	$ªsu…
–
i
 ) {}

100 
ªsu…
;

101 
	$doSuµlyThªe
(Ë{  
ªsu…
; 
	}
}

104 ˛as†
	cSuµlyFour
 : 
public
 
T
::
Ba£_SuµlyFour


106 
public
:

107 
	$SuµlyFour
–
i
 ) : 
	$ªsu…
–
i
 ) {}

108 
ªsu…
;

109 
	$doSuµlyFour
–*
p
 ) { *∞
ªsu…
; 
	}
}

112 ˛as†
	cMockTe°
 : 
public
 
CxxTe°
::
Te°Suôe


114 
public
:

115 
	$ã°_Mock
()

117 
MockO√
 
	`mockO√
( 2 );

118 
	`TS_ASSERT_EQUALS
–
T
::
	`⁄e
(), 2 );

121 
	$ã°_Ról
()

123 
T
::
Ról_⁄e
 
ªÆO√
;

124 
	`TS_ASSERT_EQUALS
–
T
::
	`⁄e
(), 1 );

125 
	}
}

127 
	$ã°_Unim∂emíãd
()

129 
	`TS_ASSERT_EQUALS
–
T
::
	`⁄e
(), 1 );

130 
	}
}

132 
	$ã°_M‹e_com∂ex_mock
()

134 
MockI¡Idítôy
 
	`mii
( 53 );

135 
MockDoubÀIdítôy
 
	`mdi
 ( 71 );

137 
	`TS_ASSERT_EQUALS
–
T
::
	`idítôy
( ()5 ), 53 );

138 
	`TS_ASSERT_EQUALS
–
T
::
	`idítôy
( ()5.0 ), 71 );

139 
	}
}

141 
	$ã°_Mock_åaôs
()

143 
	`TS_ASSERT_EQUALS
–
T
::
	`gëO∑que
–3 ).
vÆue
, 72 );

144 
	}
}

146 
	$ã°_Ovîride
()

148 
MockO√
 *
two
 = 
√w
 
	`MockO√
( 2 );

149 
MockO√
 *
thªe
 = 
√w
 
	`MockO√
( 3 );

150 
MockO√
 *
four
 = 
√w
 
	`MockO√
( 4 );

151 
	`TS_ASSERT_EQUALS
–
T
::
	`⁄e
(), 4 );

152 
dñëe
 
thªe
;

153 
	`TS_ASSERT_EQUALS
–
T
::
	`⁄e
(), 4 );

154 
dñëe
 
four
;

155 
	`TS_ASSERT_EQUALS
–
T
::
	`⁄e
(), 2 );

156 
dñëe
 
two
;

157 
	`TS_ASSERT_EQUALS
–
T
::
	`⁄e
(), 1 );

158 
	}
}

160 
	$ã°_Suµly
()

162 
SuµlyO√
 
	`s
( 2 );

163 
	`TS_ASSERT_EQUALS
–
	`suµlyO√
(), 2 );

164 
	}
}

166 
	$ã°_Unim∂emíãd_suµly
()

168 
	`TS_ASSERT_EQUALS
–
	`suµlyO√
(), 1 );

169 
	}
}

171 
	$ã°_M‹e_com∂ex_suµly
()

173 
SuµlyThªe
 
	`°
( 28 );

174 
SuµlyFour
 
	`sf
( 53 );

176 
	`TS_ASSERT_EQUALS
–
	`suµlyThªe
(), 28 );

178 
i
;

179 
	`suµlyFour
–&
i
 );

180 
	`TS_ASSERT_EQUALS
–
i
, 53 );

181 
	}
}

	@tools/cxxtest/test/NoEh.h

1 
	~<cxxã°/Te°Suôe.h
>

3 ˛as†
	cNoEh
 : 
public
 
CxxTe°
::
Te°Suôe


5 
public
:

6 
	$ã°CxxTe°C™CompûeWôhoutEx˚±i⁄H™dlög
()

8 
	`TS_ASSERT_EQUALS
( 1, 2 );

9 
	`TS_ASSERT_EQUALS
( 2, 3 );

11 
	}
};

	@tools/cxxtest/test/Part1.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cP¨t1
 : 
public
 
CxxTe°
::
Te°Suôe


9 
public
:

10 
	$ã°Somëhög
()

12 
	`TS_ASSERT_THROWS_NOTHING
–
	`throwNŸhög
() );

15 
	$throwNŸhög
()

17 
	}
}

	@tools/cxxtest/test/Part2.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cP¨t2
 : 
public
 
CxxTe°
::
Te°Suôe


9 
public
:

10 
	$ã°Somëhög
()

12 
	`TS_ASSERT_THROWS_NOTHING
–
	`throwNŸhög
() );

15 
	$throwNŸhög
()

17 
	}
}

	@tools/cxxtest/test/Relation.h

1 
	~<cxxã°/Te°Suôe.h
>

3 
	sMyNeg©ive


5 
boﬁ
 
›î©‹
()–c⁄° &
	mi
 ) const {  i < 0; }

8 
	gãm∂©e
<
˛ass
 
	gT
>

9 
	sMyLess


11 
boﬁ
 
›î©‹
()–c⁄° 
	mT
 &
	mx
, c⁄° T &
	my
 ) const {  x < y; }

14 ˛as†
	cRñ©i⁄
 : 
public
 
CxxTe°
::
Te°Suôe


16 
public
:

17 
	$ã°Pªdiˇã
()

19 
	`TS_ASSERT_PREDICATE
–
MyNeg©ive
, 1 );

20 
	`TSM_ASSERT_PREDICATE
–"1 <? 0", 
MyNeg©ive
, 1 );

21 
åy
 { 
	`ETS_ASSERT_PREDICATE
–
MyNeg©ive
, 
	`throwI¡
( 1 ) ); }

22 
	`ˇtch
–
i
 ) { 
	`TS_WARN
( i ); }

23 
åy
 { 
	`ETSM_ASSERT_PREDICATE
–"1 <? 0", 
MyNeg©ive
, 
	`throwI¡
( 1 ) ); }

24 
	`ˇtch
–
i
 ) { 
	`TS_WARN
( i ); }

27 
	$ã°Rñ©i⁄
()

29 
	`TS_ASSERT_RELATION
–
MyLess
<>, 2, 1 );

30 
	`TSM_ASSERT_RELATION
–"2 <? 1", 
MyLess
<>, 2, 1 );

31 
åy
 { 
	`ETS_ASSERT_RELATION
–
MyLess
<>, 
	`throwI¡
( 1 ),ÅhrowInt( 1 ) ); }

32 
	`ˇtch
–
i
 ) { 
	`TS_WARN
( i ); }

33 
åy
 { 
	`ETSM_ASSERT_RELATION
–"2 <? 1", 
MyLess
<>, 
	`throwI¡
( 1 ),ÅhrowInt( 1 ) ); }

34 
	`ˇtch
–
i
 ) { 
	`TS_WARN
( i ); }

35 
	}
}

37 
	$throwI¡
–
i
 )

39 
throw
 
i
;

40 
	}
}

	@tools/cxxtest/test/SameData.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cSameD©a
 : 
public
 
CxxTe°
::
Te°Suôe


9 
public
:

10 íum { 
DATA_SIZE
 = 24 };

11 
	gx
[
DATA_SIZE
], 
	gy
[DATA_SIZE];

13 
	$£tUp
()

15  
i
 = 0; i < 
DATA_SIZE
; ++ i ) {

16 
x
[
i
] = ()i;

17 
y
[
i
] = ()~
x
[i];

19 
	}
}

21 
	$ã°As£πSameD©a
()

23 
	`TS_ASSERT_SAME_DATA
–
x
, 
y
, 
DATA_SIZE
 );

24 
	}
}

26 
	$ã°As£πMesßgeSameD©a
()

28 
	`TSM_ASSERT_SAME_DATA
–"NŸ samêd©a", 
x
, 
y
, 
DATA_SIZE
 );

29 
	}
}

31 
	$ã°Sa„As£πSameD©a
()

33 
	`ETS_ASSERT_SAME_DATA
–
x
, 
y
, 
DATA_SIZE
 );

34 
	}
}

36 
	$ã°Sa„As£πMesßgeSameD©a
()

38 
	`ETSM_ASSERT_SAME_DATA
–"NŸ samêd©a", 
x
, 
y
, 
DATA_SIZE
 );

39 
	}
}

	@tools/cxxtest/test/SameFiles.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cSameFûes
 : 
public
 
CxxTe°
::
Te°Suôe


9 
public
:

11 
	$ã°As£πFûes
()

13 
	`TS_ASSERT_SAME_FILES
( "SameFiles.h", "SameFiles.h" );

16 
	$ã°As£πFûeSh‹ãr
()

18 
	`TS_ASSERT_SAME_FILES
( "SameFiles.h", "SameFilesLonger.h" );

19 
	}
}

21 
	$ã°As£πFûeL⁄gî
()

23 
	`TS_ASSERT_SAME_FILES
( "SameFilesLonger.h", "SameFiles.h" );

24 
	}
}

26 
	$ã°As£πMesßgeSameFûes
()

28 
	`TSM_ASSERT_SAME_FILES
( "Not same files", "SameFiles.h", "SameData.h" );

29 
	}
}

31 
	$ã°Sa„As£πSameFûes
()

33 
	`ETS_ASSERT_SAME_FILES
( "SameFiles.h", "SameFiles.h" );

34 
	}
}

36 
	$ã°Sa„As£πMesßgeSameFûes
()

38 
	`ETSM_ASSERT_SAME_FILES
( "Not same files", "SameFiles.h", "SameData.h" );

39 
	}
}

	@tools/cxxtest/test/SameFilesLonger.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cSameFûes
 : 
public
 
CxxTe°
::
Te°Suôe


9 
public
:

11 
	$ã°As£πFûes
()

13 
	`TS_ASSERT_SAME_FILES
( "SameFiles.h", "SameFiles.h" );

16 
	$ã°As£πFûeSh‹ãr
()

18 
	`TS_ASSERT_SAME_FILES
( "SameFiles.h", "SameFilesLonger.h" );

19 
	}
}

21 
	$ã°As£πFûeL⁄gî
()

23 
	`TS_ASSERT_SAME_FILES
( "SameFilesLonger.h", "SameFiles.h" );

24 
	}
}

26 
	$ã°As£πMesßgeSameFûes
()

28 
	`TSM_ASSERT_SAME_FILES
( "Not same files", "SameFiles.h", "SameData.h" );

29 
	}
}

31 
	$ã°Sa„As£πSameFûes
()

33 
	`ETS_ASSERT_SAME_FILES
( "SameFiles.h", "SameFiles.h" );

34 
	}
}

36 
	$ã°Sa„As£πMesßgeSameFûes
()

38 
	`ETSM_ASSERT_SAME_FILES
( "Not same files", "SameFiles.h", "SameData.h" );

39 
	}
}

	@tools/cxxtest/test/SameZero.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cSameZîo
 : 
public
 
CxxTe°
::
Te°Suôe


9 
public
:

10 
d©a
[4];

12 
	$£tUp
()

14  
i
 = 0; i < (
d©a
); ++ i )

15 
d©a
[
i
] = ()i;

18 
	$ã°_TS_ASSERT_SAME_DATA_∑s£d_zîo
()

20 
	`TS_ASSERT_SAME_DATA
–
d©a
, 0, (data) );

21 
	`TS_ASSERT_SAME_DATA
–0, 
d©a
, (data) );

22 
	`TS_ASSERT_SAME_DATA
–
d©a
, 0, 0 );

23 
	`TS_ASSERT_SAME_DATA
–0, 
d©a
, 0 );

24 
	`TS_ASSERT_SAME_DATA
( 0, 0, 0 );

25 
	}
}

	@tools/cxxtest/test/SetUpWorldError.h

5 
	~<cxxã°/Te°Suôe.h
>

6 
	~<cxxã°/GlobÆFixtuª.h
>

7 
	~<°dio.h
>

9 ˛as†
	cFixtuª
 : 
public
 
CxxTe°
::
GlobÆFixtuª


11 
public
:

12 
boﬁ
 
	$£tUpW‹ld
(Ë{ 
	`TS_FAIL
("THIS IS BAD");  
Ál£
; }

13 
	}
};

19 
Fixtuª
 
	gfixtuª
;

21 ˛as†
	cSuôe
 : 
public
 
CxxTe°
::
Te°Suôe


23 
public
:

25 
	$ã°O√
()

27 
	`TS_FAIL
( "Shouldn't get hereátáll" );

30 
	$ã°Two
()

32 
	`TS_FAIL
( "Shouldn't get hereátáll" );

33 
	}
}

	@tools/cxxtest/test/SetUpWorldFails.h

5 
	~<cxxã°/Te°Suôe.h
>

6 
	~<cxxã°/GlobÆFixtuª.h
>

7 
	~<°dio.h
>

9 ˛as†
	cFixtuª
 : 
public
 
CxxTe°
::
GlobÆFixtuª


11 
public
:

12 
boﬁ
 
	$£tUpW‹ld
(Ë{  
Ál£
; }

13 
	}
};

19 
Fixtuª
 
	gfixtuª
;

21 ˛as†
	cSuôe
 : 
public
 
CxxTe°
::
Te°Suôe


23 
public
:

24 
	$ã°O√
()

26 
	`TS_FAIL
( "Shouldn't get hereátáll" );

28 
	}
};

	@tools/cxxtest/test/SetUpWorldThrows.h

5 
	~<cxxã°/Te°Suôe.h
>

6 
	~<cxxã°/GlobÆFixtuª.h
>

7 
	~<°dio.h
>

9 ˛as†
	cFixtuª
 : 
public
 
CxxTe°
::
GlobÆFixtuª


11 
public
:

12 
boﬁ
 
	$£tUpW‹ld
(Ë{ 
throw
 
this
; }

13 
	}
};

19 
Fixtuª
 
	gfixtuª
;

21 ˛as†
	cSuôe
 : 
public
 
CxxTe°
::
Te°Suôe


23 
public
:

24 
	$ã°O√
()

26 
	`TS_FAIL
( "Shouldn't get hereátáll" );

28 
	}
};

	@tools/cxxtest/test/SimpleInheritedTest.h

1 
	~<cxxã°/Te°Suôe.h
>

3 ˛as†
	cTe°s
 : 
public
 
CxxTe°
::
Te°Suôe


5 
public
:

7 
CXXTEST_STD
(
li°
)<>* 
ˇche
;

9 
	$£tUp
()

11 
this
->
ˇche
 = 
√w
 
	`CXXTEST_STD
(
li°
)<>();

14 
	$ã¨Down
()

15 { 
	}
}

17 
	$ã°_size
()

19 
	`TS_ASSERT_EQUALS
(
ˇche
->
	`size
(), 0);

20 
	}
}

22 
	$ã°_ö£π
()

24 
this
->
ˇche
->
	`push_back
(1);

25 
	`TS_ASSERT_EQUALS
(
ˇche
->
	`size
(), 1);

26 
	}
}

31 ˛as†
	cInhîôedTe°s
 : 
public
 
Te°s


33 
public
:

	@tools/cxxtest/test/SimpleInheritedTest2.h

1 
	~<cxxã°/Te°Suôe.h
>

3 ˛as†
	cTe°s


5 
	mpublic
:

7 
CXXTEST_STD
(
li°
)<>* 
ˇche
;

9 
	$£tUp
()

11 
this
->
ˇche
 = 
√w
 
	`CXXTEST_STD
(
li°
)<>();

14 
	$ã¨Down
()

15 { 
	}
}

17 
	$ã°_size
()

19 
	`TS_ASSERT_EQUALS
(
ˇche
->
	`size
(), 0);

20 
	}
}

22 
	$ã°_ö£π
()

24 
this
->
ˇche
->
	`push_back
(1);

25 
	`TS_ASSERT_EQUALS
(
ˇche
->
	`size
(), 1);

26 
	}
}

31 
˛ass
 
	gInhîôedTe°s
 : 
public
 
Te°s
,Öubli¯
	gCxxTe°
::
Te°Suôe


33 
public
:

35 
£tUp
(Ë{ 
Te°s
::setUp();}

36 
ã¨Down
(Ë{ 
	gTe°s
::
£tUp
();}

	@tools/cxxtest/test/Something.h

1 
	~<°rög
>

3 
ölöe
 
	g°d
::
°rög
 
	$somëhög
(Ë{  "somëhög"; 
	}
}

	@tools/cxxtest/test/StlTraits.h

1 
	~<cxxã°/Te°Suôe.h
>

3 ˛as†
	cSéTøôs
 : 
public
 
CxxTe°
::
Te°Suôe


5 
public
:

6 
	$CXXTEST_STD
(
	t°rög
Ë
	tSåög
;

7 
	`CXXTEST_STD
(
	t∑ú
)<, 
	tSåög
> 
	tI¡Såög
;

8 
	`CXXTEST_STD
(
	t∑ú
)<
	tSåög
, > 
	tSåögDoubÀ
;

10 
	$ã°_Paú
()

12 
I¡Såög
 
	`thªe
( 3, "Three" );

13 
	`TS_FAIL
–
thªe
 );

14 
SåögDoubÀ
 
	`four
( "Four", 4.0 );

15 
	`TS_FAIL
–
four
 );

18 
	$ã°_Ve˘‹
()

20 
	`CXXTEST_STD
(
ve˘‹
)<> 
v
;

21 
	`TS_TRACE
–
v
 );

22 
v
.
	`push_back
( 1 );

23 
v
.
	`push_back
( 2 );

24 
v
.
	`push_back
( 3 );

25 
	`TS_FAIL
–
v
 );

27 
	`CXXTEST_STD
(
ve˘‹
)<
Såög
> 
w
;

28 
	`TS_TRACE
–
w
 );

29 
w
.
	`push_back
( "One" );

30 
w
.
	`push_back
( "Two" );

31 
w
.
	`push_back
( "Three" );

32 
	`TS_FAIL
–
w
 );

34 
	`CXXTEST_STD
(
ve˘‹
)<
I¡Såög
> 
vw
;

35 
	`TS_TRACE
–
vw
 );

36 
vw
.
	`push_back
–
	`I¡Såög
( 1, "One" ) );

37 
vw
.
	`push_back
–
	`I¡Såög
( 2, "Two" ) );

38 
vw
.
	`push_back
–
	`I¡Såög
( 3, "Three" ) );

39 
	`TS_FAIL
–
vw
 );

40 
	}
}

42 
	$ã°_Li°
()

44 
	`CXXTEST_STD
(
li°
)<> 
v
;

45 
	`TS_TRACE
–
v
 );

46 
v
.
	`push_back
( 1 );

47 
v
.
	`push_back
( 2 );

48 
v
.
	`push_back
( 3 );

49 
	`TS_FAIL
–
v
 );

51 
	`CXXTEST_STD
(
li°
)<
Såög
> 
w
;

52 
	`TS_TRACE
–
w
 );

53 
w
.
	`push_back
( "One" );

54 
w
.
	`push_back
( "Two" );

55 
w
.
	`push_back
( "Three" );

56 
	`TS_FAIL
–
w
 );

58 
	`CXXTEST_STD
(
li°
)<
I¡Såög
> 
vw
;

59 
	`TS_TRACE
–
vw
 );

60 
vw
.
	`push_back
–
	`I¡Såög
( 1, "One" ) );

61 
vw
.
	`push_back
–
	`I¡Såög
( 2, "Two" ) );

62 
vw
.
	`push_back
–
	`I¡Såög
( 3, "Three" ) );

63 
	`TS_FAIL
–
vw
 );

64 
	}
}

66 
	$ã°_Së
()

68 
	`CXXTEST_STD
(
£t
)<> 
v
;

69 
	`TS_TRACE
–
v
 );

70 
v
.
	`ö£π
( 1 );

71 
v
.
	`ö£π
( 2 );

72 
v
.
	`ö£π
( 3 );

73 
	`TS_FAIL
–
v
 );

75 
	`CXXTEST_STD
(
£t
)<
Såög
> 
w
;

76 
	`TS_TRACE
–
w
 );

77 
w
.
	`ö£π
( "One" );

78 
w
.
	`ö£π
( "Two" );

79 
w
.
	`ö£π
( "Three" );

80 
	`TS_FAIL
–
w
 );

82 
	`CXXTEST_STD
(
£t
)<
I¡Såög
> 
vw
;

83 
	`TS_TRACE
–
vw
 );

84 
vw
.
	`ö£π
–
	`I¡Såög
( 1, "One" ) );

85 
vw
.
	`ö£π
–
	`I¡Såög
( 2, "Two" ) );

86 
vw
.
	`ö£π
–
	`I¡Såög
( 3, "Three" ) );

87 
	`TS_FAIL
–
vw
 );

88 
	}
}

90 
	$ã°_M≠
()

92 
	`CXXTEST_STD
(
m≠
)<
Såög
, Såög> 
m
;

93 
	`TS_TRACE
–
m
 );

95 
m
["Jack"] = "Jill";

96 
m
["Humpty"] = "Dumpty";

97 
m
["Ren"] = "Stimpy";

99 
	`TS_FAIL
–
m
 );

101 
	`CXXTEST_STD
(
m≠
)< , CXXTEST_STD(
li°
)<> > 
n
;

102 
	`TS_TRACE
–
n
 );

104 
n
[6].
	`push_back
( 2 );

105 
n
[6].
	`push_back
( 3 );

106 
n
[210].
	`push_back
( 2 );

107 
n
[210].
	`push_back
( 3 );

108 
n
[210].
	`push_back
( 5 );

109 
n
[210].
	`push_back
( 7 );

111 
	`TS_FAIL
–
n
 );

112 
	}
}

114 
	$ã°_Deque
()

116 
	`CXXTEST_STD
(
deque
)<> 
d
;

117 
	`TS_TRACE
–
d
 );

118 
d
.
	`push_‰⁄t
( 1 );

119 
d
.
	`push_‰⁄t
( 2 );

120 
d
.
	`push_‰⁄t
( 3 );

121 
d
.
	`push_‰⁄t
( 4 );

122 
	`TS_FAIL
–
d
 );

123 
	}
}

125 
	$ã°_Mu…iM≠
()

127 
	`CXXTEST_STD
(
mu…im≠
)<
Såög
, > 
mm
;

128 
	`TS_TRACE
–
mm
 );

130 
mm
.
	`ö£π
–
	`SåögDoubÀ
( "One", 1.0 ) );

131 
mm
.
	`ö£π
–
	`SåögDoubÀ
( "Two", 2.0 ) );

132 
	`TS_FAIL
–
mm
 );

133 
	}
}

135 
	$ã°_Mu…iSë
()

137 
	`CXXTEST_STD
(
mu…i£t
)<> 
ms
;

138 
	`TS_TRACE
–
ms
 );

140 
ms
.
	`ö£π
( 123 );

141 
ms
.
	`ö£π
( 456 );

142 
	`TS_FAIL
–
ms
 );

143 
	}
}

145 
	$ã°_Com∂ex
()

147 
	`CXXTEST_STD
(
	tcom∂ex
)<> 
	tCom∂ex
;

148 
	`TS_FAIL
–
	`Com∂ex
( 3.14, 2.71 ) );

149 
	`TS_FAIL
–
	`Com∂ex
( 0.0, 1.0 ) );

150 
	`TS_FAIL
–
	`Com∂ex
( 1.0, 0.0 ) );

151 
	}
}

	@tools/cxxtest/test/TearDownWorldFails.h

5 
	~<cxxã°/Te°Suôe.h
>

6 
	~<cxxã°/GlobÆFixtuª.h
>

7 
	~<°dio.h
>

9 ˛as†
	cFixtuª
 : 
public
 
CxxTe°
::
GlobÆFixtuª


11 
public
:

12 
boﬁ
 
	$ã¨DownW‹ld
(Ë{  
Ál£
; }

13 
	}
};

19 
Fixtuª
 
	gfixtuª
;

21 ˛as†
	cSuôe
 : 
public
 
CxxTe°
::
Te°Suôe


23 
public
:

24 
	$ã°O√
() {}

25 
	}
};

	@tools/cxxtest/test/TearDownWorldThrows.h

5 
	~<cxxã°/Te°Suôe.h
>

6 
	~<cxxã°/GlobÆFixtuª.h
>

7 
	~<°dio.h
>

9 ˛as†
	cFixtuª
 : 
public
 
CxxTe°
::
GlobÆFixtuª


11 
public
:

12 
boﬁ
 
	$ã¨DownW‹ld
(Ë{ 
throw
 
this
; }

13 
	}
};

19 
Fixtuª
 
	gfixtuª
;

21 ˛as†
	cSuôe
 : 
public
 
CxxTe°
::
Te°Suôe


23 
public
:

24 
	$ã°O√
() {}

25 
	}
};

	@tools/cxxtest/test/TestNonFinite.h

1 
	~<cxxã°/Te°Suôe.h
>

10 
	gzîo
 = 0.0;

12 ˛as†
	cTe°N⁄Föôe
 : 
public
 
CxxTe°
::
Te°Suôe


14 
public
:

15 
	$ã°NaN
() {

16 
«n
 = (1.0/
zîo
 / (1.0/zero));

17 
	`TS_ASSERT_EQUALS
(
«n
,nan);

18 
	`TS_ASSERT_EQUALS
(
«n
,
zîo
);

20 
	$ã°PlusInf
() {

21 
∂us_öf
 = -1.0/
zîo
;

22 
	`TS_ASSERT_EQUALS
(-1.0/
zîo
, 
∂us_öf
);

23 
	`TS_ASSERT_EQUALS
(3.0, 
∂us_öf
);

24 
	}
}

25 
	$ã°MöusInf
() {

26 
möus_öf
 = 1.0/
zîo
;

27 
	`TS_ASSERT_EQUALS
(1.0/
zîo
, 
möus_öf
);

28 
	`TS_ASSERT_EQUALS
(1.0/3.0, 
möus_öf
);

29 
	}
}

	@tools/cxxtest/test/ThrowNoStd.h

1 
	~<cxxã°/Te°Suôe.h
>

3 ˛as†
	cThrowNoStd
 : 
public
 
CxxTe°
::
Te°Suôe


5 
public
:

6 
	$ã°ThrowNoStd
()

8 
	`TS_ASSERT_THROWS
–{ 
throw
 1; }, );

10 
	}
};

	@tools/cxxtest/test/ThrowsAssert.h

1 
	~<cxxã°/Te°Suôe.h
>

3 ˛as†
	cThög


5 
	m_i
;

6 
	mpublic
:

7 
	$Thög
–
¨gI
 ) : 
	$_i
(
¨gI
) {}

8 
	$i
(Ëc⁄° {  
_i
; 
	}
}

11 ˛as†
	cFaû


13 
	mpublic
:

14 
boﬁ
 
	$›î©‹
()–Ëc⁄° {  
Ál£
; }

15 
boﬁ
 
	$›î©‹
()–, Ëc⁄° {  
Ál£
; 
	}
}

18 ˛as†
	cThrowsAs£π
 : 
public
 
CxxTe°
::
Te°Suôe


20 
public
:

21 
	$ã°_TS_ASSERT_THROWS_EQUALS
()

23 
	`TS_ASSERT_THROWS_EQUALS
–{ 
throw
 1; }, 
i
, i, 2 );

24 
	`TS_ASSERT_THROWS_EQUALS
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &
thög
,Åhög.
	`i
(), 2 );

27 
	$ã°_TS_ASSERT_THROWS_DIFFERS
()

29 
	`TS_ASSERT_THROWS_DIFFERS
–{ 
throw
 1; }, 
i
, i, 1 );

30 
	`TS_ASSERT_THROWS_DIFFERS
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &
thög
,Åhög.
	`i
(), 1 );

31 
	}
}

33 
	$ã°_TS_ASSERT_THROWS_SAME_DATA
()

35 
	`TS_ASSERT_THROWS_SAME_DATA
–{ 
throw
 "123"; }, c⁄° *
s
, s, "456", 3 );

36 
	}
}

38 
	$ã°_TS_ASSERT_THROWS_LESS_THAN
()

40 
	`TS_ASSERT_THROWS_LESS_THAN
–{ 
throw
 1; }, 
i
, i, 1 );

41 
	`TS_ASSERT_THROWS_LESS_THAN
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &
thög
,Åhög.
	`i
(), 1 );

42 
	}
}

44 
	$ã°_TS_ASSERT_THROWS_LESS_THAN_EQUALS
()

46 
	`TS_ASSERT_THROWS_LESS_THAN_EQUALS
–{ 
throw
 1; }, 
i
, i, 0 );

47 
	`TS_ASSERT_THROWS_LESS_THAN_EQUALS
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &
thög
,Åhög.
	`i
(), 0 );

48 
	}
}

50 
	$ã°_TS_ASSERT_THROWS_PREDICATE
()

52 
	`TS_ASSERT_THROWS_PREDICATE
–{ 
throw
 1; }, 
i
, 
Faû
, i );

53 
	`TS_ASSERT_THROWS_PREDICATE
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &
thög
, 
Faû
,Åhög.
	`i
() );

54 
	}
}

56 
	$ã°_TS_ASSERT_THROWS_RELATION
()

58 
	`TS_ASSERT_THROWS_RELATION
–{ 
throw
 1; }, 
i
, 
Faû
, i, 1 );

59 
	`TS_ASSERT_THROWS_RELATION
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &
thög
, 
Faû
,Åhög.
	`i
(), 1 );

60 
	}
}

62 
	$ã°_TS_ASSERT_THROWS_DELTA
()

64 
	`TS_ASSERT_THROWS_DELTA
–{ 
throw
 1; }, 
i
, i, 3, 1 );

65 
	`TS_ASSERT_THROWS_DELTA
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &
thög
,Åhög.
	`i
(), 3, 1 );

66 
	}
}

68 
	$ã°_TS_ASSERT_THROWS_ASSERT
()

70 
	`TS_ASSERT_THROWS_ASSERT
–{ 
throw
 1; }, 
i
,

71 
	`TS_ASSERT_EQUALS
–
i
, 2 ) );

73 
	`TS_ASSERT_THROWS_ASSERT
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &
thög
,

74 
	`TS_ASSERT_EQUALS
–
thög
.
	`i
(), 2 ) );

76 
	`TS_ASSERT_THROWS_ASSERT
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &
thög
,

77 
	`TS_FAIL
–
thög
.
	`i
() ) );

79 
	`TS_ASSERT_THROWS_ASSERT
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &
thög
,

80 
	`TS_ASSERT
–
thög
.
	`i
() - 1 ) );

82 
zîo
 = 0, 
⁄e
 = 1;

83 
	`TS_ASSERT_THROWS_ASSERT
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &,

84 
	`TS_ASSERT_SAME_DATA
–&
zîo
, &
⁄e
, () ) );

86 
	`TS_ASSERT_THROWS_ASSERT
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &
thög
,

87 
	`TS_ASSERT_DELTA
–
thög
.
	`i
(), 5, 2 ) );

89 
	`TS_ASSERT_THROWS_ASSERT
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &
thög
,

90 
	`TS_ASSERT_DIFFERS
–
thög
.
	`i
(), 1 ) );

92 
	`TS_ASSERT_THROWS_ASSERT
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &
thög
,

93 
	`TS_ASSERT_LESS_THAN
–
thög
.
	`i
(), 1 ) );

95 
	`TS_ASSERT_THROWS_ASSERT
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &
thög
,

96 
	`TS_ASSERT_PREDICATE
–
Faû
, 
thög
.
	`i
() ) );

98 
	`TS_ASSERT_THROWS_ASSERT
–{ 
throw
 
	`Thög
–1 ); }, c⁄° 
Thög
 &
thög
,

99 
	`TS_ASSERT_RELATION
–
Faû
, 
thög
.
	`i
(), 33 ) );

100 
	}
}

	@tools/cxxtest/test/TraitsTest.h

1 
	#CXXTEST_HAVE_STD


	)

2 
	~<cxxã°/Te°Suôe.h
>

8 ˛as†
	cTøôsTe°
 : 
public
 
CxxTe°
::
Te°Suôe


10 
public
:

11 
	$ã°I¡egîTøôs
()

13 
	`TS_FAIL
( ()1 );

14 
	`TS_FAIL
( ()0x0F );

15 
	`TS_FAIL
( (signed )-12 );

16 
	`TS_FAIL
( ()34 );

17 
	`TS_FAIL
( (signed )-123 );

18 
	`TS_FAIL
( ()456 );

19 
	`TS_FAIL
( (signed )-12345 );

20 
	`TS_FAIL
( ()67890 );

23 
	$ã°FlﬂtögPoötTøôs
()

25 
	`TS_FAIL
( ()0.12345678 );

26 
	`TS_FAIL
( ()0.12345678 );

27 
	}
}

29 
	$ã°BoﬁTøôs
()

31 
	`TS_FAIL
–
åue
 );

32 
	`TS_FAIL
–
Ál£
 );

33 
	}
}

35 
	$ã°Ch¨Tøôs
()

37 
	`TS_FAIL
( 'A' );

38 
	`TS_FAIL
( '\x04' );

39 
	`TS_FAIL
( '\x1B' );

40 
	`TS_FAIL
( '\0' );

41 
	`TS_FAIL
( '\r' );

42 
	`TS_FAIL
( '\n' );

43 
	`TS_FAIL
( '\b' );

44 
	`TS_FAIL
( '\t' );

45 
	`TS_FAIL
( '\a' );

46 
	`TS_FAIL
( ()-5 );

47 
	}
}

49 
	$ã°SåögTøôs
()

51 
	`TS_FAIL
( "(char *) is displayedás-is\n" );

52 
	}
}

54 
	$ã°StdSåögTøôs
()

56 
	`CXXTEST_STD
(
	t°rög
Ë
	tSåög
;

57 
	`TS_FAIL
–
	`Såög
( "std::string is displayed with \"\"" ) );

58 
	`TS_FAIL
–
	`Såög
( "Escapes\rAre\rTranslated" ) );

59 
	`TS_FAIL
–
	`Såög
( "Asáre unprintable chars: \x12\x34\x56\x78" ) );

60 
	}
}

	@tools/cxxtest/test/Tsm.h

1 
	~<cxxã°/Te°Suôe.h
>

7 ˛as†
	cTe°MesßgeMa¸os
 : 
public
 
CxxTe°
::
Te°Suôe


9 
public
:

10 
	$ã°MesßgeMa¸os
()

12 
n
 = 42;

13 
x
 = 'x', 
y
 = 'y';

15 
	`TSM_ASSERT
–"Såög", 
Ál£
 );

16 
	`TSM_ASSERT
–
n
, 
Ál£
 );

17 
	`TSM_ASSERT_EQUALS
( "String", 2 + 2, 5 );

18 
	`TSM_ASSERT_EQUALS
–
n
, 2 + 2, 5 );

19 
	`TSM_ASSERT_SAME_DATA
–"Såög", &
x
, &
y
, 1 );

20 
	`TSM_ASSERT_SAME_DATA
–
n
, &
x
, &
y
, 1 );

21 
	`TSM_ASSERT_DELTA
( "String", 1.0, 2.0, 0.5 );

22 
	`TSM_ASSERT_DELTA
( 42, 1.0, 2.0, 0.5 );

23 
	`TSM_ASSERT_DIFFERS
( "String", 0, 0 );

24 
	`TSM_ASSERT_DIFFERS
–
n
, 0, 0 );

25 
	`TSM_ASSERT_LESS_THAN
( "String", 2, 1 );

26 
	`TSM_ASSERT_LESS_THAN
–
n
, 2, 1 );

27 
	`TSM_ASSERT_THROWS
–"Såög", 
	`throwNŸhög
(), );

28 
	`TSM_ASSERT_THROWS
–
n
, 
	`throwNŸhög
(), );

29 
	`TSM_ASSERT_THROWS_ANYTHING
–"Såög", 
	`throwNŸhög
() );

30 
	`TSM_ASSERT_THROWS_ANYTHING
–
n
, 
	`throwNŸhög
() );

31 
	`TSM_ASSERT_THROWS_NOTHING
–"Såög", 
	`throwI¡egî
–
n
 ) );

32 
	`TSM_ASSERT_THROWS_NOTHING
–
n
, 
	`throwI¡egî
(Ç ) );

33 
	`TSM_ASSERT_THROWS_ASSERT
–"Såög", 
	`throwNŸhög
(), , 
	`TS_ASSERT
–
åue
 ) );

34 
	`TSM_ASSERT_THROWS_ASSERT
–
n
, 
	`throwNŸhög
(), , 
	`TS_ASSERT
–
åue
 ) );

35 
	`TSM_ASSERT_THROWS_EQUALS
–"Såög", 
	`throwNŸhög
(), , 1, 1 );

36 
	`TSM_ASSERT_THROWS_EQUALS
–
n
, 
	`throwNŸhög
(), , 1, 1 );

37 
	`TSM_ASSERT_THROWS_EQUALS
–"Såög", 
	`throwI¡egî
–
n
 ), 
i
, i, 43 );

38 
	`TSM_ASSERT_THROWS_EQUALS
–
n
, 
	`throwI¡egî
–¿), 
i
, i, 43 );

41 
	$throwNŸhög
()

43 
	}
}

45 
	$throwI¡egî
–
i
 )

47 
throw
 
i
;

48 
	}
}

51 #i‚de‡
_CXXTEST_HAVE_EH


52 #îr‹ 
cxxã°gí
 
should
 
have
 
found
 
ex˚±i⁄
 
h™dlög
 
hîe
!

	@tools/cxxtest/test/UserTraits.h

14 
	~<cxxã°/VÆueTøôs.h
>

15 
	~<°dio.h
>

17 
«me•a˚
 
	gCxxTe°


19 
CXXTEST_TEMPLATE_INSTANTIATION


20 
˛ass
 
	gVÆueTøôs
<>

22 
	g_asSåög
[128];

23 
	gpublic
:

24 
VÆueTøôs
–
i
 ) { 
•rötf
–
_asSåög
, "0x%X", i ); }

25 c⁄° *
asSåög
–Ë{  
	g_asSåög
; }

29 ˛as†
	cTe°U£rTøôs
 : 
public
 
CxxTe°
::
Te°Suôe


31 
public
:

32 
	$ã°U£rTøôs
()

34 
	`TS_FAIL
( 127 );

36 
	}
};

	@tools/cxxtest/test/VoidTraits.h

5 #ifde‡
CXXTEST_RUNNING


7 
	~<cxxã°/VÆueTøôs.h
>

9 
«me•a˚
 
	gCxxTe°


11 
CXXTEST_TEMPLATE_INSTANTIATION


12 
˛ass
 
	gVÆueTøôs
<*>

14 
	gpublic
:

15 
VÆueTøôs
( * ) {}

16 c⁄° *
asSåög
( ) {  "(void *)"; }

	@tools/cxxtest/test/WideCharTest.h

1 
	#CXXTEST_HAVE_STD


	)

2 
	~<cxxã°/Te°Suôe.h
>

3 
	~<°rög
>

9 ˛as†
	cWideCh¨Te°
 : 
public
 
CxxTe°
::
Te°Suôe


11 
public
:

12 
	$ã°WideSåögTøôs
()

14 
	`TS_FAIL
–
°d
::
basic_°rög
<
wch¨_t
>–
L
"std::wstring is displayed with L\"\"" ) );

15 
wch¨_t
 
¨øy
[] = { (wchar_t)0x1234, (wchar_t)0x5678 };

16 
	`TS_FAIL
–
°d
::
basic_°rög
<
wch¨_t
>–
¨øy
, 2 ) );

18 
	}
};

	@tools/cxxtest/test/WorldFixtures.h

5 
	~<cxxã°/Te°Suôe.h
>

6 
	~<cxxã°/GlobÆFixtuª.h
>

7 
	~<°dio.h
>

9 ˛as†
	cPrötögFixtuª
 : 
public
 
CxxTe°
::
GlobÆFixtuª


11 
public
:

12 
boﬁ
 
	$£tUpW‹ld
(Ë{ 
	`¥ötf
–"<w‹ld>" );  
åue
; }

13 
boﬁ
 
	$ã¨DownW‹ld
(Ë{ 
	`¥ötf
–"</w‹ld>" );  
åue
; 
	}
}

14 
boﬁ
 
	$£tUp
(Ë{ 
	`¥ötf
–"<ã°>" );  
åue
; 
	}
}

15 
boﬁ
 
	$ã¨Down
(Ë{ 
	`¥ötf
–"</ã°>" );  
åue
; 
	}
}

22 
PrötögFixtuª
 
	g¥ötögFixtuª
;

28 ˛as†
	cFú°Suôe
 : 
public
 
CxxTe°
::
Te°Suôe


30 
public
:

31 
	$ã°O√
() {}

32 
	$ã°Two
(Ë{
	}
}

35 ˛as†
	cSec⁄dSuôe
 : 
public
 
CxxTe°
::
Te°Suôe


37 
public
:

38 
	$ã°O√
() {}

39 
	$ã°Two
(Ë{
	}
}

	@tools/cxxtest/test/anything.cpp

3 
	$maö
()

6 
	}
}

	@tools/cxxtest/test/cxxtest/DummyGui.h

1 #i‚de‡
__CXXTEST__DUMMYGUI_H


2 
	#__CXXTEST__DUMMYGUI_H


	)

9 
	~<cxxã°/Gui.h
>

10 
	~<cxxã°/Te°Ru¬î.h
>

11 
	~<cxxã°/Eº‹Pröãr.h
>

13 
«me•a˚
 
	gCxxTe°


15 ˛as†
	cDummyGui
 : 
public
 
GuiLi°íî


17 
public
:

18 
guiE¡îW‹ld
–
numTŸÆTe°s
 )

20 (
CXXTEST_STD
(
cout
Ë<< " {Sèπ " << 
numTŸÆTe°s
 << "Åe°s} ").
Êush
();

23 
guiE¡îTe°
–c⁄° *
suôeName
, c⁄° *
ã°Name
 )

25 (
CXXTEST_STD
(
cout
Ë<< " {" << 
	gsuôeName
 << "::" << 
	gã°Name
 << "()} ").
Êush
();

28 
yñlowB¨
()

30 (
CXXTEST_STD
(
cout
Ë<< " {Yñlow} ").
Êush
();

33 
ªdB¨
()

35 (
CXXTEST_STD
(
cout
Ë<< " {Red} ").
Êush
();

38 
ÀaveW‹ld
–c⁄° 
W‹ldDes¸ùti⁄
 & )

40 (
CXXTEST_STD
(
cout
Ë<< " {St›} ").
Êush
();

	@tools/cxxtest/test/fake/X11/Xlib.h

3 
	sDi•œy
 {};

4 
	tWödow
, 
	tCﬁ‹m≠
, 
	tGC
;

5 c⁄° *
	tXID
;

6 
	sXF⁄tSåu˘
 { 
	mas˚¡
, 
	mdes˚¡
; };

7 
	sS¸ìn
 {};

8 
	sXCﬁ‹
 { 
	mpixñ
; };

10 íum { 
	mSuc˚ss
, 
	mExposuªMask
 };

12 
ölöe
 
Di•œy
 *
	$XO≥nDi•œy
(*Ë{  0; 
	}
}

13 
ölöe
 
Cﬁ‹m≠
 
	$DeÁu…Cﬁ‹m≠
–
Di•œy
 *, Ë{  0; 
	}
}

14 
ölöe
 
	$XP¨£Cﬁ‹
–
Di•œy
 *, 
Cﬁ‹m≠
, c⁄° *, 
XCﬁ‹
 * ) {
	}
}

15 
ölöe
 
	$XAŒocCﬁ‹
–
Di•œy
 *, 
Cﬁ‹m≠
, 
XCﬁ‹
 *Ë{  0; 
	}
}

16 
ölöe
 
Wödow
 
	$XCª©eSim∂eWödow
–
Di•œy
 *, 
Wödow
, , , , , , , Ë{  0; 
	}
}

17 
ölöe
 
Wödow
 
	$RoŸWödow
–
Di•œy
 *, Ë{  0; 
	}
}

18 
ölöe
 
GC
 
	$XCª©eGC
–
Di•œy
 *, 
Wödow
, , Ë{  0; 
	}
}

19 
ölöe
 
XID
 
	$XLﬂdF⁄t
–
Di•œy
 *, c⁄° * ) {  0; 
	}
}

20 
ölöe
 
	$XSëF⁄t
–
Di•œy
 *, 
GC
, 
XID
 ) {  0; 
	}
}

21 
ölöe
 
XID
 
	$XGC⁄ãxtFromGC
–
GC
 ) {  0; 
	}
}

22 
ölöe
 
XF⁄tSåu˘
 *
	$XQuîyF⁄t
–
Di•œy
 *, c⁄° * ) {  0; 
	}
}

23 
ölöe
 
	$XFªeF⁄tInfo
–**, 
XF⁄tSåu˘
 *, Ë{  0; 
	}
}

24 
ölöe
 
	$XSñe˘I≈ut
–
Di•œy
 *, 
Wödow
, Ë{  0; 
	}
}

25 
ölöe
 
	$XM≠Wödow
–
Di•œy
 *, 
Wödow
 ) {  0; 
	}
}

26 
ölöe
 
S¸ìn
 *
	$XDeÁu…S¸ìnOfDi•œy
–
Di•œy
 * ) {  0; 
	}
}

27 
ölöe
 
	$WidthOfS¸ìn
–
S¸ìn
 * ) {  0; 
	}
}

28 
ölöe
 
	$HeightOfS¸ìn
–
S¸ìn
 * ) {  0; 
	}
}

29 
ölöe
 
	$XMoveResizeWödow
–
Di•œy
 *, 
Wödow
, , , , Ë{  0; 
	}
}

31 
	sXEvít
 {};

32 
ölöe
 
	$XCheckMaskEvít
–
Di•œy
 *, , 
XEvít
 * ) {  0; 
	}
}

33 
ölöe
 
	$XSëSènd¨dPr›îtõs
–
Di•œy
 *, 
Wödow
, c⁄° *, , , , , Ë{  0; 
	}
}

35 
	sXWödowAâribuãs
 { 
	mwidth
, 
	mheight
; };

36 
ölöe
 
	$XGëWödowAâribuãs
–
Di•œy
 *, 
Wödow
, 
XWödowAâribuãs
 * ) {  0; 
	}
}

37 
ölöe
 
	$XSëF‹eground
–
Di•œy
 *, 
GC
, Ë{  0; 
	}
}

38 
ölöe
 
	$XSëBackground
–
Di•œy
 *, 
GC
, Ë{  0; 
	}
}

39 
ölöe
 
	$XFûlRe˘™gÀ
–
Di•œy
 *, 
Wödow
, 
GC
, , , , Ë{  0; 
	}
}

40 
ölöe
 
	$XDøwLöe
–
Di•œy
 *, 
Wödow
, 
GC
, , , , Ë{  0; 
	}
}

41 
ölöe
 
	$XDøwSåög
–
Di•œy
 *, 
Wödow
, 
GC
, , , c⁄° *, Ë{  0; 
	}
}

42 
ölöe
 
	$XFlush
–
Di•œy
 * ) {  0; 
	}
}

43 
ölöe
 
	$XFªeGC
–
Di•œy
 *, 
GC
 ) {  0; 
	}
}

44 
ölöe
 
	$XDe°royWödow
–
Di•œy
 *, 
Wödow
 ) {  0; 
	}
}

45 
ölöe
 
	$XClo£Di•œy
–
Di•œy
 * ) {  0; 
	}
}

46 
ölöe
 
	$XTextWidth
–
XF⁄tSåu˘
 *, c⁄° *, Ë{  0; 
	}
}

	@tools/cxxtest/test/fake/X11/Xutil.h

	@tools/cxxtest/test/fake/commctrl.h

1 #i‚de‡
__FAKE__COMMCTRL_H__


2 
	#__FAKE__COMMCTRL_H__


	)

4 
	~<wödows.h
>

6 
	#PROGRESS_CLASS
 
	`TEXT
("PROGRESS_CLASS")

	)

7 
	#STATUSCLASSNAME
 
	`TEXT
("STATUSCLASSNAME")

	)

9 íum { 
	mPBM_SETRANGE32
, 
	mPBM_SETRANGE
, 
	mPBM_SETPOS
, 
	mPBM_SETSTEP
, 
	mPBM_STEPIT
, 
	mPBM_SETBARCOLOR
,

10 
	mSB_SETTEXTA
, 
	mSB_SETPARTS
, 
	mBS_AUTOCHECKBOX
, 
	mBM_SETCHECK
, 
	mBST_UNCHECKED
, 
	mBM_GETCHECK
,

11 
	mBST_CHECKED
, 
	mPBS_SMOOTH
 };

13 
	#ICC_BAR_CLASSES
 1

	)

14 
	#ICC_PROGRESS_CLASS
 2

	)

16 
	sINITCOMMONCONTROLSEX


18 
DWORD
 
	mdwSize
;

19 
DWORD
 
	mdwICC
;

22 
ölöe
 
	$InôComm⁄C⁄åﬁs
(Ë{
	}
}

23 
ölöe
 
	$InôComm⁄C⁄åﬁsEx
(
INITCOMMONCONTROLSEX
 *Ë{  0; 
	}
}

	@tools/cxxtest/test/fake/qapplication.h

3 
˛ass
 
	gQWidgë
;

5 ˛as†
	cQAµliˇti⁄


7 
	mpublic
:

8 
	$QAµliˇti⁄
( &, ** ) {}

9 
	$exec
(Ë{
	}
}

10 
	$£tMaöWidgë
–* ) {
	}
}

11 
	$¥o˚ssEvíts
(Ë{
	}
}

12 
QWidgë
 *
	$deskt›
(Ë{  0; 
	}
}

13 *
	$a˘iveWödow
(Ë{  0; 
	}
}

	@tools/cxxtest/test/fake/qglobal.h

2 
	#QT_VERSION
 0x030000

	)

	@tools/cxxtest/test/fake/qlabel.h

2 
	~<q°rög.h
>

3 
	~<qwidgë.h
>

5 ˛as†
	cQLabñ


7 
	mpublic
:

8 
	$QLabñ
( * ) {}

9 
	$£tText
–c⁄° 
QSåög
 & ) {
	}
}

	@tools/cxxtest/test/fake/qlayout.h

3 ˛as†
	cQVBoxLayout


5 
	mpublic
:

6 
	$QVBoxLayout
( * ) {}

7 
	$addWidgë
–* ) {
	}
}

	@tools/cxxtest/test/fake/qmessagebox.h

3 ˛as†
	cQMesßgeBox


5 
	mpublic
:

6 
	eIc⁄
 { 
Inf‹m©i⁄
, 
	mW¨nög
, 
	mCrôiˇl
 };

7 *
	$°™d¨dIc⁄
–
Ic⁄
 ) {  0; 
	}
}

	@tools/cxxtest/test/fake/qpixmap.h

	@tools/cxxtest/test/fake/qprogressbar.h

3 ˛as†
	cQCﬁ‹Group


5 
	mpublic
:

6 íum { 
Highlight
 };

9 ˛as†
	cQCﬁ‹


11 
	mpublic
:

12 
	$QCﬁ‹
( , , ) {}

13 
	}
};

15 ˛as†
	cQPÆëã


17 
	mpublic
:

18 
	$£tCﬁ‹
–, c⁄° 
QCﬁ‹
 & ) {}

19 
	}
};

21 ˛as†
	cQProgªssB¨


23 
	mpublic
:

24 
	$QProgªssB¨
( , * ) {}

25 
	$£tProgªss
–Ë{
	}
}

26 
	$¥ogªss
(Ë{  0; 
	}
}

27 
QPÆëã
 
	$∑Àâe
(Ë{  
	`QPÆëã
(); 
	}
}

28 
	$£tPÆëã
–c⁄° 
QPÆëã
 & ) {
	}
}

	@tools/cxxtest/test/fake/qstatusbar.h

3 ˛as†
	cQSètusB¨


5 
	mpublic
:

6 
	$QSètusB¨
( * ) {}

7 
	$£tProgªss
(Ë{
	}
}

8 
	$addWidgë
–*, Ë{
	}
}

9 
	$ªmoveWidgë
–* ) {
	}
}

	@tools/cxxtest/test/fake/qstring.h

2 #i‚de‡
__FAKE__QSTRING_H


3 
	#__FAKE__QSTRING_H


	)

5 ˛as†
	cQSåög


7 
	mpublic
:

8 
	$QSåög
() {}

9 
	$QSåög
–c⁄° * ) {
	}
}

10 
boﬁ
 
›î©‹
==–c⁄° 
QSåög
 & ) {  
Ál£
; }

12 
QSåög
 
	$numbî
–Ë{  
	`QSåög
(); 
	}
}

15 
ölöe
 
QSåög
 
	g›î©‹
+–c⁄° 
	gQSåög
 &, const QString & ) {  QString(); }

	@tools/cxxtest/test/fake/qwidget.h

2 #i‚de‡
__FAKE__QWIDGET_H


3 
	#__FAKE__QWIDGET_H


	)

5 
˛ass
 
	gQSåög
;

7 ˛as†
	cQWidgë


9 
	mpublic
:

10 
boﬁ
 
	$isMöimized
(Ë{  
Ál£
; }

11 
	$˛o£
–
boﬁ
 ) {
	}
}

12 
	$showMöimized
(Ë{
	}
}

13 
	$showN‹mÆ
(Ë{
	}
}

14 
	$£tC≠ti⁄
–c⁄° 
QSåög
 & ) {
	}
}

15 
	$£tIc⁄
–* ) {
	}
}

16 
	$x
(Ë{  0; 
	}
}

17 
	$y
(Ë{  0; 
	}
}

18 
	$width
(Ë{  0; 
	}
}

19 
	$height
(Ë{  0; 
	}
}

20 
	$£tGeomëry
–, , , Ë{
	}
}

	@tools/cxxtest/test/fake/windows.h

1 #i‚de‡
__FAKE__WINDOWS_H__


2 
	#__FAKE__WINDOWS_H__


	)

4 
	~<°dio.h
>

6 
	tBYTE
;

7 
	tWORD
;

8 
	tUINT
;

9 
	tLONG
;

10 
	tDWORD
, 
	tULONG
, 
	tLRESULT
, 
	tLPARAM
, 
	tWPARAM
;

12 
	tBOOL
;

13 íum { 
	mFALSE
, 
	mTRUE
 };

15 
	s_HANDLE
 {} *
	gHANDLE
;

16 
	s_HBRUSH
 {} *
	gHBRUSH
;

17 
	s_HCURSOR
 {} *
	gHCURSOR
;

18 
	s_HEAP
 {} *
	gHEAP
;

19 
	s_HICON
 {} *
	gHICON
;

20 
	s_HINSTANCE
 {} *
	gHINSTANCE
;

21 
	s_HMENU
 {} *
	gHMENU
;

22 
	s_HMODULE
 {} *
	gHMODULE
;

23 
	s_HWND
 {} *
	gHWND
;

25 íum { 
	mINFINITE
, 
	mCS_HREDRAW
, 
	mCS_VREDRAW
, 
	mCOLOR_WINDOW
, 
	mGWL_USERDATA
, 
	mHWND_TOP
, 
	mSPI_GETWORKAREA
,

26 
	mWS_CHILD
, 
	mWS_VISIBLE
, 
	mSM_CYCAPTION
, 
	mSM_CYFRAME
, 
	mSM_CXSCREEN
, 
	mSM_CYSCREEN
,

27 
	mSW_SHOWNORMAL
, 
	mSW_MINIMIZE
, 
	mWM_SIZE
, 
	mWM_SETICON
, 
	mICON_BIG
, 
	mWS_OVERLAPPEDWINDOW
,

28 
	mWM_CREATE
, 
	mWM_TIMER
, 
	mWM_CLOSE
, 
	mWM_DESTROY
, 
	mWM_QUIT
 };

30 *
	tLPVOID
;

32 #ifde‡
UNICODE


33 
wch¨_t
 
	tTCHAR
;

34 
	#TEXT
(
x
Ë
L
##
	)
x

36 
	tTCHAR
;

37 
	#TEXT
(
x
Ë
	)
x

40 c⁄° 
	tTCHAR
 *
	tLPCTSTR
;

42 *
	tLPSTR
;

43 c⁄° *
	tLPCSTR
;

44 
	#IDI_INFORMATION
 
	`TEXT
("IDI_INFORMATION")

	)

45 
	#IDI_WARNING
 
	`TEXT
("IDI_WARNING")

	)

46 
	#IDI_ERROR
 
	`TEXT
("IDI_ERROR")

	)

48 (*
	tLPPROC
)( );

50 
	#WINAPI


	)

51 
	#CALLBACK


	)

53 
	sWNDCLASSEX


55 
cbSize
;

56 
°yÀ
;

57 
LRESULT
 
	`CALLBACK
 (*
Õ‚WndProc
)–
HWND
, 
UINT
, 
WPARAM
, 
LPARAM
 );

58 
cbClsExåa
;

59 
cbWndExåa
;

60 
HINSTANCE
 
hIn°™˚
;

61 
HICON
 
hIc⁄
;

62 
HCURSOR
 
hCurs‹
;

63 
HBRUSH
 
hbrBackground
;

64 
LPCTSTR
 
ÕszMíuName
;

65 
LPCTSTR
 
ÕszCœssName
;

66 
HICON
 
hIc⁄Sm
;

69 
	sRECT


71 
LONG
 
À·
, 
right
, 
t›
, 
bŸtom
;

74 
	sMSG


80 
LPVOID
 
ÕCª©eP¨ams
;

81 } 
	tCREATESTRUCT
, *
	tLPCREATESTRUCT
;

83 
ölöe
 
HANDLE
 
	$Cª©eEvít
–
LPVOID
, 
BOOL
, BOOL, LPVOID ) {  0; 
	}
}

84 
ölöe
 
HANDLE
 
Cª©eThªad
–
LPVOID
, , 
DWORD
 
	$WINAPI
 (*)–
LPVOID
 ), LPVOID, , LPVOID ) {  0; 
	}
}

85 
ölöe
 
	$WaôF‹SögÀObje˘
–
HANDLE
, Ë{  0; 
	}
}

86 
ölöe
 
	$Regi°îCœssEx
–
WNDCLASSEX
 * ) {  0; 
	}
}

87 
ölöe
 
	$SëWödowL⁄g
–
HWND
, , 
LONG
 ) {  0; 
	}
}

88 
ölöe
 
LPARAM
 
	$MAKELPARAM
–, Ë{  0; 
	}
}

89 
ölöe
 
HWND
 
	$Cª©eWödow
–
LPCTSTR
, 
LPVOID
, 
DWORD
, , , , , 
HWND
, 
HMENU
, 
HINSTANCE
, LPVOID ) {  0; 
	}
}

90 
ölöe
 
LRESULT
 
	$SídMesßge
–
HWND
, 
UINT
, 
WPARAM
, 
LPARAM
 ) {  0; 
	}
}

91 
ölöe
 
LONG
 
	$GëSy°emMërics
–Ë{  0; 
	}
}

92 
ölöe
 
	$SëWödowPos
–
HWND
, , 
LONG
, LONG, LONG, LONG, Ë{  0; 
	}
}

93 
ölöe
 
	$Sy°emP¨amëîsInfo
–, , 
LPVOID
, Ë{  0; 
	}
}

94 
ölöe
 
	$ShowWödow
–
HWND
, Ë{  0; 
	}
}

95 
ölöe
 
	$Upd©eWödow
–
HWND
 ) {  0; 
	}
}

96 
ölöe
 
	$SëEvít
–
HANDLE
 ) {  0; 
	}
}

97 
ölöe
 
BOOL
 
	$GëMesßge
–
MSG
 *, 
LPVOID
, , Ë{  
FALSE
; 
	}
}

98 
ölöe
 
	$Di•©chMesßge
–
MSG
 * ) {  0; 
	}
}

99 
ölöe
 
	$GëClõ¡Re˘
–
HWND
, 
RECT
 * ) {  0; 
	}
}

100 
ölöe
 
HICON
 
	$LﬂdIc⁄
–
HINSTANCE
, 
LPCTSTR
 ) {  0; 
	}
}

101 
ölöe
 
	$l°æíA
–
LPCSTR
 ) {  0; 
	}
}

102 
ölöe
 
	$l°rcmpA
–
LPCSTR
, LPCSTR ) {  0; 
	}
}

103 
ölöe
 
	$l°r˝yA
–
LPSTR
, 
LPCSTR
 ) {  0; 
	}
}

104 
ölöe
 
	$l°rˇtA
–
LPSTR
, 
LPCSTR
 ) {  0; 
	}
}

105 
	#w•rötfA
 
•rötf


	)

106 
ölöe
 
	$SëWödowTextA
–
HWND
, 
LPCSTR
 ) {  0; 
	}
}

107 
ölöe
 
LPVOID
 
	$HópAŒoc
–
HEAP
, , 
ULONG
 ) {  0; 
	}
}

108 
ölöe
 
HEAP
 
	$GëPro˚ssHóp
(Ë{  0; 
	}
}

109 
ölöe
 
	$HópFªe
–
HEAP
, , 
LPVOID
 ) {  0; 
	}
}

110 
ölöe
 
	$De°royWödow
–
HWND
 ) {  0; 
	}
}

111 
ölöe
 
LONG
 
	$GëWödowL⁄g
–
HWND
, Ë{  0; 
	}
}

112 
ölöe
 
LRESULT
 
CALLBACK
 
	$DefWödowProc
–
HWND
, 
UINT
, 
WPARAM
, 
LPARAM
 ) {  0; 
	}
}

113 
ölöe
 
HMODULE
 
	$LﬂdLibøryA
–
LPCSTR
 ) {  0; 
	}
}

114 
ölöe
 
LPPROC
 
	$GëProcAddªss
–
HMODULE
, 
LPCSTR
 ) {  0; 
	}
}

115 
ölöe
 
	$SëTimî
–
HWND
, , , Ë{  0; 
	}
}

116 
ölöe
 
	$KûlTimî
–
HWND
, Ë{  0; 
	}
}

117 
ölöe
 
DWORD
 
	$GëTickCou¡
(Ë{  0; 
	}
}

118 
ölöe
 
	$ExôPro˚ss
–Ë{  0; 
	}
}

119 
ölöe
 
boﬁ
 
	$IsIc⁄ic
–
HWND
 ) {  0; 
	}
}

120 
ölöe
 
HWND
 
	$GëF‹egroundWödow
(Ë{  0; 
	}
}

	@tools/cxxtest/test/int64.cpp

4 
	$maö
()

6 
__öt64
 
Œ
 = 0;

7  ()
Œ
;

8 
	}
}

	@tools/cxxtest/test/longlong.cpp

4 
	$maö
()

6 
Œ
 = 0;

7  ()
Œ
;

8 
	}
}

	@tools/cxxtest/test/main.cpp

1 
	~<cxxã°/Te°Ru¬î.h
>

2 
	~<cxxã°/Te°Li°íî.h
>

3 
	~<°dio.h
>

11 
usög
 
«me•a˚
 
	gCxxTe°
;

13 ˛as†
	cSumm¨yPröãr
 : 
public
 
CxxTe°
::
Te°Li°íî


15 
public
:

16 
	$run
()

18 
CxxTe°
::
Te°Ru¬î
::
	`runAŒTe°s
–*
this
 );

21 
	`ÀaveW‹ld
–c⁄° 
CxxTe°
::
W‹ldDes¸ùti⁄
 &
wd
 )

23 
	`¥ötf
–"Numbî o‡suôes: %u\n", 
wd
.
	`numSuôes
() );

24 
	`¥ötf
–"Numbî o‡ã°s: %u\n", 
wd
.
	`numTŸÆTe°s
() );

25 
	`¥ötf
–"Numbî o‡ÁûedÅe°s: %u\n", 
Te°Tøckî
::
	`åackî
().
	`ÁûedTe°s
() );

26 
	}
}

29 
	$maö
()

31 
	`Summ¨yPröãr
().
	`run
();

33 
	}
}

	@tools/cxxtest/test/stpltpl.cpp

1 
	~<cxxã°/Fœgs.h
>

3 #ifde‡
_CXXTEST_PARTIAL_TEMPLATE_SPECIALIZATION


4 
	$maö
(Ë{  0; 
	}
}

	@tools/cxxtest/test/tpltpl.cpp

1 
	~<cxxã°/Fœgs.h
>

3 #i‚de‡
_CXXTEST_PARTIAL_TEMPLATE_SPECIALIZATION


4 
	gãm∂©e
<
˛ass
 
	gT
> cœs†
	cX
 {} 
	gx
;

5 
	gãm∂©e
<
˛ass
 
	gT
, cœs†
	gU
> cœs†
	cPaú
 {} 
	gp
;

6 
	gãm∂©e
<
˛ass
 
	gT
, cœs†
	gU
> cœs†
	gX
< 
	gPaú
<T, U> > {} 
	gxp
;

8 
	$maö
(Ë{  0; 
	}
}

	@tools/cxxtest/test/unit/LinkedList_test.t.h

1 #i‚de‡
LINKEDLIST_TEST_H


2 
	#LINKEDLIST_TEST_H


	)

4 
	~<cxxã°/LökedLi°.h
>

6 ˛as†
	cTe°Lök
 : 
public
 
CxxTe°
::
Lök


8 
public
:

9 
boﬁ
 
	$£tUp
(Ë{  
åue
; }

10 
boﬁ
 
	$ã¨Down
(Ë{  
åue
; 
	}
}

13 
	~<cxxã°/Te°Suôe.h
>

14 ˛as†
	cLökedLi°_ã°
 : 
public
 
CxxTe°
::
Te°Suôe


16 
public
:

17 
	$ã°_öôülize
()

19 
CxxTe°
::
Li°
 
li°
;

20 
li°
.
	`öôülize
();

21 
	`TS_ASSERT_EQUALS
((
CxxTe°
::
Lök
*)0, 
li°
.
	`hód
());

22 
	`TS_ASSERT_EQUALS
((
CxxTe°
::
Lök
*)0, 
li°
.
	`èû
());

23 
	`TS_ASSERT_EQUALS
(0, 
li°
.
	`size
());

24 
	`TS_ASSERT
(
li°
.
	`em±y
());

27 
	$ã°_©èch
()

29 
CxxTe°
::
Li°
 
li°
;

30 
Te°Lök
 
lök
;

32 
li°
.
	`öôülize
();

33 
lök
.
	`©èch
(
li°
);

35 
	`TS_ASSERT_EQUALS
(1, 
li°
.
	`size
());

36 
	`TS_ASSERT_EQUALS
((
CxxTe°
::
Lök
*)&
lök
, 
li°
.
	`hód
());

37 
	`TS_ASSERT_EQUALS
((
CxxTe°
::
Lök
*)&
lök
, 
li°
.
	`èû
());

38 
	}
}

40 
	$ã°_dëach
()

42 
CxxTe°
::
Li°
 
li°
;

43 
Te°Lök
 
lök
;

45 
li°
.
	`öôülize
();

46 
lök
.
	`©èch
(
li°
);

47 
lök
.
	`dëach
(
li°
);

49 
	`TS_ASSERT_EQUALS
((
CxxTe°
::
Lök
*)0, 
li°
.
	`hód
());

50 
	`TS_ASSERT_EQUALS
((
CxxTe°
::
Lök
*)0, 
li°
.
	`èû
());

51 
	`TS_ASSERT_EQUALS
(0, 
li°
.
	`size
());

52 
	`TS_ASSERT
(
li°
.
	`em±y
());

53 
	}
}

	@tools/cxxtest/test/wchar.cpp

4 
	~<°rög
>

6 
	$maö
()

8 
°d
::
basic_°rög
<
wch¨_t
> 
	`s
(
L
"s");

10 
	}
}

	@
1
.
0
194
7883
source/cork.cpp
source/cork.h
tests/source/main.h
tools/cxxtest/build_tools/SCons/test/empty_source_list/requirement.hpp
tools/cxxtest/build_tools/SCons/test/empty_source_list/test_bar.t.h
tools/cxxtest/build_tools/SCons/test/empty_source_list/test_foo.t.h
tools/cxxtest/build_tools/SCons/test/globbing/src/requirement.cpp
tools/cxxtest/build_tools/SCons/test/globbing/src/requirement.h
tools/cxxtest/build_tools/SCons/test/globbing/src/test_bar.t.h
tools/cxxtest/build_tools/SCons/test/globbing/src/test_foo.t.h
tools/cxxtest/build_tools/SCons/test/globbing_edmundo/hello.cc
tools/cxxtest/build_tools/SCons/test/globbing_edmundo/hello.hh
tools/cxxtest/build_tools/SCons/test/globbing_edmundo/hellotest.t.h
tools/cxxtest/build_tools/SCons/test/globbing_edmundo/main.cpp
tools/cxxtest/build_tools/SCons/test/include_CCFLAGS/src/not-with-pedantic.h
tools/cxxtest/build_tools/SCons/test/include_CCFLAGS/src/only_with_ansi.t.h
tools/cxxtest/build_tools/SCons/test/include_CXXFLAGS/src/not-with-pedantic.h
tools/cxxtest/build_tools/SCons/test/multifile_tests/src/requirement.cpp
tools/cxxtest/build_tools/SCons/test/multifile_tests/src/requirement.h
tools/cxxtest/build_tools/SCons/test/multifile_tests/src/test_bar.t.h
tools/cxxtest/build_tools/SCons/test/multifile_tests/src/test_foo.t.h
tools/cxxtest/build_tools/SCons/test/need_cpppath/src/cpppath.t.h
tools/cxxtest/build_tools/SCons/test/need_cpppath/src/cpppathdir/include.h
tools/cxxtest/build_tools/SCons/test/printer_propagation/cxxtest/CrazyRunner.h
tools/cxxtest/build_tools/SCons/test/printer_propagation/src/failtest.t.h
tools/cxxtest/build_tools/SCons/test/recursive_sources/src/requirement.cpp
tools/cxxtest/build_tools/SCons/test/recursive_sources/src/requirement.h
tools/cxxtest/build_tools/SCons/test/recursive_sources/src/test_bar.t.h
tools/cxxtest/build_tools/SCons/test/recursive_sources/src/test_foo.t.h
tools/cxxtest/build_tools/SCons/test/string_cpppath/src/cpppath.t.h
tools/cxxtest/build_tools/SCons/test/string_cpppath/src/cpppathdir/include.h
tools/cxxtest/build_tools/SCons/test/target_syntax/src/cpppath.t.h
tools/cxxtest/build_tools/SCons/test/target_syntax/src/cpppathdir/include.h
tools/cxxtest/cxxtest/Descriptions.cpp
tools/cxxtest/cxxtest/Descriptions.h
tools/cxxtest/cxxtest/DummyDescriptions.cpp
tools/cxxtest/cxxtest/DummyDescriptions.h
tools/cxxtest/cxxtest/ErrorFormatter.h
tools/cxxtest/cxxtest/ErrorPrinter.h
tools/cxxtest/cxxtest/Flags.h
tools/cxxtest/cxxtest/GlobalFixture.cpp
tools/cxxtest/cxxtest/GlobalFixture.h
tools/cxxtest/cxxtest/Gui.h
tools/cxxtest/cxxtest/LinkedList.cpp
tools/cxxtest/cxxtest/LinkedList.h
tools/cxxtest/cxxtest/Mock.h
tools/cxxtest/cxxtest/ParenPrinter.h
tools/cxxtest/cxxtest/QtGui.h
tools/cxxtest/cxxtest/RealDescriptions.cpp
tools/cxxtest/cxxtest/RealDescriptions.h
tools/cxxtest/cxxtest/Root.cpp
tools/cxxtest/cxxtest/SelfTest.h
tools/cxxtest/cxxtest/StdHeaders.h
tools/cxxtest/cxxtest/StdTestSuite.h
tools/cxxtest/cxxtest/StdValueTraits.h
tools/cxxtest/cxxtest/StdioFilePrinter.h
tools/cxxtest/cxxtest/StdioPrinter.h
tools/cxxtest/cxxtest/TeeListener.h
tools/cxxtest/cxxtest/TestListener.h
tools/cxxtest/cxxtest/TestMain.h
tools/cxxtest/cxxtest/TestRunner.h
tools/cxxtest/cxxtest/TestSuite.cpp
tools/cxxtest/cxxtest/TestSuite.h
tools/cxxtest/cxxtest/TestTracker.cpp
tools/cxxtest/cxxtest/TestTracker.h
tools/cxxtest/cxxtest/ValueTraits.cpp
tools/cxxtest/cxxtest/ValueTraits.h
tools/cxxtest/cxxtest/Win32Gui.h
tools/cxxtest/cxxtest/X11Gui.h
tools/cxxtest/cxxtest/XUnitPrinter.h
tools/cxxtest/cxxtest/XmlFormatter.h
tools/cxxtest/cxxtest/XmlPrinter.h
tools/cxxtest/cxxtest/YesNoRunner.h
tools/cxxtest/doc/examples/Assertions.h
tools/cxxtest/doc/examples/BadTestSuite1.h
tools/cxxtest/doc/examples/MockTestSuite.h
tools/cxxtest/doc/examples/MyClass.h
tools/cxxtest/doc/examples/MyTestSuite1.h
tools/cxxtest/doc/examples/MyTestSuite10.h
tools/cxxtest/doc/examples/MyTestSuite11.h
tools/cxxtest/doc/examples/MyTestSuite2.h
tools/cxxtest/doc/examples/MyTestSuite3.h
tools/cxxtest/doc/examples/MyTestSuite4.h
tools/cxxtest/doc/examples/MyTestSuite5.h
tools/cxxtest/doc/examples/MyTestSuite6.h
tools/cxxtest/doc/examples/MyTestSuite7.h
tools/cxxtest/doc/examples/MyTestSuite8.h
tools/cxxtest/doc/examples/MyTestSuite9.h
tools/cxxtest/doc/examples/TMyClass.h
tools/cxxtest/doc/examples/rand_example.cpp
tools/cxxtest/doc/examples/time_mock.cpp
tools/cxxtest/doc/examples/time_mock.h
tools/cxxtest/doc/examples/time_real.cpp
tools/cxxtest/sample/CreatedTest.h
tools/cxxtest/sample/DeltaTest.h
tools/cxxtest/sample/EnumTraits.h
tools/cxxtest/sample/ExceptionTest.h
tools/cxxtest/sample/FixtureTest.h
tools/cxxtest/sample/MessageTest.h
tools/cxxtest/sample/SCons/include/stack.h
tools/cxxtest/sample/SCons/src/stack.c
tools/cxxtest/sample/SCons/tests/stack_test.h
tools/cxxtest/sample/SimpleTest.h
tools/cxxtest/sample/TraitsTest.h
tools/cxxtest/sample/gui/GreenYellowRed.h
tools/cxxtest/sample/mock/Dice.cpp
tools/cxxtest/sample/mock/Dice.h
tools/cxxtest/sample/mock/MockStdlib.h
tools/cxxtest/sample/mock/T/stdlib.h
tools/cxxtest/sample/mock/TestDice.h
tools/cxxtest/sample/mock/mock_stdlib.cpp
tools/cxxtest/sample/mock/real_stdlib.cpp
tools/cxxtest/sample/mock/roll.cpp
tools/cxxtest/sample/yes_no_runner.cpp
tools/cxxtest/test/AborterNoThrow.h
tools/cxxtest/test/BadTest.h
tools/cxxtest/test/Comments.h
tools/cxxtest/test/Comments2.h
tools/cxxtest/test/CppTemplateTest.h
tools/cxxtest/test/DeepAbort.h
tools/cxxtest/test/DefaultAbort.h
tools/cxxtest/test/DefaultTraits.h
tools/cxxtest/test/DoubleCall.h
tools/cxxtest/test/DynamicAbort.h
tools/cxxtest/test/DynamicMax.h
tools/cxxtest/test/EmptySuite.h
tools/cxxtest/test/Exceptions.h
tools/cxxtest/test/Factor.h
tools/cxxtest/test/ForceNoEh.h
tools/cxxtest/test/GfSetUpFails.h
tools/cxxtest/test/GfSetUpThrows.h
tools/cxxtest/test/GfTearDownFails.h
tools/cxxtest/test/GfTearDownThrows.h
tools/cxxtest/test/GlobalFixtures.h
tools/cxxtest/test/GoodSuite.h
tools/cxxtest/test/GuiWait.h
tools/cxxtest/test/HaveStd.h
tools/cxxtest/test/IncludeTest.h
tools/cxxtest/test/InheritedTest.h
tools/cxxtest/test/Int64.h
tools/cxxtest/test/LessThanEquals.h
tools/cxxtest/test/LongLong.h
tools/cxxtest/test/LongTraits.h
tools/cxxtest/test/MaxDump.h
tools/cxxtest/test/MockTest.h
tools/cxxtest/test/NoEh.h
tools/cxxtest/test/Part1.h
tools/cxxtest/test/Part2.h
tools/cxxtest/test/Relation.h
tools/cxxtest/test/SameData.h
tools/cxxtest/test/SameFiles.h
tools/cxxtest/test/SameFilesLonger.h
tools/cxxtest/test/SameZero.h
tools/cxxtest/test/SetUpWorldError.h
tools/cxxtest/test/SetUpWorldFails.h
tools/cxxtest/test/SetUpWorldThrows.h
tools/cxxtest/test/SimpleInheritedTest.h
tools/cxxtest/test/SimpleInheritedTest2.h
tools/cxxtest/test/Something.h
tools/cxxtest/test/StlTraits.h
tools/cxxtest/test/TearDownWorldFails.h
tools/cxxtest/test/TearDownWorldThrows.h
tools/cxxtest/test/TestNonFinite.h
tools/cxxtest/test/ThrowNoStd.h
tools/cxxtest/test/ThrowsAssert.h
tools/cxxtest/test/TraitsTest.h
tools/cxxtest/test/Tsm.h
tools/cxxtest/test/UserTraits.h
tools/cxxtest/test/VoidTraits.h
tools/cxxtest/test/WideCharTest.h
tools/cxxtest/test/WorldFixtures.h
tools/cxxtest/test/anything.cpp
tools/cxxtest/test/cxxtest/DummyGui.h
tools/cxxtest/test/fake/X11/Xlib.h
tools/cxxtest/test/fake/X11/Xutil.h
tools/cxxtest/test/fake/commctrl.h
tools/cxxtest/test/fake/qapplication.h
tools/cxxtest/test/fake/qglobal.h
tools/cxxtest/test/fake/qlabel.h
tools/cxxtest/test/fake/qlayout.h
tools/cxxtest/test/fake/qmessagebox.h
tools/cxxtest/test/fake/qpixmap.h
tools/cxxtest/test/fake/qprogressbar.h
tools/cxxtest/test/fake/qstatusbar.h
tools/cxxtest/test/fake/qstring.h
tools/cxxtest/test/fake/qwidget.h
tools/cxxtest/test/fake/windows.h
tools/cxxtest/test/int64.cpp
tools/cxxtest/test/longlong.cpp
tools/cxxtest/test/main.cpp
tools/cxxtest/test/stpltpl.cpp
tools/cxxtest/test/tpltpl.cpp
tools/cxxtest/test/unit/LinkedList_test.t.h
tools/cxxtest/test/wchar.cpp
